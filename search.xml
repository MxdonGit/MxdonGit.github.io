<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UEFI的编译细节</title>
      <link href="/2022/UEFI%E7%9A%84%E7%BC%96%E8%AF%91%E7%BB%86%E8%8A%82/"/>
      <url>/2022/UEFI%E7%9A%84%E7%BC%96%E8%AF%91%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="UEFI的编译细节"><a href="#UEFI的编译细节" class="headerlink" title="UEFI的编译细节"></a>UEFI的编译细节</h1><h2 id="UEFI编译"><a href="#UEFI编译" class="headerlink" title="UEFI编译"></a>UEFI编译</h2><p>uefi的常规编译方式为：build -t CompilerName -A Arch -p PkgName -j logfile</p><h2 id="UEFI的编译细节展开"><a href="#UEFI的编译细节展开" class="headerlink" title="UEFI的编译细节展开"></a>UEFI的编译细节展开</h2><p>通常UEFI的编译包括以下三个步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. edksetup.sh</span><br><span class="line">make -C BaseTools</span><br><span class="line">build -t CompilerName -A Arch -p PkgName -j logfile</span><br></pre></td></tr></table></figure><h2 id="edksetup-sh"><a href="#edksetup-sh" class="headerlink" title="edksetup.sh"></a>edksetup.sh</h2><p>上述准备过程中,edksetup.sh的工作是准备工作的核心,具体来看一下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">SCRIPTNAME=&quot;edksetup.sh&quot;</span><br><span class="line">RECONFIG=FALSE</span><br><span class="line"></span><br><span class="line">#使用帮助</span><br><span class="line">function HelpMsg()</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;Usage: $SCRIPTNAME [Options]&quot;</span><br><span class="line">  echo</span><br><span class="line">  echo &quot;The system environment variable, WORKSPACE, is always set to the current&quot;</span><br><span class="line">  echo &quot;working directory.&quot;</span><br><span class="line">  echo</span><br><span class="line">  echo &quot;Options: &quot;</span><br><span class="line">  echo &quot;  --help, -h, -?        Print this help screen and exit.&quot;</span><br><span class="line">  echo</span><br><span class="line">  echo &quot;  --reconfig            Overwrite the WORKSPACE/Conf/*.txt files with the&quot;</span><br><span class="line">  echo &quot;                        template files from the BaseTools/Conf directory.&quot;</span><br><span class="line">  echo</span><br><span class="line">  echo Please note: This script must be \&#x27;sourced\&#x27; so the environment can be changed.</span><br><span class="line">  echo &quot;. $SCRIPTNAME&quot;</span><br><span class="line">  echo &quot;source $SCRIPTNAME&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 设定工作目录</span><br><span class="line">function SetWorkspace()</span><br><span class="line">&#123;</span><br><span class="line">  #</span><br><span class="line">  # If WORKSPACE is already set, then we can return right now</span><br><span class="line">  #</span><br><span class="line">  if [ -n &quot;$WORKSPACE&quot; ]</span><br><span class="line">  then</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [ ! $&#123;BASH_SOURCE[0]&#125; -ef ./edksetup.sh ] &amp;&amp; [ -z &quot;$PACKAGES_PATH&quot; ]</span><br><span class="line">  then</span><br><span class="line">    echo Run this script from the base of your tree.  For example:</span><br><span class="line">    echo &quot;  cd /Path/To/Edk/Root&quot;</span><br><span class="line">    echo &quot;  . edksetup.sh&quot;</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # Check for BaseTools/BuildEnv before dirtying the user&#x27;s environment.</span><br><span class="line">  #</span><br><span class="line">  if [ ! -f BaseTools/BuildEnv ] &amp;&amp; [ -z &quot;$EDK_TOOLS_PATH&quot; ]</span><br><span class="line">  then</span><br><span class="line">    echo BaseTools not found in your tree, and EDK_TOOLS_PATH is not set.</span><br><span class="line">    echo Please point EDK_TOOLS_PATH at the directory that contains</span><br><span class="line">    echo the EDK2 BuildEnv script.</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # Set $WORKSPACE</span><br><span class="line">  #</span><br><span class="line">  export WORKSPACE=`pwd`</span><br><span class="line"></span><br><span class="line">  return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设定环境变量</span><br><span class="line">function SetupEnv()</span><br><span class="line">&#123;</span><br><span class="line">  # !!环境变量的重要内容在BuildEnv里面!!</span><br><span class="line">  if [ -n &quot;$EDK_TOOLS_PATH&quot; ]</span><br><span class="line">  then</span><br><span class="line">    . $EDK_TOOLS_PATH/BuildEnv</span><br><span class="line">  elif [ -f &quot;$WORKSPACE/BaseTools/BuildEnv&quot; ]</span><br><span class="line">  then</span><br><span class="line">    . $WORKSPACE/BaseTools/BuildEnv</span><br><span class="line">  elif [ -n &quot;$PACKAGES_PATH&quot; ]</span><br><span class="line">  then </span><br><span class="line">    PATH_LIST=$PACKAGES_PATH</span><br><span class="line">    PATH_LIST=$&#123;PATH_LIST//:/ &#125;</span><br><span class="line">    for DIR in $PATH_LIST</span><br><span class="line">    do</span><br><span class="line">      if [ -f &quot;$DIR/BaseTools/BuildEnv&quot; ]</span><br><span class="line">      then</span><br><span class="line">        export EDK_TOOLS_PATH=$DIR/BaseTools</span><br><span class="line">        . $DIR/BaseTools/BuildEnv</span><br><span class="line">        break</span><br><span class="line">      fi</span><br><span class="line">    done</span><br><span class="line">  else</span><br><span class="line">    echo BaseTools not found in your tree, and EDK_TOOLS_PATH is not set.</span><br><span class="line">    echo Please check that WORKSPACE or PACKAGES_PATH is not set incorrectly</span><br><span class="line">    echo in your shell, or point EDK_TOOLS_PATH at the directory that contains</span><br><span class="line">    echo the EDK2 BuildEnv script.</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设定环境变量和工作目录的入口</span><br><span class="line">function SourceEnv()</span><br><span class="line">&#123;</span><br><span class="line">  SetWorkspace &amp;&amp;</span><br><span class="line">  SetupEnv</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 文件运行的入口,获取运行参数并按需执行</span><br><span class="line">I=$#</span><br><span class="line">while [ $I -gt 0 ]</span><br><span class="line">do</span><br><span class="line">  case &quot;$1&quot; in</span><br><span class="line">    BaseTools)</span><br><span class="line">      # Ignore argument for backwards compatibility</span><br><span class="line">      shift</span><br><span class="line">    ;;</span><br><span class="line">    --reconfig)</span><br><span class="line">      RECONFIG=TRUE</span><br><span class="line">      shift</span><br><span class="line">    ;;</span><br><span class="line">    -?|-h|--help|*)</span><br><span class="line">      HelpMsg</span><br><span class="line">      break</span><br><span class="line">    ;;</span><br><span class="line">  esac</span><br><span class="line">  I=$(($I - 1))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ $I -gt 0 ]</span><br><span class="line">then</span><br><span class="line">  return 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">SourceEnv</span><br><span class="line"></span><br><span class="line">unset SCRIPTNAME RECONFIG</span><br><span class="line"></span><br><span class="line">return $?</span><br></pre></td></tr></table></figure><h2 id="上面核心的内容在BuildEnv里"><a href="#上面核心的内容在BuildEnv里" class="headerlink" title="上面核心的内容在BuildEnv里"></a>上面核心的内容在BuildEnv里</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"># 同样在设置环境变量</span><br><span class="line">SetWorkspace() &#123;</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # If WORKSPACE is already set, then we can return right now</span><br><span class="line">  #</span><br><span class="line">  if [ -n &quot;$WORKSPACE&quot; ]</span><br><span class="line">  then</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # Set $WORKSPACE</span><br><span class="line">  #</span><br><span class="line">  export WORKSPACE=`pwd`</span><br><span class="line"></span><br><span class="line">  return 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 恢复配置</span><br><span class="line">RestorePreviousConfiguration() &#123;</span><br><span class="line">  #</span><br><span class="line">  # Restore previous configuration</span><br><span class="line">  #</span><br><span class="line">  if [ -z &quot;$CONF_PATH&quot; ]</span><br><span class="line">  then</span><br><span class="line">    export CONF_PATH=$WORKSPACE/Conf</span><br><span class="line">    if [ ! -d $WORKSPACE/Conf ] &amp;&amp; [ -n &quot;$PACKAGES_PATH&quot; ]</span><br><span class="line">    then</span><br><span class="line">      PATH_LIST=$&#123;PACKAGES_PATH//:/ &#125;</span><br><span class="line">      for DIR in $PATH_LIST</span><br><span class="line">      do</span><br><span class="line">        if [ -d $DIR/Conf ]</span><br><span class="line">        then</span><br><span class="line">          export CONF_PATH=$DIR/Conf</span><br><span class="line">          break</span><br><span class="line">        fi</span><br><span class="line">      done</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">  </span><br><span class="line">  PREVIOUS_CONF_FILE=$CONF_PATH/BuildEnv.sh</span><br><span class="line">  if [ -e $PREVIOUS_CONF_FILE ]</span><br><span class="line">  then</span><br><span class="line">    echo Loading previous configuration from $PREVIOUS_CONF_FILE</span><br><span class="line">    . $PREVIOUS_CONF_FILE</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 生成Shell脚本去设置变量</span><br><span class="line">GenerateShellCodeToSetVariable() &#123;</span><br><span class="line">  VARIABLE=$1</span><br><span class="line">  OUTPUT_FILE=$2</span><br><span class="line">  VAR_VALUE=&quot;echo \$&#123;$&#123;VARIABLE&#125;&#125;&quot;</span><br><span class="line">  VAR_VALUE=`eval $VAR_VALUE`</span><br><span class="line">  echo &quot;if [ -z \&quot;\$$&#123;VARIABLE&#125;\&quot; ]&quot;             &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;then&quot;                                    &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;  export $&#123;VARIABLE&#125;=$&#123;VAR_VALUE&#125;&quot;       &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;fi&quot;                                      &gt;&gt; $OUTPUT_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 生成shell脚本去更新环境变量</span><br><span class="line">GenerateShellCodeToUpdatePath() &#123;</span><br><span class="line">  OUTPUT_FILE=$1</span><br><span class="line">  echo &quot;if [ -e $EDK_TOOLS_PATH_BIN ]&quot;                        &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;then&quot;                                                 &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;  if [ &quot;\$&#123;PATH/$EDK_TOOLS_PATH_BIN/&#125;&quot; == &quot;\$PATH&quot; ]&quot; &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;  then&quot;                                               &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;    export PATH=$EDK_TOOLS_PATH_BIN:\$PATH&quot;           &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;  fi&quot;                                                 &gt;&gt; $OUTPUT_FILE</span><br><span class="line">  echo &quot;fi&quot;                                                   &gt;&gt; $OUTPUT_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 存储当前配置信息</span><br><span class="line">StoreCurrentConfiguration() &#123;</span><br><span class="line">  #</span><br><span class="line">  # Write configuration to a shell script to allow for configuration to be</span><br><span class="line">  # easily reloaded.</span><br><span class="line">  #</span><br><span class="line">  OUTPUT_FILE=$CONF_PATH/BuildEnv.sh</span><br><span class="line">  #echo Storing current configuration into $OUTPUT_FILE</span><br><span class="line">  echo &quot;# Auto-generated by $&#123;BASH_SOURCE[0]&#125;&quot; &gt;| $OUTPUT_FILE</span><br><span class="line">  GenerateShellCodeToSetVariable WORKSPACE $OUTPUT_FILE</span><br><span class="line">  GenerateShellCodeToSetVariable EDK_TOOLS_PATH $OUTPUT_FILE</span><br><span class="line">  GenerateShellCodeToUpdatePath $OUTPUT_FILE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设定配置信息的目录</span><br><span class="line">SetEdkToolsPath() &#123;</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # If EDK_TOOLS_PATH is already set, then we can return right now</span><br><span class="line">  #</span><br><span class="line">  if [ -n &quot;$EDK_TOOLS_PATH&quot; ]</span><br><span class="line">  then</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # Try $CONF_PATH/EdkTools</span><br><span class="line">  #</span><br><span class="line">  if [ -e $CONF_PATH/EdkTools ]</span><br><span class="line">  then</span><br><span class="line">    export EDK_TOOLS_PATH=$CONF_PATH/EdkTools</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # Try $CONF_PATH/BaseToolsSource</span><br><span class="line">  #</span><br><span class="line">  if [ -e $CONF_PATH/BaseToolsSource ]</span><br><span class="line">  then</span><br><span class="line">    export EDK_TOOLS_PATH=$CONF_PATH/BaseToolsSource</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # Try $WORKSPACE/BaseTools</span><br><span class="line">  #</span><br><span class="line">  if [ -e $WORKSPACE/BaseTools ]</span><br><span class="line">  then</span><br><span class="line">    export EDK_TOOLS_PATH=$WORKSPACE/BaseTools</span><br><span class="line">    return 0</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # Try $PACKAGES_PATH</span><br><span class="line">  #</span><br><span class="line">  if [ -n &quot;$PACKAGES_PATH&quot;]</span><br><span class="line">  then</span><br><span class="line">    PATH_LIST=$&#123;PACKAGES_PATH//:/ &#125;</span><br><span class="line">    for DIR in $PATH_LIST</span><br><span class="line">    do</span><br><span class="line">      if [ -d $DIR/BaseTools ]</span><br><span class="line">      then</span><br><span class="line">        export EDK_TOOLS_PATH=$DIR/BaseTools</span><br><span class="line">        return 0</span><br><span class="line">      fi</span><br><span class="line">    done</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  echo &quot;Unable to determine EDK_TOOLS_PATH&quot;</span><br><span class="line">  echo</span><br><span class="line">  echo &quot;You may need to download the &#x27;BaseTools&#x27; from buildtools.tianocore.org.&quot;</span><br><span class="line">  echo &quot;After downloading, either create a symbolic link to the source at&quot;</span><br><span class="line">  echo &quot;\$WORKSPACE/Conf/BaseToolsSource, or set the EDK_TOOLS_PATH environment&quot;</span><br><span class="line">  echo &quot;variable.&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 由系统类型,获取相关的子文件夹名称</span><br><span class="line">GetBaseToolsBinSubDir() &#123;</span><br><span class="line">  #</span><br><span class="line">  # Figure out a uniq directory name from the uname command</span><br><span class="line">  #</span><br><span class="line">  UNAME_DIRNAME=`uname -sm`</span><br><span class="line">  UNAME_DIRNAME=$&#123;UNAME_DIRNAME// /-&#125;</span><br><span class="line">  UNAME_DIRNAME=$&#123;UNAME_DIRNAME//\//-&#125;</span><br><span class="line">  echo $UNAME_DIRNAME</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 结合上一个函数,得到edk下二进制存放目录</span><br><span class="line">GetEdkToolsPathBinDirectory() &#123;</span><br><span class="line">  #</span><br><span class="line">  # Figure out a uniq directory name from the uname command</span><br><span class="line">  #</span><br><span class="line">  BIN_SUB_DIR=`GetBaseToolsBinSubDir`</span><br><span class="line"></span><br><span class="line">  if [ -e $EDK_TOOLS_PATH/BinWrappers/$BIN_SUB_DIR ]</span><br><span class="line">  then</span><br><span class="line">    EDK_TOOLS_PATH_BIN=$EDK_TOOLS_PATH/BinWrappers/$BIN_SUB_DIR</span><br><span class="line">  else</span><br><span class="line">    EDK_TOOLS_PATH_BIN=$EDK_TOOLS_PATH/Bin/$BIN_SUB_DIR</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  echo $EDK_TOOLS_PATH_BIN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 还是环境变量</span><br><span class="line">AddDirToStartOfPath() &#123;</span><br><span class="line">  DIRNAME=$1</span><br><span class="line">  PATH=$DIRNAME:$DIRNAME:$DIRNAME:$PATH</span><br><span class="line">  PATH=$&#123;PATH//$DIRNAME:/&#125;</span><br><span class="line">  PATH=$DIRNAME:$PATH</span><br><span class="line">  export PATH</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AddEdkToolsToPath() &#123;</span><br><span class="line"></span><br><span class="line">  #</span><br><span class="line">  # If EDK_TOOLS_PATH is not set, then we cannot update PATH</span><br><span class="line">  #</span><br><span class="line">  if [ -z &quot;$EDK_TOOLS_PATH&quot; ]</span><br><span class="line">  then</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  EDK_TOOLS_PATH_BIN=`GetEdkToolsPathBinDirectory`</span><br><span class="line"></span><br><span class="line">  AddDirToStartOfPath $EDK_TOOLS_PATH/BinWrappers/PosixLike</span><br><span class="line">  AddDirToStartOfPath $EDK_TOOLS_PATH_BIN</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># !!拷贝配置文件模板!!</span><br><span class="line"># 把BaseTools/Conf下的模板文件,拷贝到Conf下</span><br><span class="line"># 拷贝的模板文件为:build_rule, tools_def, target</span><br><span class="line">CopySingleTemplateFile() &#123;</span><br><span class="line"></span><br><span class="line">  SRC_FILENAME=Conf/$1.template</span><br><span class="line">  DST_FILENAME=$CONF_PATH/$1.txt</span><br><span class="line"></span><br><span class="line">  if [ -e $DST_FILENAME ]</span><br><span class="line">  then</span><br><span class="line">    [ $RECONFIG != TRUE ] &amp;&amp; return</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  echo &quot;Copying \$EDK_TOOLS_PATH/$SRC_FILENAME&quot;</span><br><span class="line">  echo &quot;     to $DST_FILENAME&quot;</span><br><span class="line">  SRC_FILENAME=$EDK_TOOLS_PATH/$SRC_FILENAME</span><br><span class="line">  cp $SRC_FILENAME $DST_FILENAME</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CopyTemplateFiles() &#123;</span><br><span class="line"></span><br><span class="line">  CopySingleTemplateFile build_rule</span><br><span class="line">  CopySingleTemplateFile tools_def</span><br><span class="line">  CopySingleTemplateFile target</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 脚本入口</span><br><span class="line">ScriptMain() &#123;</span><br><span class="line"></span><br><span class="line">  SetWorkspace</span><br><span class="line">  if [ -z $WORKSPACE ]</span><br><span class="line">  then</span><br><span class="line">    echo &quot;Failure setting WORKSPACE&quot;</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  RestorePreviousConfiguration</span><br><span class="line"></span><br><span class="line">  SetEdkToolsPath</span><br><span class="line">  if [ -z $EDK_TOOLS_PATH ]</span><br><span class="line">  then</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  AddEdkToolsToPath</span><br><span class="line">  if [ $? -ne 0 ]</span><br><span class="line">  then</span><br><span class="line">    echo &quot;Failure adding EDK Tools into PATH!&quot;</span><br><span class="line">    return 1</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  StoreCurrentConfiguration</span><br><span class="line"></span><br><span class="line">  echo WORKSPACE: $WORKSPACE</span><br><span class="line">  echo EDK_TOOLS_PATH: $EDK_TOOLS_PATH</span><br><span class="line">  echo CONF_PATH: $CONF_PATH</span><br><span class="line"></span><br><span class="line">  CopyTemplateFiles</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Run the main function</span><br><span class="line">#</span><br><span class="line">ScriptMain</span><br></pre></td></tr></table></figure><h2 id="make-C-BaseTools"><a href="#make-C-BaseTools" class="headerlink" title="make -C BaseTools"></a>make -C BaseTools</h2><p>上面所述编译前的准备中,Basetools会在edksetup.sh没有生效时执行,也稍作分析吧</p><p>来看一眼其中的的Makefile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">!IFNDEF BASE_TOOLS_PATH</span><br><span class="line">!ERROR &quot;BASE_TOOLS_PATH is not set! Please run toolsetup.bat first!&quot;</span><br><span class="line">!ENDIF</span><br><span class="line"></span><br><span class="line">SUBDIRS = $(BASE_TOOLS_PATH)\Source\C $(BASE_TOOLS_PATH)\Source\Python</span><br><span class="line"></span><br><span class="line">//#编译依赖项是c和python</span><br><span class="line">all: c python</span><br><span class="line"></span><br><span class="line">c :</span><br><span class="line">  @$(BASE_TOOLS_PATH)\Source\C\Makefiles\NmakeSubdirs.bat all $(BASE_TOOLS_PATH)\Source\C</span><br><span class="line"></span><br><span class="line">python:</span><br><span class="line">  @$(BASE_TOOLS_PATH)\Source\C\Makefiles\NmakeSubdirs.bat all $(BASE_TOOLS_PATH)\Source\Python</span><br><span class="line"></span><br><span class="line">subdirs: $(SUBDIRS)</span><br><span class="line">  @$(BASE_TOOLS_PATH)\Source\C\Makefiles\NmakeSubdirs.bat all $**</span><br><span class="line"></span><br><span class="line">.PHONY: clean</span><br><span class="line">clean:</span><br><span class="line">  @$(BASE_TOOLS_PATH)\Source\C\Makefiles\NmakeSubdirs.bat clean $(SUBDIRS)</span><br><span class="line"></span><br><span class="line">.PHONY: cleanall</span><br><span class="line">cleanall:</span><br><span class="line">  @$(BASE_TOOLS_PATH)\Source\C\Makefiles\NmakeSubdirs.bat cleanall $(SUBDIRS)</span><br></pre></td></tr></table></figure><p><strong>需要编译相应的C和Python库,但是使用的是bat脚本,真正make输出的log确是正常的shell输出,这点还不知道怎么处理的,先分析到这,之后继续吧TODO</strong></p><h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>build才是真正编译的开始!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build -a ARM64 -p /home/mxdon/clone/UEFI/uefi-arm/ArmCodePkg/SampleCode/Desktop/Script/Arm.dsc -t GCC83 -b DEBUG -j log.txt</span><br></pre></td></tr></table></figure><p>显然,执行者是build,所以看看build的实质</p><p>先找到build在哪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[mxdon@5 uefi-arm]$ cat `which build`</span><br><span class="line">#!/usr/bin/env bash</span><br><span class="line">#python `dirname $0`/RunToolFromSource.py `basename $0` $*</span><br><span class="line"></span><br><span class="line"># If a python2 command is available, use it in preference to python</span><br><span class="line">if command -v python2 &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">    python_exe=python2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">full_cmd=$&#123;BASH_SOURCE:-$0&#125; # see http://mywiki.wooledge.org/BashFAQ/028 for a discussion of why $0 is not a good choice here</span><br><span class="line">dir=$(dirname &quot;$full_cmd&quot;)</span><br><span class="line">cmd=$&#123;full_cmd##*/&#125;</span><br><span class="line"></span><br><span class="line">export PYTHONPATH=&quot;$dir/../../Source/Python&quot;</span><br><span class="line">exec &quot;$&#123;python_exe:-python&#125;&quot; &quot;$dir/../../Source/Python/$cmd/$cmd.py&quot; &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>可以看到，先是设置了环境，然后执行<code>$cmd.py $@</code>来执行build</p><p>所以再找到$cmd.py,同时可以发现，$cmd在Source/Python下面，所以执行什么命令，就是在运行该命令名称下的以该命令命名的py文件。</p><p>所以执行build的时候是执行的build.py，AutoGen执行AutoGen.py以此类推，由于python文件较长，此后选择性展开。</p><p>如果查看打印log的话，也可以发现入口是build.py</p><p>ok,继续看，在编译的log中,首先打印的是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Build environment: Linux-4.18.0-305.10.2.el8_4.x86_64-x86_64-with-centos-8.4.2105</span><br><span class="line">Build start time: 15:00:53, Jan.04 2022</span><br></pre></td></tr></table></figure><p>对应于build.py中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EdkLogger.quiet(&quot;Build environment: %s&quot; % platform.platform())</span><br><span class="line">EdkLogger.quiet(time.strftime(&quot;Build start time: %H:%M:%S, %b.%d %Y\n&quot;, time.localtime()));</span><br></pre></td></tr></table></figure><p>相关变量在之前获取.</p><p>类似的分析,log中设定环境变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WORKSPACE        = /home/mxdon/clone/UEFI/uefi-arm</span><br><span class="line">ECP_SOURCE       = /home/mxdon/clone/UEFI/uefi-arm/EdkCompatibilityPkg</span><br><span class="line">EDK_SOURCE       = /home/mxdon/clone/UEFI/uefi-arm/EdkCompatibilityPkg</span><br><span class="line">EFI_SOURCE       = /home/mxdon/clone/UEFI/uefi-arm/EdkCompatibilityPkg</span><br><span class="line">EDK_TOOLS_PATH   = /home/mxdon/clone/UEFI/uefi-arm/BaseTools/</span><br><span class="line">CONF_PATH        = /home/mxdon/clone/UEFI/uefi-arm/Conf</span><br><span class="line">Architecture(s)  = ARM64</span><br><span class="line">Build target     = DEBUG</span><br><span class="line">Toolchain        = GCC83</span><br><span class="line">Active Platform          = /home/mxdon/clone/UEFI/uefi-arm/ArmCodePkg/SampleCode/Desktop/Script/Arm.dsc</span><br><span class="line">Flash Image Definition   = /home/mxdon/clone/UEFI/uefi-arm/ArmCodePkg/SampleCode/Desktop/Script/Arm.fdf</span><br></pre></td></tr></table></figure><p>对应build.py中的则是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CheckEnvVariable()  -&gt;</span><br><span class="line">    MyBuild = Build(Target, Workspace, Option)  -&gt;</span><br><span class="line">            __init__()  -&gt;</span><br><span class="line">                EdkLogger.quiet(...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类似的分析不再赘述,简要说明如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main-&gt;MyBuild-&gt;Build-&gt;__init__-&gt;...                                        #设定及检验用于build的环境,包括加载target.txt中的编译器,dsc文件中的描述等,用于生成最终的编译规则.</span><br><span class="line">                    -&gt;_BuildPlatform-&gt;WorkspaceAutoGen-&gt;PlatformAutoGen #通过解析FDF文件和INF文件,生成相应的C代码(宏变量)和Makefile(编译规则)</span><br><span class="line">                                    -&gt;_BuildPa-&gt;_GenFfsCmd                #编译模块</span><br><span class="line">                                    -&gt;_CollectModuleMapBuffer            #根据PCD修改EFI的内存分布,并获取modules的内存分布,用于重定位modules,链接生成最终的FD文件</span><br><span class="line">                                    -&gt;_Build                            #编译模块</span><br><span class="line">                                    -&gt;_CollectFvMapBuffer                #获取重定位FV的信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概流程如上,其中重定位相关的内容调用_RebaseModule-&gt;LaunchCommand[GenFw…],其中LaunchCommand也是在Build中执行make的途径.</p><p>从前面知道,执行的命令与其文件名相同,GenFw所用到的文件不是Python,而是C/GenFw/GenFw.c,其中具体细节暂不展开.</p><h2 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h2><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>UEFI是像一个魔改的Kernel,图形化,文字功能,网络功能都具备,在一定条件下可以变成内核,具有学习的价值和意义.</p><p>尤其,UEFI比内核简单许多,作为一个嵌入式C的大型项目来说是非常不错的,基于此,再看上述分析过程,整个UEFI的核心也无非就是C,Python,Shell(Makefile)这三种语言.也竟然有这三种语言.</p><p>我的意思是,项目开发中,只会一种语言可能越来越不够了,技多不压身,多学吧~</p><h2 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h2><blockquote><p>公众号：<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a089ae12bfb4ca9a9e5d9ac82f58d43~tplv-k3u1fbpfcp-zoom-1.image">孟游先生的旅游笔记</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> UEFI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEFI </tag>
            
            <tag> BIOS </tag>
            
            <tag> BootLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门的新方式</title>
      <link href="/2022/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="这里有一个和Windows一样好用的Linux！"><a href="#这里有一个和Windows一样好用的Linux！" class="headerlink" title="这里有一个和Windows一样好用的Linux！"></a>这里有一个和Windows一样好用的Linux！</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>你会用Windows嘛？如果你会的话，给你足够的机器，能不能用Windows搭建一个内网环境的服务器集群？</p><p>你会用Linux嘛？如果你会的话，给你足够的机器，能不能用Linux搭建一个内网环境的服务器集群？</p><p>你是不是觉得自己windows也不算会用？Linux更是一窍不通？</p><p>如果是，那么本篇非常适合你。但请知悉，本篇并不涉及服务器集群的搭建教程哈哈哈哈~</p><p>如果你的需求是在电脑上做excel、编程等，那本文封装的Linux完全够用了。请往下继续看~</p><h2 id="最终效果！"><a href="#最终效果！" class="headerlink" title="最终效果！"></a>最终效果！</h2><h2 id="封装过程"><a href="#封装过程" class="headerlink" title="封装过程"></a>封装过程</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h3><p>Windows10下通过VirtualBox制作Ubuntu20.04的Live CD</p><h4 id="1-1-VirualBox进入Ubuntu原生Live-CD"><a href="#1-1-VirualBox进入Ubuntu原生Live-CD" class="headerlink" title="1.1 VirualBox进入Ubuntu原生Live CD"></a>1.1 VirualBox进入Ubuntu原生Live CD</h4><p><img src="/images/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/VirualBox%E6%96%B0%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="VirualBox新建虚拟机"></p><p><img src="/images/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE.png" alt="虚拟机内存大小设置"></p><p><img src="/images/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%98.png"></p><p><img src="/images/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%9802.png"></p><p><img src="/images/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%9803.png"></p><p><img src="/images/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%9804.png"></p><p><img src="/images/Linux%E5%85%A5%E9%97%A8%E7%9A%84%E6%96%B0%E6%96%B9%E5%BC%8F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%90%AF%E5%8A%A8%E9%95%9C%E5%83%8F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 教程 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub访问加速</title>
      <link href="/2021/github-speedup/"/>
      <url>/2021/github-speedup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于近些年<code>GitHub</code>分发网络被<code>dns</code>污染严重，导致国内用户访问速度巨慢，解决方法也有不少，详情参考“<strong>参考文献</strong>中的内容”</p></blockquote><h2 id="加速方法"><a href="#加速方法" class="headerlink" title="加速方法"></a>加速方法</h2><ol><li>使用镜像网站或代理网站</li><li><code>cdn</code>加速</li><li>转入<code>gitee</code>加速</li></ol><h2 id="使用镜像网站"><a href="#使用镜像网站" class="headerlink" title="使用镜像网站"></a>使用镜像网站</h2><p>镜像网站地址：</p><ol><li><a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org/ </a> (常用)</li><li><a href="https://hub.fastgit.org/">https://hub.fastgit.org/</a> (常用)</li><li><a href="https://gitclone.com/">https://gitclone.com/</a></li><li><a href="https://github-dotcom.gateway.web.tr/">https://github-dotcom.gateway.web.tr/</a></li><li><a href="https://hub.おうか.tw/?imyshare.com=friends">https://hub.xn–p8jhe.tw/?imyshare.com=friends</a></li><li><a href="https://hub.連接.台灣/?imyshare.com=friends">https://hub.xn–gzu630h.xn–kpry57d/?imyshare.com=friends</a></li><li><a href="https://gh.api.99988866.xyz/">https://gh.api.99988866.xyz/</a></li><li><a href="https://toolwa.com/github/">https://toolwa.com/github/</a></li><li><a href="https://ghproxy.com/">https://ghproxy.com/</a> (代理加速)</li><li><a href="https://www.7ed.net/gra/">https://www.7ed.net/gra/</a>  (raw加速)</li></ol><h2 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a><code>CDN</code>加速</h2><blockquote><p><strong>Hosts</strong>是一个没有扩展名的<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/7581367">系统文件</a>，可以用记事本等工具打开，其作用就是将一些常用的网址<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062">域名</a>与其对应的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从<a href="https://baike.baidu.com/item/Hosts%E6%96%87%E4%BB%B6">Hosts文件</a>中寻找对应的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80">IP地址</a>，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。</p><p>需要注意的是，Hosts文件配置的<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402620">映射</a>是静态的，如果网络上的计算机更改了请及时更新IP地址，否则将不能访问。</p></blockquote><p><code>CDN</code>加速便是通过修改<code>Hosts</code>文件，绕过国内的<code>dns</code>解析，直达<code>github</code>的<code>ip</code>地址，从而加速访问。</p><p>以下三个网站是常用的访问链接：</p><ol><li><code>github.com</code></li><li><code>assets-cdn.github.com</code></li><li><code>github.global.ssl.fastly.net</code></li></ol><p>首先在网址：<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a>中查询上述域名的<code>ip</code>地址，然后对应添加至Hosts中即可，如下图：</p><p><img src="https://gitee.com/mxdon/imgmdnice/raw/master/image-20211219235834074.png" alt="image-20211219235834074"></p><p><img src="https://gitee.com/mxdon/imgmdnice/raw/master/image-20211220000000715.png" alt="image-20211220000000715"></p><p><img src="https://gitee.com/mxdon/imgmdnice/raw/master/image-20211220000031755.png" alt="image-20211220000031755"></p><p><strong>由于直接添加会有权限问题，所以先把<code>Hosts</code>文件复制到桌面上，然后把复制的文件修改以后，再替换回去即可。</strong></p><h3 id="一个简单的爬虫脚本"><a href="#一个简单的爬虫脚本" class="headerlink" title="一个简单的爬虫脚本"></a>一个简单的爬虫脚本</h3><p>由于每个人的位置不一样，所查询到的<code>ip</code>可能也不一样，而且<code>github</code>的主机自身可能也会变动<code>ip</code>，所以写了个简单的爬虫脚本处理了一下，运行以后复制进去就行，<code>Linux</code>用户直接用即可！(<code>full_domain</code>列表中是<code>github</code>中几乎全部会用到的域名，强迫症患者可以对应打开修改)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">heads = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># All the options</span></span><br><span class="line"><span class="comment"># full_domain = [github.githubassets.com, central.github.com, desktop.githubusercontent.com, camo.githubusercontent.com, github.map.fastly.net, github.global.ssl.fastly.net, gist.github.com, github.io, github.com, assets-cdn.github.com, api.github.com, raw.githubusercontent.com, user-images.githubusercontent.com, favicons.githubusercontent.com, avatars5.githubusercontent.com, avatars4.githubusercontent.com, avatars3.githubusercontent.com, avatars2.githubusercontent.com, avatars1.githubusercontent.com, avatars0.githubusercontent.com, avatars.githubusercontent.com, codeload.github.com, github-cloud.s3.amazonaws.com, github-com.s3.amazonaws.com, github-production-release-asset-2e65be.s3.amazonaws.com, github-production-user-asset-6210df.s3.amazonaws.com, github-production-repository-file-5c1aeb.s3.amazonaws.com, githubstatus.com, github.community, media.githubusercontent.com]</span></span><br><span class="line"></span><br><span class="line">website = <span class="string">&quot;https://websites.ipaddress.com/&quot;</span></span><br><span class="line"><span class="comment"># Necessary options</span></span><br><span class="line">des_domain = [<span class="string">&quot;github.com&quot;</span>,<span class="string">&quot;assets-cdn.github.com&quot;</span>,<span class="string">&quot;github.global.ssl.fastly.net&quot;</span>]</span><br><span class="line">des_ip = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getip</span>(<span class="params">domain</span>):</span></span><br><span class="line">    url = website + domain</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url,timeout=<span class="number">30</span>,headers=heads,verify=<span class="literal">False</span>)</span><br><span class="line">        res.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">        content = res.text</span><br><span class="line">        <span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(content,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        iplist = soup.find(<span class="string">&#x27;ul&#x27;</span>,class_=<span class="string">&#x27;comma-separated&#x27;</span>)</span><br><span class="line">        iptmp = <span class="built_in">str</span>(iplist.find(<span class="string">&quot;li&quot;</span>).text) + <span class="string">&quot;    &quot;</span> + domain</span><br><span class="line">        <span class="built_in">print</span>(iptmp)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[\033[31m############   Something Error  #############\033[0m](\033[31m%s\033[0m)&quot;</span>% (url))</span><br><span class="line">        iptmp = <span class="string">&#x27;&#x27;</span> </span><br><span class="line"></span><br><span class="line">    des.write(iptmp + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Used in Windows</span></span><br><span class="line">        <span class="comment"># des = open(&quot;/mnt/c/Windows/System32/drivers/etc/hosts&quot;,&quot;a&quot;)</span></span><br><span class="line">        <span class="comment"># Used in Linux</span></span><br><span class="line">        des = <span class="built_in">open</span>(<span class="string">&quot;/etc/hosts&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;github&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(des.readlines()):</span><br><span class="line">            des.close()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;github dns configuration is already done!\n&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        des.close()</span><br><span class="line">        des = <span class="built_in">open</span>(<span class="string">&quot;/etc/hosts&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;# Add by mxdon, you can remove duplicate options manually\n&quot;</span>)</span><br><span class="line">        des.write(<span class="string">&quot;# Add by mxdon, you can remove duplicate options manually\n&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> idomain <span class="keyword">in</span> des_domain:</span><br><span class="line">            getip(idomain)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        des.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="转入Gitee加速"><a href="#转入Gitee加速" class="headerlink" title="转入Gitee加速"></a>转入<code>Gitee</code>加速</h2><p><code>gitee</code>可以直接将<code>github</code>或<code>gitlab</code>的仓库转入，所以只要知道想要访问的<code>github</code>地址，直接导入<code>gitee</code>即可：完成后访问速度超级快！！（已经操作过数十个项目啦~）</p><p><img src="https://gitee.com/mxdon/imgmdnice/raw/master/image-20211220001157876.png" alt="image-20211220001157876"></p><p>如上图，一般比较有名的项目在<code>gitee</code>上已经被同步了，也可以直接用，但有时候不是最新的，有洁癖的朋友自行选择噢</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/75994966">github访问加速 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/314071453">提高国内访问 github 速度的 9 种方法！ - 知乎</a><br><a href="https://www.7ed.net/gra/">Github RAW 加速服务 - 7ED Service</a><br><a href="https://blog.csdn.net/CHAOS_ORDER/article/details/110811952">github 镜像站_CHAOS_ORDER的博客-CSDN博客_github镜像站</a><br><a href="https://segmentfault.com/a/1190000023396995">那些你用得上的镜像网站 - SegmentFault 思否</a><br><a href="https://baike.baidu.com/item/hosts/10474546">hosts_百度百科</a></p><h2 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h2><p><img src="https://gitee.com/mxdon/imgmdnice/raw/master/640"></p>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复制链接，将正文的html转markdown</title>
      <link href="/2021/html%E8%BD%ACmarkdown/"/>
      <url>/2021/html%E8%BD%ACmarkdown/</url>
      
        <content type="html"><![CDATA[<h1 id="复制链接，将正文的html转markdown"><a href="#复制链接，将正文的html转markdown" class="headerlink" title="复制链接，将正文的html转markdown"></a>复制链接，将正文的html转markdown</h1><blockquote><p> 摊牌了，我抄袭的</p></blockquote><blockquote><p><del>由于本人十分的效率低下</del>，有时候免不了有人催更哈</p></blockquote><p>众所周知，懒是人们创新的动力</p><p>所以我就写了个<del>抄袭</del>爬虫脚本，把我看的觉得不错的文章，就直接爬过来，然后用微信公众号的格式给大家分享一下~</p><p>（主要是有些文章虽然含金量高，但是长得丑啊，就跟<del>你</del>我一样）</p><p>当然，分享的内容我不会标注原创，就当是我个人的收藏夹了，也会注明转载链接的</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>将常规的博客，通过爬虫和字符处理，转换成<code>markdown</code>格式的文本</strong></p><blockquote><p>网上其实有类似工具，包括较为有名的<code>python</code>的第三方库<code>html2text</code>,也或多或少都有些问题，试用了一下，<code>http://www.atoolbox.net/Tool.php?Id=715</code>最准确吧</p></blockquote><p>所以自己写了一个</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 blog2md.py</span><br></pre></td></tr></table></figure><p>输入想要<del>抄袭</del><strong>收藏</strong>的链接以后</p><p>然后在终端会输出转换成<code>md</code>格式的结果，同时在相同目录下，会生成<code>blog.md</code></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ol><li><p>爬取内容是我上一篇原创文章的内容：<a href="https://blog.csdn.net/Mxdon_on/article/details/113154422"><br>Python爬虫–自动获取参考链接的标题–转为markdown格式</a></p></li><li><p>控制台输出</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cef0310d1d4f423997331eb660a9d9b0~tplv-k3u1fbpfcp-zoom-1.image" alt="控制台输出"></p><p>可以看到，该有的格式基本都完成了</p><ol start="3"><li>文件预览<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[@path/to/blog2md.py] $ ls</span><br><span class="line">blog2md.py  blog.md</span><br></pre></td></tr></table></figure>此时在相同目录下已经生成了<code>blog.md</code>文件，我们打开一下预览看看效果</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f21f1c7348e4977bc4a6707c43fae31~tplv-k3u1fbpfcp-zoom-1.image"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82f4223e924841609415728de84650ad~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong>和我自己写的原版一毛一样</strong></p><h2 id="已完成功能"><a href="#已完成功能" class="headerlink" title="已完成功能"></a>已完成功能</h2><ol><li>解决粗体、删除线、斜体等文字<code>markdown</code>样式</li><li>解决图片和链接的<code>markdown</code>显示</li><li>解决多级标题与网页标题的取舍，以及目录的<code>toc</code>加入</li><li>解决行内代码和嵌入在文章的块代码显示的冲突，支持不同语言的块内代码</li><li>支持知乎文章、<code>csdn</code>文章、简书和博客园文章，其他的尚未测试</li><li>支持命令行交互模式</li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li>多级引用尚未测试，由不同的<code>markdown</code>渲染工具决定，会有问题</li><li>块内代码在一些离谱的格式下会有一点问题，不过暂时不影响使用</li><li>不支持公式</li><li>没有封装成图形化</li><li>多级列表也有一点问题</li><li>一些网站的图片不支持引用，如CSDN的部分图片，可能需要先解码才可以</li><li>应该把最终生成的文档，按照标题的名字来重新生成文件，啊就一行代码的事，不想搞了，够我自己用了</li><li>有些神奇的<code>空div</code>标签就离谱，一个标签就近百行，然后处理起来也会有点问题，好在情况不多，直接删吧先</li><li>不支持表格</li><li>开头会有一些空格，还没整</li></ol><blockquote><p>不过不支持的项，直接用<code>html</code>标签就可以啦~反正<code>markdown</code>也还是渲染成<code>html</code></p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>感觉这玩意可能有点用，所以扔在<code>gitee</code>了，有需要的可以改改，然后一起用呀</p><p><strong>链接</strong>：<code>https://gitee.com/mxdon/funny_repo/tree/master/Convert_html_2_markdown</code></p><p>不过还是放一下源码，不要嫌篇幅长哈(看不全可以左右滑动)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get title from title</span></span><br><span class="line"><span class="comment"># get content from article</span></span><br><span class="line"><span class="comment"># finish requests while article</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># difficult @ filter out the correct content from so many &lt;p&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="comment"># and format different content.</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment">#def getimg(link):</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">filename,textString</span>):</span></span><br><span class="line">    src = <span class="built_in">open</span>(filename,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment"># Solved</span></span><br><span class="line">    <span class="comment"># 1. bold</span></span><br><span class="line">    <span class="comment"># 2. img and figcaption</span></span><br><span class="line">    <span class="comment"># 3. title and contents</span></span><br><span class="line">    <span class="comment"># 4. italics</span></span><br><span class="line">    <span class="comment"># 5. code</span></span><br><span class="line">    <span class="comment"># 6. nonsense tags</span></span><br><span class="line">    <span class="comment"># 7. quote ### multi_quote TODO</span></span><br><span class="line">    <span class="comment"># 8. delete</span></span><br><span class="line">    <span class="comment"># 9. toc</span></span><br><span class="line">    <span class="comment"># 10.link</span></span><br><span class="line">    <span class="comment"># 11.p</span></span><br><span class="line">    <span class="comment"># 12.add toc</span></span><br><span class="line">    <span class="comment"># 13.formula ### TODO</span></span><br><span class="line"></span><br><span class="line">    toc_flag = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    l = <span class="string">&#x27;- &#x27;</span></span><br><span class="line">    quote_flag = <span class="number">0</span></span><br><span class="line">    code_flag = <span class="number">0</span></span><br><span class="line">    title_flag = <span class="number">0</span></span><br><span class="line">    <span class="comment">#for line in src.readlines():</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> textString.split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(line) ==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        templine = line</span><br><span class="line">        <span class="comment">#### replace figcaption</span></span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">&#x27;&lt;/?(?&lt;=figcaption)[^&lt;]*&gt;&#x27;</span>,templine):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace [toc]</span></span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">&#x27;(?&lt;=&lt;div)[^&lt;]+?(?=toc)[^&lt;]+?&gt;&#x27;</span>,templine):</span><br><span class="line">            toc_flag = toc_flag + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> re.search(<span class="string">&#x27;&lt;/div&gt;&#x27;</span>,line):</span><br><span class="line">            toc_flag = toc_flag - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> toc_flag:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;code\s[^&lt;]*inline[^&lt;]*&gt;&#x27;</span>, <span class="string">&#x27;&lt;code&gt;&#x27;</span>, templine)</span><br><span class="line"></span><br><span class="line">        code_inline = re.search(<span class="string">&#x27;(?&lt;=&lt;code&gt;).*(?=&lt;/code&gt;)&#x27;</span>,templine)</span><br><span class="line">        <span class="keyword">if</span> code_inline:</span><br><span class="line">            <span class="comment">#print(&#x27;===========&#x27; + str(code_inline.group()))</span></span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;/?code&gt;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, templine)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">&#x27;&lt;code\s[^&lt;]+?&gt;&#x27;</span>,templine):</span><br><span class="line">            code_flag = <span class="number">1</span></span><br><span class="line">            codetype = re.search(<span class="string">&#x27;(?&lt;=language-)([^\&quot;]+?)(?=\&quot;)&#x27;</span>,templine)</span><br><span class="line">            <span class="keyword">if</span> codetype:</span><br><span class="line">                <span class="comment">#titlelevel = re.search(&#x27;(?&lt;=&lt;h)([0-9])(?=[^&lt;]+?&gt;$)&#x27;,templine)</span></span><br><span class="line">                <span class="comment">#print(titlelevel.group())</span></span><br><span class="line">                <span class="comment">#print(codetype.group())</span></span><br><span class="line">                templine = re.sub(<span class="string">&#x27;&lt;code\s[^&lt;]+?&gt;&#x27;</span>,<span class="string">&#x27;```&#x27;</span>+<span class="built_in">str</span>(codetype.group())+<span class="string">&quot;\n&quot;</span>,templine).strip()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                templine = re.sub(<span class="string">&#x27;&lt;code\s[^&lt;]+?&gt;&#x27;</span>,<span class="string">&#x27;```\n&#x27;</span>,templine).strip()</span><br><span class="line"></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?code&gt;&#x27;</span>,<span class="string">&#x27;\n```&#x27;</span>,templine).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace image</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            full_img = re.search(<span class="string">&#x27;(?&lt;=&lt;img).*(?=/&gt;)&#x27;</span>,templine)</span><br><span class="line">            <span class="comment">#print(full_img.group())</span></span><br><span class="line">            img_name_group = re.search(<span class="string">&#x27;(?&lt;=alt=\&quot;)[^\&quot;]+?(?=\&quot;)&#x27;</span>,<span class="built_in">str</span>(full_img.group()))</span><br><span class="line">            img_group = re.search(<span class="string">&#x27;(?&lt;=src=\&quot;)([^\&quot;]+?)(?=\&quot;)&#x27;</span>,<span class="built_in">str</span>(full_img.group()))</span><br><span class="line">            <span class="comment">#print(img.group())</span></span><br><span class="line">            <span class="comment">#print(img_name.group())</span></span><br><span class="line">            img_name = <span class="built_in">str</span>(img_name_group.group())</span><br><span class="line">            img = <span class="built_in">str</span>(img_group.group())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(img_name) &lt;= <span class="number">1</span> <span class="keyword">or</span> img_name.startswith(<span class="string">&#x27;im&#x27;</span>):</span><br><span class="line">                img_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                img_name = <span class="built_in">str</span>(img_name_group.group())</span><br><span class="line"></span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;img[^&lt;]+?/&gt;&#x27;</span>,<span class="string">&#x27;\n![&#x27;</span>+<span class="built_in">str</span>(img_name)+<span class="string">&#x27;](&#x27;</span>+<span class="built_in">str</span>(img)+<span class="string">&#x27;)\n&#x27;</span>,templine).strip()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;img[^&lt;]+?/&gt;&#x27;</span>,<span class="string">&#x27;![load img faild]()&#x27;</span>,templine).strip()</span><br><span class="line"></span><br><span class="line">            <span class="comment">#templine = re.sub(&#x27;&lt;img[^&lt;]+?/&gt;&#x27;,&#x27;![&#x27;+str(img_name)+&#x27;](&#x27;+str(img)+&#x27;)&#x27;,templine).strip()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace bold</span></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?strong[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;**&#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?(b&gt;|b\s[^&lt;]*&gt;)&#x27;</span>,<span class="string">&#x27;**&#x27;</span>,templine).strip() <span class="comment"># conflict with blockquote</span></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?em[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;**&#x27;</span>,templine).strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace italics</span></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?i[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,templine).strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace delete</span></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?del[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;~~&#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?s&gt;&#x27;</span>,<span class="string">&#x27;~~&#x27;</span>,templine).strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace list</span></span><br><span class="line">        <span class="comment">#if re.search(&#x27;&lt;ol[^&lt;]*&gt;&#x27;,templine):</span></span><br><span class="line">        <span class="comment">#i = 1</span></span><br><span class="line">        <span class="comment">#elif re.search(&#x27;&lt;/ol[^&lt;]*&gt;&#x27;,templine):</span></span><br><span class="line">        <span class="comment">#i = 0</span></span><br><span class="line">        <span class="comment">#l = &#x27;- &#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">&#x27;&lt;li&gt;&#x27;</span>,templine):</span><br><span class="line">                l = <span class="built_in">str</span>(i) + <span class="string">&#x27;. &#x27;</span></span><br><span class="line">                templine = re.sub(<span class="string">&#x27;&lt;li&gt;&#x27;</span>,<span class="built_in">str</span>(i) + <span class="string">&#x27;. &#x27;</span>,templine).strip()</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;li&gt;&#x27;</span>,l,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/li&gt;&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,templine).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace link</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            full_link_group = re.search(<span class="string">&#x27;(?&lt;=&lt;a)[^&lt;]+?(?=href)[^&lt;]+?(?=&lt;/a&gt;)&#x27;</span>,templine)</span><br><span class="line">            full_link = <span class="built_in">str</span>(full_link_group.group())</span><br><span class="line">            link_href_group = re.search(<span class="string">&#x27;(?&lt;=href=\&quot;).*(?=\&quot;)&#x27;</span>,full_link)</span><br><span class="line">            link_href = <span class="built_in">str</span>(link_href_group.group())</span><br><span class="line">            <span class="comment">#print(link_href)</span></span><br><span class="line">            link_text_group = re.search(<span class="string">&#x27;(?&lt;=&gt;).*&#x27;</span>,full_link)</span><br><span class="line">            link_text = <span class="built_in">str</span>(link_text_group.group())</span><br><span class="line">            <span class="comment">#print(link_text)</span></span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;a[^&gt;]+?&gt;.*&lt;/a&gt;&#x27;</span>,<span class="string">&#x27;[&#x27;</span>+link_text+<span class="string">&#x27;](&#x27;</span>+link_href+<span class="string">&#x27;)&#x27;</span>,templine).strip()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            templine = templine</span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace p</span></span><br><span class="line">        <span class="comment">#lineval = re.sub(&#x27;&lt;p[^&lt;]*&gt;&#x27;,&#x27;&#x27;,templine).strip()</span></span><br><span class="line">        <span class="comment">#if re.search(&#x27;&lt;/p[^&lt;]*&gt;&#x27;,templine):</span></span><br><span class="line">                        <span class="comment">#print(&quot;&quot;)</span></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;p[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/p[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,templine).strip()+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#### 1. replace quote</span></span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">&#x27;&lt;blockquote[^&lt;]*&gt;&#x27;</span>,templine):</span><br><span class="line">            quote_flag = quote_flag + <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&gt; &quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="comment">#templine = re.sub(&#x27;&lt;blockquote[^&lt;]*&gt;&#x27;, &#x27;&gt;  &#x27;, templine).strip()</span></span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;blockquote[^&lt;]*&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, templine).strip()</span><br><span class="line">            src.write(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> re.search(<span class="string">&#x27;&lt;/blockquote[^&lt;]*&gt;&#x27;</span>,templine):</span><br><span class="line">            quote_flag = quote_flag - <span class="number">1</span></span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;/blockquote[^&lt;]*&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, templine).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> quote_flag:</span><br><span class="line">            <span class="built_in">print</span>(templine,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            src.write(templine)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace different level title</span></span><br><span class="line">        <span class="comment">#templine = re.sub(&#x27;&lt;h1[^&lt;]*&gt;&#x27;,&#x27;# &#x27;,templine).strip()</span></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;h1[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;## &#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;h2[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;## &#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;h3[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;### &#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;h4[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;#### &#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;h5[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;##### &#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;h6[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;###### &#x27;</span>,templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/h[0-9].*&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,templine).strip()</span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">&#x27;&lt;/?title[^&lt;]*&gt;&#x27;</span>,templine):</span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;/?title[^&lt;]*&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,templine).strip()</span><br><span class="line">            <span class="comment">#### replace all tags</span></span><br><span class="line">            templine = re.sub(<span class="string">&#x27;&lt;[^&lt;]+?&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, templine).strip()</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;# &#x27;</span>+templine+<span class="string">&#x27;\n[toc]\n&#x27;</span>)</span><br><span class="line">            src.write(<span class="string">&#x27;# &#x27;</span>+templine+<span class="string">&#x27;\n[toc]\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#### replace all tags</span></span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;/?code&gt;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, templine).strip()</span><br><span class="line">        templine = re.sub(<span class="string">&#x27;&lt;[^&lt;]+?&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, templine).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lineval = templine + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(lineval)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lineval) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            src.write(lineval+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    src.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">    heads = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">    des = <span class="built_in">open</span>(<span class="string">&quot;blog.md&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">    des.write(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    des.close()</span><br><span class="line">    <span class="comment">#des = open(&#x27;blog.md&#x27;,&#x27;a&#x27;)</span></span><br><span class="line"></span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;Please input a legal URL: &quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> url.startswith(<span class="string">&#x27;http&#x27;</span>):</span><br><span class="line">        url = <span class="built_in">input</span>(<span class="string">&quot;Please input a legal URL again : \n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url,timeout=<span class="number">30</span>,headers=heads,verify=<span class="literal">False</span>)</span><br><span class="line">        res.encoding = <span class="string">&#x27;UTF-8&#x27;</span></span><br><span class="line">        content = res.text</span><br><span class="line">        <span class="comment">#print(content)</span></span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(content,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;zhihu.com&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">            temp_article = soup.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;Post-RichTextContainer&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;csdn.net&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">            temp_article = soup.article</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;cnblogs.com&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">            temp_article = soup.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;markdown-here-wrapper&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        article = <span class="built_in">str</span>(temp_article)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;request error&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        title = soup.find(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        target_head = <span class="built_in">str</span>(soup.title)</span><br><span class="line">        <span class="comment">#print(&quot;%s\n&quot; % (&quot;# &quot;+title.text+&quot;\n&quot;+&quot;[toc]&quot;))</span></span><br><span class="line">        <span class="comment">#title_text = &#x27;# &#x27;+title.text+&#x27;\n[toc]\n&#x27;</span></span><br><span class="line">        <span class="comment">#des.write(&quot;# &quot;+title.text+&quot;\n&quot;+&quot;[toc]\n&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;===== title not found =====&quot;</span>)</span><br><span class="line">        h1 = soup.find(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">        target_head = <span class="built_in">str</span>(soup.h1)</span><br><span class="line">        <span class="comment">#print(&quot;%s\n&quot; % (&quot;#&quot;+h1.text+&quot;\n&quot;+&quot;[toc]&quot;))</span></span><br><span class="line">        <span class="comment">#des.write(&quot;# &quot;+h1.text+&quot;\n&quot;+&quot;[toc]\n&quot;)</span></span><br><span class="line">    <span class="comment">#run(article)</span></span><br><span class="line">    target_text = target_head + article</span><br><span class="line">    <span class="comment">#print(target_text)</span></span><br><span class="line">    <span class="comment">#des.write(article)</span></span><br><span class="line">    <span class="comment">#des.close()</span></span><br><span class="line">    run(<span class="string">&#x27;blog.md&#x27;</span>,target_text)</span><br><span class="line">    <span class="comment">#run(&#x27;blog.md&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h2><blockquote><p>公众号：<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a089ae12bfb4ca9a9e5d9ac82f58d43~tplv-k3u1fbpfcp-zoom-1.image">孟游先生的旅游笔记</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aboutme</title>
      <link href="/2021/aboutme/"/>
      <url>/2021/aboutme/</url>
      
        <content type="html"><![CDATA[<div style="float:right;margin-left:0%;"><img src="头像地址" alt="image-20201209230345560" class="medium-zoom-image" width="200" hight="200"></div><h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>网名：Mxdon<br>性别：男<br>学历：本科<br>专业：电子信息工程<br>学校：<a href="https://gaokao.chsi.com.cn/sch/schoolInfo--schId-6186979,categoryId-6186990,mindex-1.dhtml">东北大学秦皇岛分校</a><br>邮箱：<a href="mailto:&#109;&#x78;&#x64;&#111;&#110;&#x67;&#105;&#x74;&#64;&#49;&#50;&#x36;&#x2e;&#99;&#x6f;&#109;">&#109;&#x78;&#x64;&#111;&#110;&#x67;&#105;&#x74;&#64;&#49;&#50;&#x36;&#x2e;&#99;&#x6f;&#109;</a></p><!--<div style="height:auto,width:100%"><div style="float:left;margin-left:0%;">    <b>网名：</b>Mxdon</div><div style="float:left;margin-left:8%;">    <b>性别：</b>男</div></div><br><div style="height:auto,width:100%"><div style="float:left;margin-left:0%;">    <b>学历：</b>本科&nbsp&nbsp&nbsp&nbsp</div><div style="float:left;margin-left:8%;">    <b>专业：</b>电子信息工程</div></div><br><div style="height:auto,width:100%"><div style="float:left;margin-left:0%;">    <b>毕业院校：</b>        <a target="_blank" rel="noopener" href="https://gaokao.chsi.com.cn/sch/schoolInfo--schId-6186979,categoryId-6186990,mindex-1.dhtml">东北大学秦皇岛分校</a></div> </div> <br><div style="height:auto,width:100%"><div style="float:left;margin-left:0%;">    <b>邮箱：</b>    <a href="mailto:mxdongit@126.com" data-pjax-state="">mxdongit@126.com</a></div></div>--><h2 id="校园经历"><a href="#校园经历" class="headerlink" title="校园经历"></a>校园经历</h2><h4 id="获奖经历"><a href="#获奖经历" class="headerlink" title="获奖经历"></a>获奖经历</h4><ul><li>三次创新创业奖学金</li><li>一次校三等奖学金</li><li>第四届“龙芯杯”系统能力培养大赛全国三等奖；</li><li><code>2018</code>年“创青春”河北省大学生创业大赛一等奖；</li><li>第三届河北省创新创业年会项目展示类一等奖；</li><li>全国大学生数学建模竞赛河北二等奖；</li><li><code>2018</code>年东北大学秦皇岛分校暑期文化科技卫生“三下乡”社会实践先进小分队；</li></ul><h4 id="社团经历"><a href="#社团经历" class="headerlink" title="社团经历"></a>社团经历</h4><ul><li><p><code>2020</code>年任院“东秦-龙芯联合实验室”助教；</p></li><li><p><code>2019</code>年任计算机中心实验室负责人。</p></li><li><p><code>2018</code>年任院团委学生会干部；</p></li><li><p><code>2017</code>年任校党委宣传部干事；</p></li></ul><h4 id="社会经历"><a href="#社会经历" class="headerlink" title="社会经历"></a>社会经历</h4><ul><li><p>“e管家”维修电脑志愿服务活动；</p></li><li><p><code>2019</code>秦皇岛国际马拉松暨全国马拉松锦标赛志愿者；</p></li><li><p>冬奥倒计时1000天志愿活动。</p></li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><p style="text-align:left;">    <strong>1. 基于龙芯ls232的SOC级Linux内核设计（毕业设计）</strong>    <span style="float:right;">2020.11-2021.05</span>    <br>    <span style="float:left;">独自完成</span><br></p><ul><li><p><strong>项目介绍：</strong>以<code>Linux-0.11</code>在<code>MIPS 4Kc</code>架构下的移植版为例，再次经过<code>SOC</code>级内核移植，移植到基于龙芯<code>LS232</code>处理器核的<code>SOC</code>上。</p></li><li><p><strong>负责内容：</strong> 精确内核的加载地址，实现操作系统的异常处理，并借助<code>Qemu</code>实现软件仿真及验证，最终运行操作系统。</p></li><li><p><strong>项目成果：</strong>通过汇编级的代码修改，以及对<code>ELF</code>文件格式的不断验证，在<code>Qemu</code>仿真程序中成功运行移植后的<code>Linux</code>内核，完成对<code>SOC</code>级内核移植的关键技术研究，毕业设计取得优秀。</p></li></ul><p style="text-align:left;">    <strong>2. 五级流水结构Soc设计（“龙芯杯”第四届全国大学生计算机系统能力培养大赛）</strong>    <span style="float:right;">2020.06-2020.08</span>    <br>    <span style="float:left;">队员</span><br></p><ul><li><p><strong>项目介绍：</strong>实现了一个五级流水线、兼容<code>MIPS</code>指令集、精确异常处理并且支持<code>AXI</code>总线协议的<code>CPU</code>系统。</p></li><li><p><strong>负责内容：</strong>利用<code>Verilog</code>设计完成五级流水结构，完成异常处理及<code>CP0</code>协处理器指令设计，负责操作系统开发及系统移植。</p></li><li><p><strong>项目成果：</strong>经过两个月的共同努力，最终成功实现支持大赛要求的<code>57</code>条<code>MIPS</code>指令及自实现指令若干的Soc系统，测试性能 在<code>74MHz</code>下是龙芯开源<code>gs132</code>的<code>37.3</code>倍；完成北航教学的小操作系统，并自实现<code>date</code>、<code>exit</code>等命令。</p></li></ul><p style="text-align:left;">    <strong>3. Python实现最小生成树--Prim算法和Kruskal算法（数据结构课程设计）</strong>    <span style="float:right;">2020.05-2020.06</span>    <br>    <span style="float:left;">组长</span><br></p><ul><li><p><strong>项目介绍：</strong>按照自定义数据输入，实现信息广播问题的最优解法，利用<code>Networkx</code>模块绘制出相应的有权图。</p></li><li><p><strong>负责内容：</strong>使用<code>Python</code>自实现<code>Prim</code>算法和<code>Kruskal</code>算法，自定义更简单的数据输入，实现与用户的交互，撰 写操作文档。</p></li><li><p><strong>项目成果：</strong>成功自实现<code>Prim</code>算法和<code>Kruskal</code>算法，利用文件的读取简化了数据的输入，交互时提供了修改等 功能，及提示错误操作信息，完成图结构可视化功能，课程设计取得优秀。</p></li></ul><p style="text-align:left;">    <strong>4. 八人竞赛抢答器（单片机开发课程设计）</strong>    <span style="float:right;">2019.12-2020.01</span>    <br>    <span style="float:left;">组长</span><br></p><ul><li><p><strong>项目介绍：</strong>设计一个八人竞赛抢答器，实现8名选手的定时抢答功能，主持人控制系统清除及抢答控制的功能。</p></li><li><p><strong>负责内容：</strong>逻辑代码编写，<code>Proteus</code>仿真电路图设计，及调试和仿真。</p></li><li><p><strong>项目成果：</strong>完成抢答器要求功能，并通过算法实现使用错误的报错功能，课程设计取得优秀。</p></li></ul><p style="text-align:left;">    <strong>5. Java可视化闹钟（Java课程设计）</strong>    <span style="float:right;">2019.06-2020.06</span>    <br>    <span style="float:left;">组长</span><br></p><ul><li><p><strong>项目介绍：</strong>利用<code>awt</code>和<code>swing</code>相关知识完成指针的实时显示。</p></li><li><p><strong>负责内容：</strong>结合多线程编程，完成闹钟响铃.</p></li><li><p><strong>项目成果：</strong>利用文件流等知识，完成具有增、删、改功能并不会丢失闹钟的<code>Java</code>可视化闹钟。</p></li></ul><p><strong>其他课程设计</strong></p><ul><li>计算机网络安全课程设计，优秀</li><li>Web应用开发课程设计，优秀</li><li>生产实习实践，优秀</li></ul><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><p style="text-align:left;">    <strong>龙芯中科技术股份有限公司</strong>    <span style="float:right;">2020.11-至今</span>    <br>    <span style="float:left;">实习并转正</span><br></p><ul><li>机密，暂略</li></ul><!-- 暂略1. `ext4`：在`PMON`中对`ext2`文件系统增加`ext4`文件系统新特性的支持。2. `UEFI`：将`PMON`和`UEFI`的桥片代码分别实现为静态库文件和`PPI`接口。3. `PS/2`：对`LS2K500`板卡的`PS/2`接口调试并--><p style="text-align:left;">    <strong>软件管家</strong>    <span style="float:right;">2019.11-2019.12</span>    <br>    <span style="float:left;">兼职</span><br></p><ul><li>每天帮助近百会员解答电脑及软件使用相关问题，平台涉及<code>Windows</code>、<code>Linux</code>、<code>MacOS</code>，软件涉及图形软件、编程软件、基础软件等。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> about </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机备份到底备份什么</title>
      <link href="/2021/%E6%89%8B%E6%9C%BA%E5%A4%87%E4%BB%BD%E5%88%B0%E5%BA%95%E5%A4%87%E4%BB%BD%E4%BB%80%E4%B9%88/"/>
      <url>/2021/%E6%89%8B%E6%9C%BA%E5%A4%87%E4%BB%BD%E5%88%B0%E5%BA%95%E5%A4%87%E4%BB%BD%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="手机备份到底备份什么"><a href="#手机备份到底备份什么" class="headerlink" title="手机备份到底备份什么"></a>手机备份到底备份什么</h1><blockquote><p>手机太卡了，换不起手机，所以就备份一下，刷一下</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>   <img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206161820003.png" alt="image-20210206161820003"></p><p>手机开始卡了，内存也严重不足了，当然我可以只备份，再挨个清理，但是哪有刷机来的轻巧，所以我选择刷机。</p><blockquote><p>搞不明白，以前4+64和现在8+128有什么区别……内存大了，软件也大了，这扩容的钱不白花了？</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>申请深度测试权限</p><p>OPPO没有深度测试权限是没办法刷的</p><p> <img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206162131950.png" alt="image-20210206162131950"></p></li><li><p>下载固件包，去官网下就行了</p></li></ol><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206162435140.png" alt="image-20210206162435140"></p><ol start="3"><li><p>备份</p><p>备份什么呢？手机的文件那么多，如何快速有效的备份呢？</p><p>作为本文的核心内容，单独开一章来讲</p></li></ol><h2 id="如何快速备份"><a href="#如何快速备份" class="headerlink" title="如何快速备份"></a>如何快速备份</h2><p>全备份？请出去，你豪爽的行事风格已经与我白嫖和抠门的文章风格不一致了，如果你有部分备份的想法，再往下看</p><ol><li><p>有针对性</p><p>首先备份的东西一定要有价值，以我的角度，就是<strong>软件</strong>、<strong>文件</strong>、<strong>图片</strong>、<strong>有用的聊天记录</strong></p></li><li><p>备份方式</p><p>软件可以直接发送给自己的QQ小号，文件也是一样</p><p>有用的聊天记录直接截屏，和图片一起打包备份，至于没用的图片，每次拍完照自己删啊同志们</p></li></ol><h3 id="开始备份"><a href="#开始备份" class="headerlink" title="开始备份"></a>开始备份</h3><h4 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h4><p>啊文件备份嘛，这个真没啥经验，因为我很少用手机存文件，大多数都是在电脑上，手机上即使存了，我也会很快删除，所以大家及时备份文件吧哈哈哈哈</p><h4 id="聊天记录备份"><a href="#聊天记录备份" class="headerlink" title="聊天记录备份"></a>聊天记录备份</h4><p>截图，转到下面图片备份(<strong>别忘了短信备份</strong>)</p><h4 id="图片备份"><a href="#图片备份" class="headerlink" title="图片备份"></a>图片备份</h4><p><code>5G</code>超能力可以在线备份，我的话会离线备份，打开<code>开发者选项</code>，打开<code>USB</code>调试，连接电脑，把文件提取到电脑上某位置，并打包成压缩包，我就不多演示啦</p><p>当你清理完垃圾图片以后应该就会有类似的干净文件夹，所以直接打包就好啦</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206190621107.png" alt="image-20210206190621107"></p><h4 id="软件备份"><a href="#软件备份" class="headerlink" title="软件备份"></a>软件备份</h4><p>由于安卓的软件管理机制，不太好找。</p><p>所以有两种方法：</p><ol><li>有<code>QQ</code>会员，把软件发送给小号</li></ol><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206183929525.png" alt="image-20210206183929525"></p><ol start="2"><li>没有<code>QQ</code>会员，可以选择用<code>一个木函</code>操作一下，选择把要备份的应用，挨个提取安装包，如下图所示：</li></ol><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206183442163.png" alt="image-20210206183442163"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206184230051.png" alt="image-20210206184230051"></p><p>当然也是支持多选的呀~</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206184838865.png" alt="image-20210206184838865"></p><p>惊了，我这还是挑着备份的，<code>74</code>个应用！！</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206184915219.png" alt="image-20210206184915219"></p><p>备份完成之后，会提示备份的位置：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206185054608.png" alt="image-20210206185054608"></p><p>然后软件备份，就懂了吧</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206185223274.png" alt="image-20210206185223274"></p><p>像上面说的备份图片一样，把软件也备份到电脑上就行了</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206191453636.png" alt="备份过程截图"></p><h2 id="顺便说说OPPO-Reno-ACE的刷机"><a href="#顺便说说OPPO-Reno-ACE的刷机" class="headerlink" title="顺便说说OPPO Reno ACE的刷机"></a>顺便说说OPPO Reno ACE的刷机</h2><p><code>ACE</code>刚出的时候还是挺香的，我又xx买了<code>OPPO</code>，不过好在申请上面说的深度测试不麻烦，所以深度测试申请完就没什么难的了，网上教程挺多的。简单说一下</p><ol><li><p>深度测试申请完成后，直接点击进入深度测试就可以进入<code>fastboot</code>了</p></li><li><p>进入<code>fastboot</code>之后，手机不要动，安装电脑安装<code>adb</code>和<code>fastboot</code>工具之后，执行<code>fastboot flashing unlock</code>，手机会进入另一个画面，然后用音量键选择解锁<code>bootloader</code>即可，两张图如下：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206214020675.png" alt="选择解锁--unlock the bootloader"></p></li><li><p>解锁之后，输入<code>fastboot devices</code>检查<code>ADB/FASTBOOT</code>是否装好，如下图</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206214343955.png" alt="fastboot检查手机连接"></p></li><li><p>装完以后用<code>fastboot flash recovery path/to/the/path/of/twrp.img</code>刷入第三方<code>rec</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206214245993.png" alt="刷入第三方rec"></p></li><li><p>然后别忘了今天的目的，清理空间，所以选择格式化<code>Data</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206214522857.png" alt="格式化data"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206214705203.png" alt="输入yes开始格式化data"></p></li><li><p>格式化完<code>data</code>以后，要重启<code>rec</code>，否则原先的加密<code>data</code>会重亲覆盖现在的<code>data</code></p></li><li><p>然后在电脑上把固件包和magic复制到手机存储目录（忘记截图，做完第八步就没了）</p></li><li><p>刷入固件，重亲安装系统</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206215035175.png" alt="点击安装后，选择固件包"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210206214814719.png" alt="刷入固件"></p></li><li><p>重启进入系统</p><p>完成</p></li></ol><h2 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h2><p>上面说了信息的备份，那么如何快速恢复？</p><p>按照上面的划分：</p><ul><li><p>文件类，直接在电脑上待着</p></li><li><p>图片，复制到手机的DCIM文件夹内即可</p></li><li><p>软件，可以用命令逐个安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls`;<span class="keyword">do</span> adb install <span class="variable">$file</span>;<span class="built_in">echo</span> <span class="variable">$file</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>注意<code>ls</code>两边的不是引号，是键盘上数字<code>1</code>旁边的那个英文符号</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210207195559464.png" alt="adb批量安装软件"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 刷机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
            <tag> OPPO </tag>
            
            <tag> 数据备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>龙芯杯无开发板如何开发和调试linux</title>
      <link href="/2021/%E6%97%A0%E5%BC%80%E5%8F%91%E6%9D%BF%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91linux%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8/"/>
      <url>/2021/%E6%97%A0%E5%BC%80%E5%8F%91%E6%9D%BF%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91linux%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="龙芯杯无开发板如何开发和调试linux"><a href="#龙芯杯无开发板如何开发和调试linux" class="headerlink" title="龙芯杯无开发板如何开发和调试linux"></a>龙芯杯无开发板如何开发和调试linux</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>因为龙芯杯的<code>cpu</code>是<code>32</code>位的，具体来说是基于<code>GS232</code>的，恰好给的<code>pmon</code>引导文件是用于<code>ls1b</code>的，<code>ls1b</code>的核也是<code>GS232</code>的，所以就想到可以直接基于<code>ls1b</code>的虚拟机来开发操作系统，这样就可以加快操作系统的开发周期，而不需要依托于上板才能看出操作系统存在的问题(大多数)。</p></blockquote><h2 id="Qemu搭建"><a href="#Qemu搭建" class="headerlink" title="Qemu搭建"></a>Qemu搭建</h2><ol><li><p>虚拟机采用qemu，因为qemu支持ls1b，pmon的话可以直接使用发布包里面给的，也可以使用龙芯开源的ls1b的pmon，后者开机有图形显示，仅此而已，都是够用的。</p><ul><li><p>首先是下载和安装<code>qemu</code>，从官网和清华源之类的地方下载是只有很少龙芯机器支持的，这里用<code>https://gitee.com/martinqiao/qemu.git</code></p><p>配置和编译如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build4mips</span><br><span class="line"><span class="built_in">cd</span> build4mips</span><br><span class="line">../configure --target-list=mipsel-softmmu --disable-werror</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>其中<code>--target-list</code>后面的选项，在此调试需求下，必须的是<code>mipsel-softmmu</code>，有更多兴趣的可以加上<code>mips64el-softmmu</code>，<code>mips64el-linux-user</code>，<code>mipsel-linux-user</code>等，自行了解即可。其中带有<code>softmmu</code>的选项是系统级虚拟机，<code>linux-user</code>为用户级虚拟机。</p><ul><li><code>../configure</code>的时候如果出现<code>ERROR</code>报错，缺少依赖的话，用<code>apt-cache search 依赖</code>，然后再安装即可，如果不报<code>ERROR</code>的错，应该就可以直接<code>make</code></li></ul></li></ul></li></ol><h2 id="利用qemu测试pmon"><a href="#利用qemu测试pmon" class="headerlink" title="利用qemu测试pmon"></a>利用qemu测试pmon</h2><ol start="2"><li>在真实的机器上是绕不开BootLoader这一层的，在龙芯里也就是PMON，在Qemu中可以带着PMON一起运行Linux。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-5.2.0/build4mips/mipsel-softmmu/qemu-system-mipsel -M ls1b -serial stdio -m 2048 -bios ../loongson/pmon/zloader.ls1b/gzrom.bin</span><br></pre></td></tr></table></figure></li></ol><h2 id="利用Qemu和Pmon测试操作系统"><a href="#利用Qemu和Pmon测试操作系统" class="headerlink" title="利用Qemu和Pmon测试操作系统"></a>利用Qemu和Pmon测试操作系统</h2><ol start="3"><li><p>利用<code>qemu</code>调试操作系统</p><p>做系统开发的话嘛，写系统大家就各自加油吧，太难讲了（等以后的同学完善这一块吧），然后调试就是用这种方式。首先要准备一个写好的内核。就是一般编译出来的<code>vmlinux</code>文件（啊我好罗嗦）</p><blockquote><p>由于自己写的，还不行，所以就用源码编译一份，用作演示</p></blockquote></li></ol><h3 id="提供linux内核"><a href="#提供linux内核" class="headerlink" title="提供linux内核"></a>提供linux内核</h3><p>   qemu支持带pmon引导操作系统，当然更广为人知的是直接引导操作系统，然而直接引导一个操作系统可能不止需要一个操作系统的内核，还需要<code>模拟内存的磁盘文件</code>，<code>设备树文件</code>等，而且按照龙芯杯的需求，只需要一个内核文件即可，所以我们只做一个操作系统的内核即可（但是没有根文件系统就没法交互）。</p><p>   此处参考最后文末最后一篇文章</p><ol><li><p>获取源码<code>http://ftp.loongnix.org/embedd/ls1b/bootloader/</code></p></li><li><p>在<code>http://ftp.loongnix.org/embed/ls1b/boot/</code> 下载<code>ramdisk.tar.gz</code>，并将其解压到<code>/mnt/ramdisk1</code> 目录中（解决某种报错，遇到就知道了）</p></li><li><p><code>cp config.ls1b .config</code>修改内核配置</p></li><li><p><code>make vmlinux ARCH=mips</code>编译内核</p></li><li><p><code>mipsel-linux-strip vmlinux</code>精简内核</p></li></ol><blockquote><p>依赖问题自行解决……</p></blockquote><p>这时在源码目录下就出现了<code>vmlinux</code>文件，也就可以使用了。</p><h3 id="搭建tftp服务器"><a href="#搭建tftp服务器" class="headerlink" title="搭建tftp服务器"></a>搭建tftp服务器</h3><p>大赛发布包有提供这样的文件教程，但是是<code>windows</code>的，可能在<code>windows</code>下大家更好操作，<del>但是我已经好久没碰<code>windows</code>了……</del> 所以<code>linux</code>的，凑合看吧……</p><ol><li>安装<code>tftp-server</code>，在不同的发行版，包的名字可能不太一样，自己查一下吧（龙芯的操作系统上叫<code>tftp-server</code>，我在网上看别的都是<code>tftpd</code>大家自行斟酌）</li><li>开启tftp服务，然后查看服务，这一点貌似都是一样的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start tftp.service</span><br><span class="line">systemctl status tftp.service</span><br></pre></td></tr></table></figure>其实目的是查看tftp的配置文件和根目录：<img src="https://static01.imgkr.com/temp/40c7fb44c06444af8b1f1976ef13871d.png"><br>图中<code>1</code>是tftp的配置文件所在，<code>2</code>是tftp的根目录，打开配置文件，修改根目录为自己想要的地方就行</li></ol><h3 id="qemu-pmon-linux"><a href="#qemu-pmon-linux" class="headerlink" title="qemu+pmon+linux"></a>qemu+pmon+linux</h3><p>OK，准备结束，正文开始，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build4mips/mipsel-softmmu/qemu-system-mipsel -M ls1b -bios ../gzrom_ls1b.bin -serial stdio -m 2048 -smp 1 -net nic -nic user,net=10.20.4.0/24,host=10.20.4.16,tftp=/home/loongson/chip/</span><br></pre></td></tr></table></figure><p>写成了代码格式，不知道大家能不能看完整吼吼吼就这样先～</p><p>稍作说明，<code>pmon</code>的加载和之前测试<code>pmon</code>的过程一样，区别在于增加了选项：<br><code>-net nic -nic user,net=10.20.4.0/24,host=10.20.4.16,tftp=/home/loongson/chip/</code></p><p>其中<code>-net nic -nic user</code>是增加了用户级网络配置，至于桥配置、tap配置等内容自行了解，我也不会。</p><p>后面的<code>net=10.20.4.0/24</code>是配置<code>qemu</code>的网络，其实不配这个好像也行，为什么说不配也行呢，因为<code>pmon</code>里还要重新配置，跟这个没关系，但是我不配就会失败……不明白，成功就行吧先</p><p><code>host=10.20.4.16</code>是我的主机<code>ip</code>（内部机密，切勿泄漏）</p><p><code>tftp=/home/loongson/chip/</code>是<code>tftp</code>的根目录，这个不配不行，不配的话在<code>pmon</code>里<code>load</code>的时候会显示没有权限。</p><p>经过上述的配置，进入到<code>pmon</code>的界面，跟之前介绍的<code>pmon</code>测试一样，但是这时，我们配置<code>pmon</code>的<code>ip</code>就可以和主机通信了：</p><ol><li><p>首先查看设备列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devls</span><br></pre></td></tr></table></figure><p>选择带<code>net</code>字样的设备名词，我这里是<code>syn0</code>（不同设备好像不一样？我还没试过家里的电脑hhhh大家试一下）</p></li><li><p>开启网络设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig syn0 up</span><br></pre></td></tr></table></figure></li><li><p>配置网络，这里当然要配置和主机<code>ip</code>同网段的地址，但是神奇的是，必须要把最后一位置<code>0</code>,比如我的<code>ip</code>是<code>10.20.4.16</code>,我给<code>pmon</code>配置<code>10.20.4.11</code>就不行，但是配置<code>10.20.4.0</code>就可以。</p><p>还记得上面的命令是<code>net=10.20.4.0/24</code>，这里哪怕是改成<code>net=10.20.4.11/24</code>，在<code>pmon</code>里配置网络时也还是只有<code>10.20.4.0</code>可以，就很神奇。</p><p>配置网络命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig syn0 10.20.4.0 netmask 255.255.254.0</span><br></pre></td></tr></table></figure><p>完整图示如下：<br><img src="https://static01.imgkr.com/temp/6640dee8b412406c955afaa9eb1790da.png"><br>其中<code>1</code>是开启网卡，<code>2</code>是配置网络，<code>3</code>是查看网络状态。</p></li><li><p><code>load</code>内核<br> 首先我是把前面准备的内核文件<code>vmlinux</code>放在了<code>/home/loongson/chip/</code>目录下，也就是<code>tftp</code>服务器的根目录，所以<code>load</code>的时候如下即可：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load tftp://10.20.4.16/vmlinux</span><br></pre></td></tr></table></figure><p> 如下图，<code>load</code>成功<br> <img src="https://static01.imgkr.com/temp/972915aa819a43748bdffa6c3e7eba5b.png"></p></li><li><p>进入<code>linux</code>系统<br> 大赛的发布包上一点和这一点都说的比较清楚了：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g console=ttyS0,115200 rdinit=sbin/init</span><br></pre></td></tr></table></figure><p>其中<code>115200</code>是波特率，也就是<code>GS232</code>的串口波特率，咱们做系统调试的就不用改这个了。</p><p> <img src="https://static01.imgkr.com/temp/ef64b08f4efd4c91992269f5dcb103ff.png"><br> 看到<code>32</code>个寄存器的初始值了吧，跑了一大堆日志，然后就进入系统了：</p><p> <img src="https://static01.imgkr.com/temp/9d979c7416e5425e978fff38955cc105.png"><br> 完成。</p></li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>其实上面说的都是测试，调试的话是依赖于<code>qemu</code>的<code>gdb</code>支持，可以按行调试代码！不过上述测试就够我们开发了系统了。调试也就是锦上添花，如虎添翼，<del>伤口撒盐</del></p><p><strong>那么如何调试呢?</strong></p><p>首先要会一点点<code>gdb</code>，本文不介绍。</p><p>一般的调试，在<code>qemu</code>命令行添加<code>-g 1234</code>之类的选项，就可以在另一个终端打开<code>gdb</code>，然后输入<code>target remote :1234</code>就可以调试了</p><p>调试系统内核，参考<code>https://www.cnblogs.com/powerrailgun/p/12161295.html</code>：</p><p>命令如下：</p><p><code> build4mips/mipsel-softmmu/qemu-system-mipsel -M ls1b -bios ../gzrom_ls1b.bin   -serial stdio -m 4096  -net nic -nic user,net=10.20.4.0/24,host=10.20.4.16,tftp=/home/loongson/chip/ -smp 1 -S -gdb tcp::1235</code></p><p>主要看最后的内容，<code>tcp::1235</code>和<code>-g 1235</code>是类似的。然后打开<code>gdb</code>调试，然后使用<code>ni</code>和<code>si</code>进行汇编级别的单步调试。</p><h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><p>网上有介绍别的可以调试内核的，我觉得吧，也挺麻烦的，而且线上的速度也不如本地调试快（其实<code>qemu</code>也用到了相关的子模块）。有兴趣可以参考：<br><a href="https://www.oschina.net/news/108450/linux-lab-0-2-rc1-released">https://www.oschina.net/news/108450/linux-lab-0-2-rc1-released</a></p><p>还有内核的构建之类的，参考：<br><a href="https://blog.csdn.net/tongxin1101124/article/details/90213727">https://blog.csdn.net/tongxin1101124/article/details/90213727</a></p><p>指令级调试：<a href="http://happyseeker.github.io/virt/2017/07/06/qemu-i386-crash-in-linux-user-mode-on-loongson.html">http://happyseeker.github.io/virt/2017/07/06/qemu-i386-crash-in-linux-user-mode-on-loongson.html</a></p><p>系统内核调试：<a href="https://www.cnblogs.com/powerrailgun/p/12161295.html">https://www.cnblogs.com/powerrailgun/p/12161295.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 龙芯 </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最后，点个关注不迷路</title>
      <link href="/2021/%E6%9C%80%E5%90%8E%EF%BC%8C%E7%82%B9%E4%B8%AA%E5%85%B3%E6%B3%A8%E4%B8%8D%E8%BF%B7%E8%B7%AF/"/>
      <url>/2021/%E6%9C%80%E5%90%8E%EF%BC%8C%E7%82%B9%E4%B8%AA%E5%85%B3%E6%B3%A8%E4%B8%8D%E8%BF%B7%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h1><p><img src="https://mmbiz.qpic.cn/mmbiz_png/BATIV5oUxOBccib3Q4QpDBLncBeqDsL0wicoibjibsP0xEvGZljsNhb8HLKdibuIwc1pWSUvbvPJIDT26Sw4dqKFKlQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 尾巴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炫猿导航</title>
      <link href="/2021/%E7%82%AB%E7%8C%BF%E5%AF%BC%E8%88%AA%E2%80%94%E2%80%94%E6%89%80%E8%B0%93%E7%B2%BE%E8%87%B4%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%A6%82%E6%AD%A4/"/>
      <url>/2021/%E7%82%AB%E7%8C%BF%E5%AF%BC%E8%88%AA%E2%80%94%E2%80%94%E6%89%80%E8%B0%93%E7%B2%BE%E8%87%B4%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%A6%82%E6%AD%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="炫猿导航——所谓精致，就是如此（内附邀请码获取方式）"><a href="#炫猿导航——所谓精致，就是如此（内附邀请码获取方式）" class="headerlink" title="炫猿导航——所谓精致，就是如此（内附邀请码获取方式）"></a>炫猿导航——所谓精致，就是如此（内附邀请码获取方式）</h1><blockquote><p>前两天推送的封装系统，里面的谷歌浏览器更受大家的喜爱啊，但是发现了<strong>炫猿导航</strong>，我觉的大家收藏这一个网址就够了。<strong>『ALL IN ONE , ONE FOR ALL』</strong></p></blockquote><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>轩辕导航（<code>http://xydh.fun/</code>）</strong>网站上根本没有简介的地方，所谓<strong>干净</strong>，就是如此。</p><p>那么如果你要问我，<strong>炫猿导航</strong>是什么？</p><p>我大概会告诉你，这就是“<strong>帮你把你最需要的内容都收藏在一个条理清晰而美丽的界面上</strong>”<br><img src="D:\github\Blog\source_posts\​炫猿导航——所谓精致，就是如此\a3d7122d-afa9-4095-bff7-f43750413621.png" alt="炫猿导航界面完整截图"></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="1、应有尽有"><a href="#1、应有尽有" class="headerlink" title="1、应有尽有"></a>1、应有尽有</h3><p>许多小伙伴经常需要找一些<strong>资源</strong>或者<strong>工具</strong>会变得无从下手，那么请看这↓↓↓<br><img src="D:\github\Blog\source_posts\​炫猿导航——所谓精致，就是如此\24e792a2-9f16-4cbf-b25d-427bde0aaef9.png" alt="软件分栏"><br>看这↓↓↓<br><img src="D:\github\Blog\source_posts\​炫猿导航——所谓精致，就是如此\633557e0-833d-494c-8bd4-27f7e4a7aac2.png" alt="影视分栏"><br>再看这↓↓↓<br><img src="D:\github\Blog\source_posts\​炫猿导航——所谓精致，就是如此\88b197ef-f1ca-462d-8454-84ec7613ef68.png" alt="工具分栏"></p><blockquote><p>导航这么细致了还会在互联网迷路嘛？</p></blockquote><h3 id="2、自定义"><a href="#2、自定义" class="headerlink" title="2、自定义"></a>2、自定义</h3><p>炫猿导航最吸引我的一点就是，支持自定义设置，支持我们根据自己的需要，<strong>定制一款专属自己的导航网页</strong>。<br>比如这样：<br><img src="D:\github\Blog\source_posts\​炫猿导航——所谓精致，就是如此\eaa59d14-212c-4371-a3d7-b23efa0785fd.png" alt="Arica的导航小站"><br>还有这样：<br><img src="D:\github\Blog\source_posts\​炫猿导航——所谓精致，就是如此\4c3f7076-92ec-483b-8701-f65f09491bf4.png" alt="Hanjiangke"><br>或者这样：<br><img src="D:\github\Blog\source_posts\​炫猿导航——所谓精致，就是如此\f3805804-96fc-4352-bb78-32240057960b.png" alt="墨韵诗台"></p><blockquote><p>上面换的可不止是背景，里面的分栏内容也有变化噢（我也在尝试自定义一个来着）</p></blockquote><h2 id="邀请码"><a href="#邀请码" class="headerlink" title="邀请码"></a>邀请码</h2><p>我借着这个公众号有幸得到一些邀请码，所以同样需要邀请码的小伙伴们，为了避免公众号推文的延迟造成的不公平因素，</p><p><strong>今天</strong><code>20：20</code><strong>我会在学习群中公布邀请码</strong></p><p>后台回复“<strong>学习群</strong>”加入群聊</p><blockquote><p>最后，炫猿导航网址：<code>http://xydh.fun/</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导航网站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动获取参考链接的标题</title>
      <link href="/2021/%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5%E7%9A%84%E6%A0%87%E9%A2%98/"/>
      <url>/2021/%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5%E7%9A%84%E6%A0%87%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="自动获取参考链接的标题"><a href="#自动获取参考链接的标题" class="headerlink" title="自动获取参考链接的标题"></a>自动获取参考链接的标题</h1><blockquote><p>众所周知，我也是一个<del>托更的</del>自媒体的创作者</p></blockquote><p>写的文章经常需要提及一些参考文章，大多数来源于互联网，如下图：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210112223039400.png" alt="上上次文章的参考文献"></p><p>看着感觉还行吧，但是写的时候真的是有点头大，一遍一遍的复制链接，再一遍一遍的对应链接去复制标题，十分的不银杏～</p><p>于是懒人总算想起来写一个爬虫脚本直接获取不就完事了吗？</p><p>说干就干：</p><p>啊完成了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) <span class="comment"># 防止ssl请求报错</span></span><br><span class="line"></span><br><span class="line">heads = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">src = <span class="built_in">open</span>(<span class="string">&quot;link2md.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">des = <span class="built_in">open</span>(<span class="string">&quot;res.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line">lines = src.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    </span><br><span class="line">    url = line.strip(<span class="string">&quot;\n&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>) <span class="comment"># 把文件里的链接去除一些不必要的符号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url,timeout=<span class="number">30</span>,headers=heads,verify=<span class="literal">False</span>)</span><br><span class="line">        res.encoding = <span class="string">&#x27;UTF-8&#x27;</span> <span class="comment"># 解码</span></span><br><span class="line">        content = res.text</span><br><span class="line">        soup = BeautifulSoup(content,<span class="string">&#x27;html.parser&#x27;</span>) <span class="comment"># 获取网页</span></span><br><span class="line"></span><br><span class="line">        target = soup.find(<span class="string">&#x27;title&#x27;</span>) <span class="comment"># 获取标题</span></span><br><span class="line">        result = <span class="string">&quot;[&quot;</span>+target.text+<span class="string">&quot;](&quot;</span>+url+<span class="string">&quot;)\n&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[\033[32m%s\033[0m](\033[34m%s\033[0m)&quot;</span> % (target.text,url) ) <span class="comment"># 彩色打印</span></span><br><span class="line">        des.write(result)</span><br><span class="line">        <span class="comment">#time.sleep(random.random()*3)</span></span><br><span class="line">        <span class="comment">#time.sleep(0.1)   # 如果爬的太快，可以定义一下爬取时间</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[\033[31m############   Something Error  #############\033[0m](\033[31m%s\033[0m)&quot;</span>% (url)) <span class="comment"># 彩色打印</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">src.close()</span><br><span class="line">des.close()</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>把参考链接写入到<code>link2md.txt</code>的文件中</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210125234247025.png" alt="参考链接"></p></li><li><p>运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 link2md.py</span><br></pre></td></tr></table></figure></li><li><p>完成</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210125234627855.png" alt="控制台打印输出"></p><p>文件中也有写入正确的结果：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210126000237981.png" alt="写入文件的结果"></p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>本来还想封装成跨平台的小软件，算了算了，凑合用吧～</p><blockquote><p>如果有同学想封装，再可视化一下，记得发我一份谢谢～</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己动手写操作系统0</title>
      <link href="/2021/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/"/>
      <url>/2021/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="自己动手写操作系统0"><a href="#自己动手写操作系统0" class="headerlink" title="自己动手写操作系统0"></a>自己动手写操作系统0</h1><blockquote><p>参考余渊老师写的《自己动手写操作系统》</p></blockquote><span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="NASM"><a href="#NASM" class="headerlink" title="NASM"></a>NASM</h3><p>官网：<code>https://nasm.us/</code></p><p>有安装版，也有免安装版，以免安装版为例，直接下载压缩包，然后解压到文件夹中就可以了。<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/b45a3dd4-16c8-4599-a8e7-3d2f291d059a.png" alt="官网"></p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/39d37f2a-de26-4ff3-bbbb-16dd3bdf0c7f.png" alt="解压"><br>和网上的很多教程有些区别了，在<code>https://www.cnblogs.com/777777-716/p/5003964.html</code>这篇博客中，nasm的使用需要打开一个bat文件，但是我们的压缩包中并没有这个文件，所以就考虑是环境的问题<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/b1d8bce2-1a07-411d-9015-05bc43f3185b.png"><br>直接使用的话需要在当前文件夹下打开cmd，或者从cmd进入到当前文件夹。</p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/226c58d1-ad51-44b4-8ade-d9cfe9f6007e.png" alt="在文件路径的地方输入cmd并回车"></p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/f1cc4066-78ca-4100-82bc-c0dd2e70e149.png" alt="输入nasm有指令的相关提示"><br>如果在任何其他的路径下，都是无法找到命令。</p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/f795740a-a237-4f91-8feb-f73a07e41f60.png" alt="没有nasm这个命令"><br>这个问题可以通过环境变量的配置来解决。</p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/baedb371-215d-420c-a0c7-06604030c194.png" alt="找到环境变量并配置path"></p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/57aed9df-2d64-4693-b961-71f9c37d5021.png" alt="添加nasm的路径"></p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/e635bf77-850e-49d2-9f59-109197a11d5f.png" alt="这时无论在什么位置都可以使用nasm了"></p><h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><p>关于VirtualBox添加软盘启动，一开始没能找到，然后也是参考了这篇的博客，同上（<code>https://www.cnblogs.com/777777-716/p/5003964.html</code>）。稍微具体说一下吧。</p><ul><li>首先是新建一个空的虚拟机<br>类型和版本都选择其他就好了，文件夹自己建一个，找起来方便。<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/7dd554ad-86c2-495b-9e8f-a4f41c5f9a8b.png"></li><li>按照书中的例子是32M内存足够<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/a525f624-5db4-4f77-8a8b-1754465e5317.png" alt="按照书中的例子是32M内存足够"></li><li>书中说创建一个虚拟硬盘也无妨<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/47b8bea1-5692-4f2f-81c5-e3363246e0aa.png" alt="书中说创建一个虚拟硬盘也无妨"></li><li>书中没说，所以我按字面意思选择了虚拟硬盘<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/ce13e7e8-8981-4735-b0d3-bae0c88d70ef.png" alt="书中没说，所以我按字面意思选择了虚拟硬盘"></li><li>默认选择了<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/dc9b36f2-e98a-426d-ae72-f81ed7e56d36.png" alt="默认选择了"></li><li>1G就够了<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/09cddf2c-ebe2-48ed-a482-5300345c56af.png" alt="1G就够了"></li></ul><h4 id="添加软盘启动"><a href="#添加软盘启动" class="headerlink" title="添加软盘启动"></a>添加软盘启动</h4><ul><li>设置-存储-添加软盘控制器<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/83bb3a3f-14be-440b-98c8-500f352c66aa.png"></li><li>添加新软驱到控制器-选择磁盘<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/0b72fddf-7584-47cc-bc82-789cf745a1d6.png"></li><li>注册-找到生成的img文件，打开即可<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/73f3050e-91e5-4788-884c-2222b472827c.png"></li><li>选择OK<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/7e052566-5575-4784-90fe-5471554bfeee.png"></li></ul><h3 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h3><p>现在的功能都很完善了，VMware也可以很好的支持。</p><ul><li>首先创建空的虚拟机，过程基本同上。添加软盘启动时，在<code>虚拟机-设置-硬件-添加-软盘驱动器</code>添加即可</li></ul><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/b2d7b07c-8870-4d78-bc11-ae9c66ae9fa9.png"></p><ul><li>添加生成的img文件即可<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/6ae1e037-1123-425a-a665-451595f78b39.png"></li></ul><h2 id="开启虚拟机"><a href="#开启虚拟机" class="headerlink" title="开启虚拟机"></a>开启虚拟机</h2><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/5313ead0-114d-4a05-90ce-79f74516433f.png" alt="VirtualBox启动界面"></p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/9beecd0f-2f40-4d33-bd4d-9bfe4e6aca5d.png" alt="VMware启动界面"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Floppy"><a href="#Floppy" class="headerlink" title="Floppy"></a>Floppy</h3><p>包括其他的一些必要工具，在余渊老师的书中所附带的光盘文件都有提供。这里不再上传，有需要请留言即可。</p><p><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%80/97a22458-b012-4c68-993a-fd74f2c2edab.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己动手写操作系统 1</title>
      <link href="/2021/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/"/>
      <url>/2021/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="自己动手写操作系统-1"><a href="#自己动手写操作系统-1" class="headerlink" title="自己动手写操作系统 1"></a>自己动手写操作系统 1</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">org07c00h; 告诉编译器程序加载到7c00处</span><br><span class="line">movax, cs</span><br><span class="line">movds, ax</span><br><span class="line">moves, ax</span><br><span class="line">callDispStr; 调用显示字符串例程</span><br><span class="line">jmp$; 无限循环</span><br><span class="line">DispStr:</span><br><span class="line">movax, BootMessage</span><br><span class="line">movbp, ax; ES:BP = 串地址</span><br><span class="line">movcx, 16; CX = 串长度</span><br><span class="line">movax, 01301h; AH = 13,  AL = 01h</span><br><span class="line">movbx, 000ch; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)</span><br><span class="line">movdl, 0</span><br><span class="line">int10h; 10h 号中断</span><br><span class="line">ret</span><br><span class="line">BootMessage:db&quot;Hello, OS world!&quot;</span><br><span class="line">times 510-($-$$)db0; 填充剩下的空间，使生成的二进制代码恰好为512字节</span><br><span class="line">dw 0xaa55; 结束标志</span><br></pre></td></tr></table></figure><p>上面是书中给的代码，注释写的也是很详细了。然后，这玩意叫汇编，稍微懂一点应该能大致看得懂。等我复习汇编的时候再分享一波学习笔记也可。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>用NASM编译</p><ul><li>打开cmd，考虑文件的整齐划一，可以在工作目录打开。<br>好神奇，在生成.bin文件的时候突然报毒了。<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/4b3b67a5-1148-47c9-867d-45ed0f230e52.png"><br>关闭杀毒再来一次，可以了。<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/4841e3a2-9fa1-45b0-a4e6-8c167fffaae7.png"><h2 id="写入软盘"><a href="#写入软盘" class="headerlink" title="写入软盘"></a>写入软盘</h2>这要用到Floppy这个工具，双击打开，选择<code>Write File to Image</code><br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/cd2ec1ec-a1f5-471c-b4c8-172b7325852a.png"><br>文字写的很清楚，将文件写入image文件中，所以提前应该创建一个img文件。<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/179ad843-66aa-4d76-a8ce-b256e5d9d767.png"><br>选择.bin文件<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/ffc8e81b-c86e-40c7-8d57-e7c97fc976a6.png"><br>选择要写入的img文件<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/62b178d7-377b-4dbb-8dc7-1e1e5d2ae5a2.png"></li></ul><p>然后写入即可。写入成功，又报毒了，所以我觉得把WindowsDefender给关了……<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/1df297c5-71f1-42ca-8e81-18642d38c2c9.png"></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>使用VirtualBox，运行成功。<br><img src="/images/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%8C/38071146-facd-4e8b-b99b-1de0c55552ac.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己封装一个专属的Windows10系统</title>
      <link href="/2021/%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E7%9A%84Windows10%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E7%9A%84Windows10%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="自己封装一个专属的Windows10系统"><a href="#自己封装一个专属的Windows10系统" class="headerlink" title="自己封装一个专属的Windows10系统"></a>自己封装一个专属的Windows10系统</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>每次重装都要把软件重新整一遍，十分麻烦，所以就寻思着直接封装一个集成了软件的系统。但是为啥只预装这些软件呢，因为软件和系统更新换代快，没必要太多，另外我自己也没必要老是重装，给大家贡献一款上手就能用的方便系统玩玩得了。</p><span id="more"></span><blockquote><p>集成的软件从浏览器、到下载、到文件查找、到清理、卸载、安全，基本适用于各行各业的伙伴使用。至于开发，不会配置开发环境的话还干开发嘛？/滑稽</p></blockquote><p><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404013123694.png" alt="预想效果"></p><h2 id="使用NTLITE精简一个系统"><a href="#使用NTLITE精简一个系统" class="headerlink" title="使用NTLITE精简一个系统"></a>使用NTLITE精简一个系统</h2><p>下载：<code>https://www.ntlite.com/download/</code><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331082105544.png"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331082445844.png" alt="免费使用就足够了"></p><h3 id="把系统ISO镜像解压"><a href="#把系统ISO镜像解压" class="headerlink" title="把系统ISO镜像解压"></a>把系统ISO镜像解压</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331082936145.png"><br>添加镜像文件夹（不知道这里为啥不能直接添加ISO文件），然后就直接添加刚才解压的文件夹就好。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331083226964.png"><br>删除不想要的系统版本<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331083435480.png"><br>双击加载所要精简的系统，或者选中后点击上面的加载。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331084158489.png"><br>按照需求作如下更改：</p><ul><li>移除广告、闹钟、反馈、获取帮助、消息、人脉、Skype、你的手机、移动计划、钱包服务、游戏周边等选项及功能</li><li>移除edge浏览器桌面快捷方式</li><li>移除小娜</li><li>关闭Windows Defender</li><li>移除更新中的edge浏览器自动安装</li><li>将“此电脑”、“控制面板”和“回收站”置于桌面</li><li>禁用人脉功能</li><li>自动显示文件后缀名</li></ul><h3 id="保存映像"><a href="#保存映像" class="headerlink" title="保存映像"></a>保存映像</h3><p>点击开始，勾选<strong>创建ISO</strong>并命名（忘了截图，略）<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331095655129.png"></p><h2 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h2><p><img src="https://gitee.com/mxdon/img/raw/master/2020/20200318214154707.png" alt="创建虚拟机"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331110220928.png" alt="自定义虚拟机即将安装的系统"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331110233911.png" alt="选新的，因为我用的就是14版本的"><br>由于需要进入审核模式，所以这里务必要选择稍后安装操作系统。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331110324553.png" alt="稍后安装操作系统"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/2020033111040233.png" alt="其他的64位，不知道别的选项会不会有影响，为了干净，就选其他的"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331110549626.png" alt="选择创建位置及名字"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331110747827.png" alt="配置处理器"><br>我的电脑有16G内存，所以这里分配了4G的虚拟机内存，仅供参考<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331110855153.png" alt="配置内存，一般为物理机的一半"><br>封装系统不需要网络连接<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331110958212.png" alt="不使用网络连接"><br>默认即可<br><img src="https://gitee.com/mxdon/img/raw/master/2020/2020033111101289.png" alt="IO控制器"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331111022307.png" alt="虚拟磁盘"><br>分配25G硬盘空间<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331111102786.png" alt="分配25G空间"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331111126610.png" alt="默认命名，与之前设置的位置相同"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331111243332.png"></p><h2 id="使用虚拟机进入审核模式"><a href="#使用虚拟机进入审核模式" class="headerlink" title="使用虚拟机进入审核模式"></a>使用虚拟机进入审核模式</h2><p>在<strong>虚拟机-设置</strong>选择使用NTLITE精简的系统镜像，点击<strong>确定</strong><br><img src="https://gitee.com/mxdon/img/raw/master/2020/2020033111183925.png"><br>然后开启虚拟机，进入系统安装界面<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331111936688.png"><br>接受条款，进入下一步<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331112054150.png" alt="接受条款，进入下一步"><br>选择安装位置，点击下一步<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331112124662.png" alt="默认安装位置"><br>帖子里说在如下界面按快捷键进入审核模式，但是我没有见到这个界面，随便按了两下就进来了。。。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/2020033112070260.png" alt="远景的帖子"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200331120807806.png" alt="审核模式"></p><blockquote><p>后来经过多次尝试，除了上面的接受协议，等到界面不再让你选择的时候按快捷键就行，你品，你细品</p></blockquote><h2 id="集成软件"><a href="#集成软件" class="headerlink" title="集成软件"></a>集成软件</h2><p>选择<strong>取消</strong>退出系统准备工具，然后就可以进行软件的集成了。<br>这里我准备了之前总结过的各类软件，分别是：</p><ul><li>杀毒——火绒</li><li>卸载——geek</li><li>下载——fdm</li><li>清理——dism++</li><li>浏览器——谷歌浏览器（使用免安装版谷歌打包了一些网站和插件，看图标你懂的）<img src="https://gitee.com/mxdon/img/raw/master/2020/20200403153343565.png"></li><li>工具——everything</li><li>解压——bandzip</li></ul><p>然后将软件打包成镜像文件，在虚拟机设置中——将ISO镜像文件设置替换之前的系统镜像。</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/c782657a-5ba2-44e2-9fa6-94742ee7a6ca.png" alt="这个地方"></p><p>然后在虚拟机中进行安装即可。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>使用软媒魔方进行部分设置。内容如下图所示：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200403235640406.png" alt="去除快捷方式上的箭头之类"><br>oem信息：设置为：mxdon<br>一些设置优化：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404002249403.png" alt="设置oem厂商为Mxdon"><br>最后安装出的效果预想：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404013123694-1586100907192.png" alt="好看嘛"></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>重启虚拟机，勾选“通用”，关机选项选择<strong>关机</strong><br><img src="https://gitee.com/mxdon/img/raw/master/2020/2020040423293748.png" alt="选关机比较稳"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404232914246.png" alt="等待"><br>替换镜像为pe，打开电源事进入固件，调整cd-rom为第一启动选项<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404232529284.png" alt="替换pe系统镜像，这里使用技术员pe"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404234452745.png" alt="防止热键没办法进BIOS然后直接进系统"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404234632900.png" alt="调整引导顺序"><br>在pe种打开dism++<br><img src="https://gitee.com/mxdon/img/raw/master/2020/2020040423475695.png" alt="pe中的dism++"><br>根据大小选定“会话”<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200404235021875.png" alt="选择系统盘中的系统进行清理"></p><p><strong>删除<code>Administrator</code>以及<code>defaultuser0</code>文件夹。</strong></p><p>打开运行，输入命令：</p><p><code>dism /capture-image /capturedir:D:\ /imagefile:E:\ABC.wim /name:&quot;Windows1909_Professional_By_Mxdon&quot; /compress:maximum</code></p><p>其中<code>D</code>是我的系统盘，<code>E</code>是<code>wim</code><br>文件导出的路径<code>Windows1909_Professional_By_Mxdon</code>是卷标，<code>ABC</code>是<code>wim</code>名，<code>maximum</code>代表最大压缩（微软的方式），默认是<code>fast</code>（如果还有更改需求的话可以用fast）<br>完成后<strong>关闭虚拟机</strong>，用<code>7zip</code>打开虚拟机文件，比如我的是<code>1909.vmdk</code>根据文件大小，可知我导出的<code>E:\ABC.wim</code>应该在<code>2.ntfs</code>下，相当于其中的E盘<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200405004934184.png" alt="7zip打开虚拟机的vmdk文件"><br>打开<code>2.ntfs</code>，可以把<code>wim</code>文件导出<br><img src="https://gitee.com/mxdon/img/raw/master/2020/20200405005005202.png" alt="把wim文件解压出来"></p><p>重命名为<code>install.wim</code>这样得到一个<code>wim</code>文件就就算封装完成了。</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><ul><li>wim文件貌似只能使用pe带的安装器安装，无法直接通过Windows平台安装。<strong>可以通过整合到ISO镜像中解决</strong></li><li>在将wim文件重新整合到ISO镜像中进行安装时，无法显示可用的映像。<strong>可用通过编辑source文件夹下EI.cfg文件解决</strong><br><img src="https://gitee.com/mxdon/img/raw/master/2020/9b0d00f0-5587-46c2-aa32-bcd505a15ad7.png"><br><img src="https://gitee.com/mxdon/img/raw/master/2020/a65d3f75-8a2f-480c-9ea2-fbaf34b1aa9a.png"></li><li>编辑EI.cfg文件没能解决问题，然后就不想试了，以后有机会再玩吧。</li><li>封装的系统安装后桌面不是预先设置的那样，手动放在桌面的快捷方式也没了。<strong>应该是在pe中清理的过头了</strong>不整了。（封装的软件在<code>C:\dir_install</code>文件夹下<del>里面还有Windows永久激活工具噢</del>，背景图片在<code>C:\windows\background.jpg</code>)</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>NTLITE：<code>https://www.ntlite.com/download/</code></p><p>7zip:<code>https://sparanoid.com/lab/7z/</code></p><p>VMware:<code>http://www.xue51.com/search.asp?wd=VMware</code></p><p>软媒魔方：<code>https://mofang.ruanmei.com/</code></p><p><strong>系统中集成的软件</strong>：</p><p>火绒：<code>https://www.huorong.cn/person5.html</code></p><p>bandzip：<code>https://www.bandisoft.com/bandizip/</code></p><p>fdm：<code>https://www.freedownloadmanager.org/zh/</code></p><p>geek：<code>https://geekuninstaller.com/</code></p><p>everything：<code>https://www.voidtools.com/zh-cn/</code></p><p>绿色版谷歌浏览器：<code>https://pan.baidu.com/s/1sVQgF01_Ekqxg-657ugS7w</code><br>提取码：<code>qrgh</code></p><p><strong>最终封装出的<code>wim</code>文件</strong>：<code>https://pan.baidu.com/s/1ryWEjl4bqn23G3vVd55zLA </code><br>提取码：<code>04xc</code> </p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.bilibili.com/video/BV1ib411g7Sd?p=8">零基础学封装系统-Windows封装教程-定制属于你自己的系统-Windows 7篇</a><br><a href="https://www.bilibili.com/video/BV1Gb41117pt">最强Win10优化-NtLite作业，快来抄啊</a><br><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&tid=1757374&highlight=%EF%BF%BD%EF%BF%BD%D7%B0">Windows 10简易精简封装教程</a><br><a href="http://bbs.pcbeta.com/viewthread-1756381-1-1.html">16353自制64位中国版五合一镜像 附教程</a><br><a href="https://blog.csdn.net/weixin_43707156/article/details/99223157">最新WIN10系统封装教程2019系列</a><br><a href="https://www.cnblogs.com/jairkong/p/3738387.html">合并Windows系统镜像教程</a><br><a href="https://wenku.baidu.com/view/c57dcab783c4bb4cf6ecd152.html">win7系统封装wim教程</a><br><a href="https://www.52pojie.cn/thread-1125559-1-1.html">[Windows] 【浏览器】谷歌浏览器绿色免安装版，可装非C盘</a></p><h2 id="往期回顾"><a href="#往期回顾" class="headerlink" title="往期回顾"></a>往期回顾</h2><ul><li><a href="http://mp.weixin.qq.com/s?__biz=MzI4NDkzNTA3NQ==&mid=2247485346&idx=1&sn=639d4dd4bd8a1492fdcdd91144506fd5&chksm=ebf2916edc8518788b864d91de200bc06e48c8f9a54b3ff1e0282df5b768f76f2f888b24b51c&scene=21#wechat_redirect">电脑必备软件清单5——清理类</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI4NDkzNTA3NQ==&mid=2247485336&idx=1&sn=01a7a8141dd3e18442a6bd39627f7942&chksm=ebf29154dc85184296521ad90569d6769eed0b892acc5b5c291c9e2f134ee6264742a9d8f0e8&scene=21#wechat_redirect">电脑必备软件清单4——杀毒类</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI4NDkzNTA3NQ==&mid=2247485304&idx=1&sn=5d04fd640b2eaebbcf2be83385908a08&chksm=ebf291b4dc8518a28784a429ac7fda02dbd11791b05abe238a1f8866b0f70698ca152853d309&scene=21#wechat_redirect">电脑必备软件清单3——下载类</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI4NDkzNTA3NQ==&mid=2247485289&idx=2&sn=50e6a793257082ce4e2130492159f5a3&chksm=ebf291a5dc8518b345fe189aadc5ae55ff94799b5ee53384e1a9c94bdbef45a5a9f51194f332&scene=21#wechat_redirect">电脑必备软件清单2——工具类</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzI4NDkzNTA3NQ==&mid=2247485254&idx=1&sn=942e25584d1fb75198fbf39b1462fddb&chksm=ebf2918adc85189c0345f1fb7a5147130bdf76f4245b7a61859147838484490931dec13aeed5&scene=21#wechat_redirect">电脑必备软件清单1——卸载类</a></li></ul><h1 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h1><img src="https://gitee.com/mxdon/img/raw/master/2020/640" alt="null" style="zoom: 48%;" /><img src="https://gitee.com/mxdon/img/raw/master/2020/00D0202D97CDF9F318D419116E03C5FA.jpg" alt="img" style="zoom: 33%;" />]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统封装 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程控制</title>
      <link href="/2021/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="远程控制（这下够用了吧）"><a href="#远程控制（这下够用了吧）" class="headerlink" title="远程控制（这下够用了吧）"></a>远程控制（这下够用了吧）</h1><h2 id="三种方法"><a href="#三种方法" class="headerlink" title="三种方法"></a>三种方法</h2><span id="more"></span><h3 id="方法1：使用Remote-Desktop（局域网）"><a href="#方法1：使用Remote-Desktop（局域网）" class="headerlink" title="方法1：使用Remote Desktop（局域网）"></a>方法1：使用Remote Desktop（局域网）</h3><p>这种方法是微软发布的跨平台项目。<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/3d68cea7-c3c0-4cd5-9c89-d3eeb06de6c7.png"></p><p>基于Windows系统的话，只需要下载手机端即可：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/b50f6146-159a-4148-8b9b-09a4f9ed7fcc.png"><br>然后打开软件，对软件进行许可：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/659336a1-ea4a-4dc3-b5b4-5f9213a28bfa.png"><br>使用也很简单，点击右上角的“+”，选择Desktop<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/4e56bcec-1931-4a05-992a-bf016e2db458.png"><br>根据提示，我们需要知道电脑的hostname或者IP地址，这里介绍一下IP地址的验证方式<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/523e337a-91ab-4b84-b9ef-f43b2b1d887c.png"><br>打开命令行窗口，输入<code>ipconfig</code>查看ipv4的信息（以太网的话就看以太网，WiFi就看WLAN）<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/8aea7791-8338-4339-a798-3ee552a91ce2.png"><br>开启远程桌面的功能，在设置-系统-远程桌面中打开权限<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/ea01f848-6f4d-4285-8176-ddef8e7c4f7e.png"><br>在添加用户时，本地账户已经默认添加，如有需要，还可以自行添加<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/1a1e3200-3f45-46ec-ac71-3e2bc5eb096e.png"><br>在手机端输入相关信息，然后保存<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/abfc5409-66a1-43bf-adb8-d83abb968eb5.png"><br>接着会自动返回桌面，点击图标即可开始连接<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/0c9261ad-f423-46c8-baca-c1a707d27e56.png"><br>点击connect<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/da44812c-1643-4b13-b218-14d823b1e607.png"><br>然后会要求输入本地账户和密码，输入后再次点击connect<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/2b9bbdb8-a4e2-4680-9d7c-1cadd585ae7d.png"><br>手机上的电脑显示如下，此时远程连接成功，电脑端会自动锁屏<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/ce6a9ca8-3144-4d42-b15b-9d5f6ebf59cf.png"><br>手机端控制电脑访问学校官网截图如下：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/0b2f13f3-6591-47d8-b930-5e4318bf0629.png"></p><h3 id="方法2：使用anydesk（非局域网）"><a href="#方法2：使用anydesk（非局域网）" class="headerlink" title="方法2：使用anydesk（非局域网）"></a>方法2：使用anydesk（非局域网）</h3><p>anydesk是teamviewer的孪生弟弟，软件小巧，可跨局域网、跨平台使用<br>首先是电脑端：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/669aa7b0-d4e3-4d02-bf7d-c0e21d1bc0e4.png"><br>打开后可以在本机安装，也可以免安装使用：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/f6b396e1-7364-42f3-9003-88ab7b6f6d3d.png"><br>手机端也可以在官网下载，传送到手机端，也可以在谷歌商店直接下载：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/142da3e6-2d9a-41cf-ac68-4e67773bc0df.png"><br>手机端打开anydesk，提示需要安装插件，选择确定：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/5bc79fad-aee3-4356-aaa9-0263ea65064e.png"><br>提示下载apk文件，下载安装即可：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/add8f0f8-f984-4c67-af4a-91c9d815588c.png"><br>然后跳过教程<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/a8d30856-f724-4248-872e-58223e5ff745.png"><br>输入电脑端的连接地址：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/f3c7f035-83f0-4a01-84f1-5e455ea1c72b.png"><br>点击连接图标<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/de127af3-8282-4a3d-8d9e-8d99de538faa.png"><br>电脑端接受连接请求：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/6b408be3-44c0-41f9-80ce-a612a9f441ae.png"><br>随意点击，跳过提示<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/a0ce532a-667d-495a-b366-1d395e5df9bd.png"><br>手机端控制电脑访问学校官网截图如下：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/d3e27426-dd87-4133-966c-f0f03565b520.png"></p><h3 id="方法3：使用向日葵（非局域网）"><a href="#方法3：使用向日葵（非局域网）" class="headerlink" title="方法3：使用向日葵（非局域网）"></a>方法3：使用向日葵（非局域网）</h3><p>电脑端下载向日葵：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/ff215c1b-2ce4-4c96-b693-dcc3578fbe5b.png"><br>安装并打开：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/e7c08782-ecd4-4efe-b250-eb2672740c4e.png"><br>手机端下载向日葵：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/7384ed99-92f8-4b96-b20d-093d6fad5d24.png"><br>打开软件，手机端要求必须要账号登录：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/de13111b-4e9d-4c68-b06f-6e94710bd94f.png"><br>登陆后点击“发现-远程协助”<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/12859c62-af59-4964-a1a3-581fe4ba91ca.png"><br>输入识别码和验证码，即可进行远程连接：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/68abe103-3ef2-43cc-a516-54b6be4eeeb1.png"><br>手机端控制电脑访问学校官网截图如下：<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/ea9e0c6e-f42a-4df7-88a2-87975434758d.png"></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul><li>比如应用宝，在管理-连接电脑可以实现，需要在电脑端下载应用宝（在商店搜索远程桌面有很多软件可以用）<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/26d50053-4366-492d-906c-64e31690002b.png"></li><li>谷歌应用商店也有远程桌面的功能<br><img src="/images/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/98ad359c-78a6-4400-acf8-0740847d1f3e.png"></li><li>极端一些也可以在手机上装个模拟Linux的环境，打开ssh功能，即可通过ssh连接电脑端，这里不再演示</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 远程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬件入门的一点点心得</title>
      <link href="/2020/%E7%A1%AC%E4%BB%B6%E5%85%A5%E9%97%A8%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E5%BF%83%E5%BE%97/"/>
      <url>/2020/%E7%A1%AC%E4%BB%B6%E5%85%A5%E9%97%A8%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="硬件入门的一点点心得"><a href="#硬件入门的一点点心得" class="headerlink" title="硬件入门的一点点心得"></a>硬件入门的一点点心得</h1><blockquote><p>没想到有人问我硬件怎么学，稍微说点吧~</p></blockquote><h2 id="从何说起"><a href="#从何说起" class="headerlink" title="从何说起"></a>从何说起</h2><p>开始动手码字却发现还不知道从哪说起，于是去<strong>网上找了找资料</strong>：</p><ol><li><p>硬件方向学习导图：<a href="https://img-blog.csdn.net/20180929145815734?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MTA1MjI3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/00">硬件方向学习导图</a></p><p>图里的介绍是：</p><blockquote><ul><li><strong>基础</strong>：<code>C</code>语言–模电/数电–Altium Designer之类的软件–<code>PCB</code>的设计/制作流程</li><li><strong>进阶</strong>：单片机–电路</li><li><strong>再进阶</strong>：布线–<code>FPGA</code>–<code>EMC</code></li></ul></blockquote><p>上述是我根据图的内容简述的，有兴趣可以稍微打开图看一看，很糊</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/20180929145815734" alt="硬件方向学习导图"></p></li><li><p>如何学习硬件设计——理论篇：<a href="https://blog.csdn.net/k331922164/article/details/45102489">如何学习硬件设计——理论篇</a></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201226202719795.png" alt="如何学习硬件设计——理论篇"></p><p>比上面那个图还笼统，从高等数学，说到集成电路设计，把大学专业课说了一遍，所以硬件相关专业的同学你们学会了嘛？</p></li><li><p>知乎——如何学习硬件知识？构建完美的硬件知识体系，彻底解决零散知识记不住难题。<a href="https://zhuanlan.zhihu.com/p/121846854">如何学习硬件知识？构建完美的硬件知识体系，彻底解决零散知识记不住难题。</a></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/v2-bce95b939c9335cf846a346e8850d89a_720w.jpg" alt="硬件知识大纲"></p><p>不亏是知乎，在这些方面还是非常的“善为人师”，图很清晰，有需要就去看看吧，链接都放上了。</p></li></ol><h2 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h2><p>身为一条杂鱼，啥都不精通，参照上面大佬们的思路稍微说一下。</p><h3 id="1-首先，选定好自己的硬件方向！"><a href="#1-首先，选定好自己的硬件方向！" class="headerlink" title="1. 首先，选定好自己的硬件方向！"></a>1. 首先，选定好自己的硬件方向！</h3><p>做硬件有很多领域，从电子元器件的设计，再到PCB电路板设计，从基础门电路设计，再到芯片设计，从芯片设计，再到生产工艺设计，硬件的方向也有很多。除去这些泛泛之谈，那么也应该知道——设计摄像头的是一批人，设计收音机的是另一批人。</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201226204108550.png" alt="BOSS直聘上的荣耀手机硬件工程师岗位信息"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201226204255250.png" alt="可能是友商的招聘信息"></p><p>所以硬件行业的跨度是挺大的。</p><p>确定好自己的硬件方向是很重要的。</p><h3 id="2-如何确定自己的方向"><a href="#2-如何确定自己的方向" class="headerlink" title="2. 如何确定自己的方向"></a>2. 如何确定自己的方向</h3><p>这一点也就是上面几位大佬说的基础部分，接触的多，学的多，也就大致知道了自己的方向，<del>哪怕不能确定，等到临毕业也就再也不容易改方向了</del></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/v2-e10bc35e4bab62db99f3bcd0dbc09b0e_720w.jpg" alt="知乎——硬件基础"></p><p>我本人是电子信息工程专业，按照我的专业课，稍微列举一些：</p><p>电路原理、模电、数电、数字信号处理、电磁场与微波技术、微机原理、单片机原理、高频信号、组网、通信原理、光纤通信……</p><p>呐，放图你们自己看吧</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201226205240794.png" alt="我的课程信息"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201226205316413.png" alt="我的课程信息"></p><p>哇这么多，学完就可以了嘛?</p><p>当然不是，毕竟像我这样挂科怪，是学不完的，不过学这些东西当然都有用，底子打好了都好说。</p><h3 id="3-我的建议"><a href="#3-我的建议" class="headerlink" title="3. 我的建议"></a>3. 我的建议</h3><p>这不能算是我的建议了，无论什么课程都不建议纸上谈兵，实操是学习的重要手段。</p><p>以我参加的几个面试经验来看，首先是编程语言，做硬件首当其冲是<code>C</code>语言，之前这么说，有杠精说还有<code>Python</code>，喜欢算就算吧~</p><p><code>C</code>语言作为贝尔实验室第一款编程语言——<code>B</code>语言的新生，效率高，体量小，之所以经久不衰，原因就在于硬件。</p><p>每每看到一些营销号说：“<code>xxx</code>超过<code>C++</code>，还不快来学？”这样的话就很无语，各有各的好处，但是C在硬件中的好处不言而喻，硬件中的设计，对寄存器、内存，都有极高的要求，体量太大是没办法用的，比如<code>Python</code>就是站在<code>C</code>语言的平台上开发的，但是如果用在计算机方面的底层设计，那是有些困难的。</p><p><strong>所以<code>C</code>语言还要学，起码未来几年<code>C</code>不会倒下。</strong></p><p><strong>此外一些硬件的基础要知道，比如寄存器、锁存器，之类的概念要知道吧，还有一些器件基础，比如<code>ROM</code>和<code>RAM</code>的区别，以至于<code>PROM</code>、<code>EPROM</code>、<code>EEPROM</code>和<code>FLASH</code>之类的区别，再到<code>DRAM</code>、<code>SDRAM</code>等等。</strong></p><p><strong>一般大学生的项目可能都是从单片机开始的，但是单片机的难度经常都不会很高，所以建议在单片机的项目基础上，了解一些通信协议，<code>I2C</code>、<code>SPI</code>、<code>UART</code>等等</strong>。</p><p><strong>而且现在社会需要的大多数都不是纯硬件吧，不考虑<code>C</code>语言的软件属性，在计算机方面，也还要知道一些操作系统的知识，不在计算机方面也应该知道简单计算机的寻址方式。</strong></p><p>当然，基础不能丢。</p><h3 id="4-我的大致经历"><a href="#4-我的大致经历" class="headerlink" title="4. 我的大致经历"></a>4. 我的大致经历</h3><p>我关于硬件的知识也没有那么系统的学习。</p><p>除了上课的课程，经常旷课，还挂了俩科，都学的很乱很浅。</p><p>最一开始对计算机的了解，基本上可以说是在部门给别人修电脑得来的经验。</p><p>然后结合最一开始的部门，学的是前端，<code>php</code>，以及微信后台开发，看我的公众号就知道我是学无所成。</p><p>大一的课程是<code>C++</code>，凑合学了点<code>C</code></p><p>之后大二加的实验室学的是网站后端，<code>javaweb</code>，期间还因为接触的语言比较乱，又学了<code>Python</code>和易语言，易语言的程度只能算是了解。</p><p>再到大三，准备转行做硬件，学习<code>Verilog</code>，准备做<code>CPU</code>的设计，自学操作系统、帮同学做课设又学了<code>shell</code>，参加比赛和课程要求，都学了一些汇编，单片机原理交了通信协议，微机原理学了寻址方式……</p><p>现在打工，做的工作在固件之上，内核之下，主要对文件系统和硬件适配比较了解，<code>CPU</code>的设计工作，还是要考个研才行。</p><p>以上仅供参考。</p><blockquote><p>写的比较乱，凑合看吧</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
            <tag> 硬件入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Archinux入门</title>
      <link href="/2020/ArchLinux/"/>
      <url>/2020/ArchLinux/</url>
      
        <content type="html"><![CDATA[<h1 id="Archinux入门"><a href="#Archinux入门" class="headerlink" title="Archinux入门"></a>Archinux入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>ArchLinux由于安装困难, 让Linux初学者望而止步. 本文是一篇</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ArchLinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIOS、UEFI、Boot Loader都是些什么</title>
      <link href="/2020/BIOS%E3%80%81UEFI%E3%80%81Boot-Loader%E9%83%BD%E6%98%AF%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
      <url>/2020/BIOS%E3%80%81UEFI%E3%80%81Boot-Loader%E9%83%BD%E6%98%AF%E4%BA%9B%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是BIOS"><a href="#什么是BIOS" class="headerlink" title="什么是BIOS"></a>什么是BIOS</h2><blockquote><p><code>Basic Input Output System</code>（基本输入输出系统）</p><p>其实就是一组保存着计算机最重要的<strong>基本输入输出的程序</strong>、<strong>开机后自检程序</strong>、<strong>系统自启动程序</strong>，<strong>并固化到计算机内主板上的一个ROM芯片上的程序</strong>。</p></blockquote><h3 id="基本的输入输出是什么"><a href="#基本的输入输出是什么" class="headerlink" title="基本的输入输出是什么"></a>基本的输入输出是什么</h3><p><strong>BIOS的终极目标：</strong></p><blockquote><p>“BIOS的最主要的功能：初始化硬件平台和提供硬件的软件抽象，引导操作系统启动。”</p></blockquote><p>所以：</p><p>输入的是：硬件平台的信息</p><p>输出的是：硬件的软件抽象</p><p>然后<strong>将引导文件加载至内存引导操作系统启动</strong></p><h3 id="自检程序“检”了什么"><a href="#自检程序“检”了什么" class="headerlink" title="自检程序“检”了什么"></a>自检程序“检”了什么</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201209230345560.png" alt="image-20201209230345560"></p><p>每个硬件平台都需要发现IO总线，因为数据的传输离不开总线。</p><p>所谓的系统自检，就是<code>Power On Self Test</code>，也就是图中的<code>POST</code>过程。在传统<code>BIOS</code>的上电阶段，通过<code>IO</code>枚举发现总线，进入到标准描述的平台接口部分。</p><h3 id="系统自启动了什么"><a href="#系统自启动了什么" class="headerlink" title="系统自启动了什么"></a>系统自启动了什么</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201209231643209.png" alt="image-20201209231643209"></p><p>自启动了操作系统呀~毕竟按下电源只是启动了<code>BIOS</code>程序。</p><p>此外，在传统<code>BIOS</code>程序中，还不支持文件系统，不像上图的<code>Dell</code>主板，可以手动的添加引导文件，在传统<code>BIOS</code>启动之后，<code>BIOS</code>会自动加载<code>MBR</code>的主引导记录，使操作系统“自行启动”</p><p><strong>所以我们再看什么是<code>BIOS</code>？</strong></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201209230345560.png" alt="image-20201209230345560"></p><p><strong>输入：</strong>围绕上图进行展开，左边部分刚好是硬件的初始化：<code>CPU</code>初始化、内存初始化……相当于是上面说的，输入的硬件平台信息。</p><p><strong>自检：</strong>再经过中间部分的系统自检，控制台初始化、设备初始化、通过枚举发现总线并初始化。</p><p><strong>输出&amp;自启动：</strong>选择引导设备之后，通过<code>BIOS</code>将硬件平台的软件接口提供给<code>OS Loader</code>，以供操作系统运行使用。</p><p><code>BIOS</code>的脉络就稍微有一些清楚了吧。</p><h2 id="什么是UEFI-BIOS"><a href="#什么是UEFI-BIOS" class="headerlink" title="什么是UEFI BIOS"></a>什么是UEFI BIOS</h2><blockquote><p>Unified Extensible Firmware Interface（统一可扩展固件接口）</p><p>  由于安藤处理器芯片组的创新，64位架构的处理器已经不再适用传统BIOS的16位运行模式，英特尔将系统固件和操作系统之间的接口完全重新定义为一个可扩展的，标准化的固件接口规范。</p></blockquote><p><code>UEFI</code>名字听起来和<code>BIOS</code>相差较大，但是作为业界的新<code>BIOS</code>——<code>UEFI BIOS</code>，毕竟还是<code>BIOS</code>，所以它的主要目标就还是——<strong>初始化硬件，提供硬件的软件抽象，并引导操作系统启动</strong></p><h3 id="UEFI和BIOS的区别"><a href="#UEFI和BIOS的区别" class="headerlink" title="UEFI和BIOS的区别"></a>UEFI和BIOS的区别</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201209233106533.png" alt="image-20201209233106533"></p><p><strong>效率方面：</strong><code>BIOS</code>正是因为其闭源、接口混乱才导致其最终不适用于新架构的芯片，那时候刚好赶上开源的浪潮，<code>UEFI</code>开源且使用规定的标准接口，通过提供接口，也将大部分代码移步到了<code>C</code>代码，大大降低了开发难度，这也是其快速发展的根本原因。</p><p><strong>性能方面：</strong><code>UEFI</code>舍弃了硬件外部中断的低效方式，只保留了时钟中断，通过异步+事件来实现对外部设备的操作，性能因此得到极大的释放。</p><p><strong>扩展性和兼容性：</strong>由于规范的模块化设计，在扩展功能时只需要动态链接其模块即可，扩展十分方便。而且传统<code>BIOS</code>必须运行在<code>16</code>位的指令模式下，寻址范围也十分有限，而<code>UEFI BIOS</code>支持64位的程序，兼容<code>32</code>位，这也是为什么<code>Windows XP</code>这么久了，稍微改改还可以安装在新设备上。</p><p><strong>安全性：</strong><code>UEFI</code>安装的驱动设备需要经过签名验证才可以，通过一定的加密机制进行验证，其安全性也非常的高。</p><p><strong>其他：</strong>传统<code>BIOS</code>只支持容量不超过<code>2TB</code>的驱动器，原因是：按照常见的<code>512Byte</code>扇区，其分区表的单个分区的第<code>13-16</code>字节用来进行<code>LBA</code>寻址，也就是以扇区为单位进行寻址。</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201209234539804.png" alt="image-20201209234539804"></p><p><code>13-16</code>总共<code>4</code>个字节，<code>1Byte=8bit</code>，这样也就是<code>4*8=32</code>位，总共就是<code>2^32</code>个单位空间，以扇区为单位进行寻址，也就是每次<code>512Byte</code>，也就是：<br>$$<br>2^{32}*512=2^{41}B=2^{31}KB=2^{21}MB=2^{11}GB=2TB<br>$$<br>所以传统<code>BIOS</code>支持的最大容量的驱动器，不超过<code>2TB</code>。以硬件厂商<code>1000：1024</code>的计算方式，也就是<code>2.2TB</code>：<br>$$<br>2^{41}B/1000,000,000,000=2.2TB<br>$$<br>那么<code>UEFI</code>支持多大的呢？</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201209235422385.png" alt="image-20201209235422385"></p><p>采用类似的分区表，具体可以看[参考文章]。</p><p><code>UEFI</code>支持<code>64</code>位的地址空间，所以其寻址偏移恰好为一个机器长度——<code>64</code>位，即<code>8Byte</code>，还是按照<code>LBA</code>寻址方式，按照上述计算：<br>$$<br>2^{64}*512=2^{73}B=2^{13}EB=8ZB<br>$$<br>但是微软关方和一些其他资料都显示是<code>18EB</code>(按照硬件厂商<code>1000：1024</code>计算)：<br>$$<br>2^{64}B/10^{60}=18EB<br>$$</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201211123226161.png" alt="微软对GPT大小的解释"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201211123247101.png" alt="Intel白皮书未对GPT大小进行说明"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201211123836500.png" alt="NTFS官网上的计算大小"></p><p>所以可以对微软官网的数据<strong>证伪</strong>。</p><blockquote><p>由于现在又由<code>8</code>个<code>512Byte</code>扇区伪装一下，发展成了<code>4k</code>大小的扇区，所以上述计算还可以再乘<code>8</code>，即<code>GPT</code>最大分区容量可以是<code>64ZB</code>，而当前整个万维网的大小也不过<code>1ZB</code></p></blockquote><h3 id="GPT分区的结构"><a href="#GPT分区的结构" class="headerlink" title="GPT分区的结构"></a>GPT分区的结构</h3><p>既然说到了<code>GPT</code>分区的大小问题，那就顺便稍微说一说它的结构吧，如上图：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201211125738922.png" alt="NTFS官网的图"></p><p><code>PMBR</code>是<code>Protective MBR</code>，就是当作<code>MBR</code>用，位置在<code>LBA0</code>，如果是传统引导，就从这个地方寻找引导文件，如果是<code>UEFI</code>引导，再从后面的<code>GPT HDR</code>寻找，<code>GPT HDR</code>是**<code>GPT</code>表头**，位置在<code>LBA1</code>，记录其他表项的位置；</p><p><code>LBA2-LBA33</code>总共<code>32</code>个分区表，记录对应分区的信息，比如起始地址和结束地址等，每个分区的信息用<code>128Byte</code>记录，也叫做<strong>分区表项</strong>，比较有意思的一点是，由于<code>Windows</code>只允许最多<code>128</code>个分区，所以<code>GPT</code><strong>一般</strong>也就只设<code>32</code>个分区表。那这是为什么呢？</p><p>前面介绍，一个扇区一般是<code>512Byte</code>，按照微软的设定来，<code>128</code>个分区，也就需要<code>128</code>个分区表项来记录，一个分区表项<code>128Byte</code>，也就是总共<br>$$<br>128<em>128=2^7</em>2^7=2^{14}<br>$$<br><code>32</code>个<code>512Byte</code>大小的扇区，是不是刚好：<br>$$<br>32<em>512=2^5</em>2^9=2^{14}<br>$$<br>这里可能只做了解即可。</p><p>至于后面的蓝色区域，对应之后，<code>LBA-1</code>是<code>GPT HDR</code>的备份表，<code>LBA-2 - LBA-33</code>是分区表的备份表，如果前面的数据发生错误，就从后面恢复就好啦~</p><p>中间的<code>LBA34-LBA-34</code>也就是除去表头、表项和备份表等信息的<strong>分区</strong>内容啦</p><h3 id="UEFI与硬件初始化"><a href="#UEFI与硬件初始化" class="headerlink" title="UEFI与硬件初始化"></a>UEFI与硬件初始化</h3><blockquote><p><code>UEFI</code>纯粹地是一个接口规范</p><p>它不会具体涉及平台固件是如何实现的</p><p><code>UEFI</code>建立在被称为平台初始化（<code>Platform Initialization</code>，简称<code>PI</code>）标准的框架之上。</p><p><strong><code>PI</code>是关于<code>UEFI</code>具体如何实现的规范</strong></p></blockquote><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201210000457886.png" alt="image-20201210000457886"></p><p>在<code>SEC</code>安全验证，初始化<code>cpu</code>和<code>cpu</code>内部资源，使<code>cache</code>作为<code>ram</code>提供堆栈运行C代码（<code>CAR</code>——<code>Cache As Ram</code>）</p><p><code>PEI</code>阶段初始化内存，并将需要传递的信息传递给<code>DXE</code></p><p><code>DXE</code>驱动执行环境，内存已经可以完全被使用，初始化核心芯片，并将控制权转交给<code>UEFI</code>接口</p><p><code>BDS</code>引导设备选择，负责初始化所有启动<code>OS</code>所需的设备，负责执行所有符合<code>UEFI</code>驱动模型的驱动。</p><p>选择完引导设备，就加载<code>OS loader</code>运行<code>OS</code></p><p><code>OS</code>启动后，系统的控制权从UEFI转交给<code>OS loader</code>，<code>UEFI</code>占用的资源被回收到<code>OS loader</code>，只保留<code>UEFI</code>运行是服务。</p><p>其实再统观一下上面的流程，是不是就变成了：<strong>基本输入&gt;&gt;&gt;<code>PI</code>&gt;&gt;&gt;<code>UEFI</code>&gt;&gt;&gt;基本输出</strong></p><p>这个过程是不是又像<code>BIOS</code>了？毕竟<code>UEFI</code>还是用作<code>BIOS</code>的。</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201210001009450.png" alt="image-20201210001009450"></p><p>如果还是觉得<code>UEFI</code>和<code>BIOS</code>是两回事，那么可以换种解读：</p><p><code>Rom Stage</code>：一开始运行在<code>Rom</code>中，初始化<code>Cache</code>作为<code>Ram</code>运行，从而有了初步的<code>C</code>环境，运行<code>C</code>代码。</p><p><code>Ram Stage</code>：初始化一定的硬件之后，<code>BIOS</code>程序进入到<code>Ram</code>中，继续初始化芯片组、主板等硬件。</p><p><code>Find something to boot</code>：最后找到启动设备，把控制权交给操作系统内核，开始操作系统的时代。</p><h2 id="什么是Boot-Loader"><a href="#什么是Boot-Loader" class="headerlink" title="什么是Boot Loader"></a>什么是Boot Loader</h2><blockquote><p><strong><code>Boot Loader</code>是在操作系统内核运行前执行的一小段程序</strong>，执行的工作听起来和<code>BIOS</code>很像：初始化硬件，和引导系统，相当于<code>UEFI</code>启动过程中的<code>PEI</code>初始化硬件、<code>DXE</code>识别启动设备，<code>BDS</code>把权限交给启动加载器，引导内核。</p></blockquote><p>对比一下<code>UEFI</code>和<code>Boot Loader</code>的启动方式：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201210000457886.png" alt="UEFI启动"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201210001749309.png" alt="Boot Loader启动"></p><p>再分析<code>Boot Loader</code>的启动过程：</p><p>首先硬件设备初始化。为加载 <code>Boot Loader</code> 的 <code>stage2</code> 准备 <code>RAM</code> 空间。拷贝 <code>Boot Loader</code> 的 <code>stage2</code> 到 <code>RAM</code> 空间中。设置好堆栈。跳转到 <code>stage2</code> 的 <code>C</code> 入口点。</p><p>初始化本阶段要使用到的硬件设备。检测系统内存映射(<code>memory map</code>)。将<code>kernel</code> 映像和根文件系统映像从 <code>flash</code> 上读到 <code>RAM</code> 空间中。为内核设置启动参数。调用内核。</p><blockquote><p>PS:有的Boot Loader可能只有一个过程，上述为两个阶段的类型。</p></blockquote><p><strong>几个问题：</strong></p><ol><li><p><code>BIOS</code>为什么固化到<code>ROM</code>芯片上？</p><p>因为掉电不丢失</p></li><li><p>只读存储器的话，又不能作修改，还有界面干什么？</p><p>要作修改，修改内容在<code>CMOS</code>中</p></li><li><p>现在的<code>BIOS</code>固化到哪了？</p><p><code>ROM</code>-&gt;<code>PROM</code>-&gt;<code>EPROM</code>-&gt;<code>EEPROM</code>-&gt;<code>FLASH</code>。</p><ul><li><p>一开始是在<code>ROM</code>上，但是只能检验，不能修改，十分的不方便，所以就转到了<code>PROM</code></p></li><li><p><code>PROM</code>可编程<code>ROM</code>，但是写入后也不能改，</p></li><li><p>然后就是<code>EPROM</code>，可擦除可编程<code>ROM</code>，但是人们又觉得不方便，</p></li><li><p>于是又有了<code>EEPROM</code>，电可擦除可编程<code>ROM</code>，而且双电压可防毒。</p></li><li><p><code>Flash</code>闪存，更方便，只要用专用程序即可修改，</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> UEFI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEFI </tag>
            
            <tag> BIOS </tag>
            
            <tag> BootLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现最小生成树--Prim算法和Kruskal算法</title>
      <link href="/2020/Python%E5%AE%9E%E7%8E%B0%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2020/Python%E5%AE%9E%E7%8E%B0%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Python实现最小生成树–Prim算法和Kruskal算法"><a href="#Python实现最小生成树–Prim算法和Kruskal算法" class="headerlink" title="Python实现最小生成树–Prim算法和Kruskal算法"></a>Python实现最小生成树–Prim算法和Kruskal算法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>最小生成树涉及到在互联网中网游设计者和网络收音机所面临的问题：信息传播问题。其中最简单的解法是由广播源维护一个收听者的列表，将每条信息向每个收听者发送一次，即单播解法。而单播解法的问题也很明显：路由器网络中，有一些路由器会发送相同的信息，给互联网络增加负担，产生额外流量。另一种方法是洪水解法，每条消息只发送一次，给所有的路由器，每个路由器再尽可能的发送给相连的主机或路由器。洪水解法如果没有限制的话，许多路由器和主机将不停的接收到重复的消息，所以洪水解法一般会给每条消息设置TTL值，以此对信息传播进行限制。</p><blockquote><p>而通过分析和研究，信息广播问题的最优解法，依赖于路由器关系图上选取具有最小权重的生成树。沿着最小生成树的路径层次传播，达到每个路由器只需要处理1次消息，同时总费用最小。</p></blockquote></blockquote><span id="more"></span><p>解决最小生成树问题常用的有<strong>Prim算法</strong>和<strong>Kruskal算法</strong>，二者均基于贪心算法。<strong>Prim算法</strong>思想很简单，即每步都沿着最小权重的边向前搜索，找到一条权重最小的可以安全添加的边，将边添加到树中。<strong>Kruskal算法</strong>是对所有的权重进行排序，再次体现贪心算法的思想。通过对权重排序，将权重最小的边开始遍历，直至图中的所有节点都连在同一个树上，此时即为最小生成树。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>  使用<code>python</code>，通过<code>Prim算法</code>和<code>Kruskal算法</code>实现图的<code>最小生成树</code>，输入数据以存放二维数组形式的逗号分隔值文件进行输入，比如<code>txt</code>文件或者<code>csv</code>文件，输出时按照<code>Prim算法</code>和<code>Kruskal算法</code>分别输出最小生成树的二维数组。同时使用<code>networkx</code>模块，绘制出相应的有权图。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS83NGMzNDFhZC01NjQzLTRjODYtOTA2NC1hOTkwODBiYmUwNzMucG5n" alt="图1  程序执行流程图"><br>具体运行逻辑为：</p><p>首先输入存放图数据的txt文件路径，然后系统显示菜单：</p><p>请选择相应功能模块：</p><ul><li>1: 显示原始关系图及数据</li><li>2：查看prim算法演示</li><li>3：查看kruskal算法演示</li><li>4: 更改源文件</li><li>0：退出此次运行</li></ul><p>正确的输入范围为0-3，并实现菜单中的相应功能，其输出形式以相应的关系图和二维数组的形式进行输出。<br>当输入内容不符合规范或致使程序运行出现错误时，会有相应提示并重新显示系统菜单。<img src="https://gitee.com/mxdon/img/raw/master/2020/20200622214219711.png" alt="图2  错误格式文件输入演示及纠正示例"></p><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>本程序所用数据为存储在逗号分隔值文件中的二维数组，格式为：“首节点，尾节点，权重”。与一般的图结构程序相比，本程序采用的数据格式只取到程序的必要属性，即“首节点，尾节点，权重”，相比于通常的邻接矩阵或稀疏矩阵，三列元素的优势十分明显：易于分析，直观方便，输入便捷，纠错直接。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS83Y2Y3M2Y0Zi0wMzgzLTQ0NmUtYWM0ZC1mNmVhOTIyNzY5MGIucG5n" alt="图3  程序功能模块结构图"><br>其中main函数代码如下：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9jNTI5ZjYxMy1jYWRlLTRjMDktODk0Zi01ZmMyODNjYzRhNDYucG5n" alt="图4  main函数截图"><br>其中明显可以看出：输入文件名称时，是以调用函数的方式运行，显示菜单也是以函数的方式运行，加上结果必要进行的函数调用，这些都是为了节省代码的复用，使逻辑更加清晰。</p><p>此外在<code>main</code>函数中添加<code>try……except</code>语句，就在确认函数无逻辑错误的情况下，节省了在对各个函数的异常判断，提高了代码的简洁性。</p><h3 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h3><p>解决最小生成树问题常用的有Prim算法和Kruskal算法，二者均基于贪心算法。</p><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><p>Prim算法思想很简单，即每步都沿着最小权重的边向前搜索，找到一条权重最小的可以安全添加的边，将边添加到树中。</p><p>如以下图例（如图5）：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS80YTBlYTQ0Ni1hZWJjLTQ4MGUtYWNlYi1iMGNjMTUwYjhiMTMucG5n" alt="图5  prim算法原始有权图"></p><ul><li><p>Step1：首先从图中选取一个顶点，这一步是随机的，本程序中仍帮助用户做出了选择。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8xNGM3MGYxZS1iNzY4LTQ0NzEtOWEzZC0xNmM0NzI1MmZiNjMucG5n" alt="图6  step1：选取顶点"></p></li><li><p>Step2：由当前顶点向未选节点进行遍历，找出最小的边，图中选取D作顶点，加入至已选节点，剩下的全部为未选节点，从顶点开始遍历到的边有DA、DB、DE、DF，最小边为DA无异，将A添加至已选节点中，并从未选节点中删去，进入下一步循环。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9lNGY0ZGQwZC1iODczLTQ4OTYtODkwYy02M2YzMGI4YTczYTkucG5n" alt="图7  step2：选取最小边"></p></li><li><p>Step3：遍历到相连的边有DB、DE、DF、AB，最小边为AB，将B添加至已选节点中，并从未选节点中删去，进入下一步循环。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8wMGE5OTY5Ni05NjFjLTQ4YzMtOGI0ZC0zMmQ0MjhiNWZiYWMucG5n" alt="图8  step3：同step2"></p></li><li><p>Step4：遍历到相连的边有DE、DF、BC、BE，最小边为DF，将F添加至已选节点中，并从未选节点中删去，进入下一步循环。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9kMjAxZjZhYS1hYTY5LTQxZDQtOWY3MS0wZWNlNDQ1ZWI1NzUucG5n" alt="图9  step4：同step2"></p></li><li><p>Step5：遍历到相连的边有DE、BC、BE、FG，最小边为BE，将E添加至已选节点中，并从未选节点中删去，进入下一步循环。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9lMDA3NTFkMC02OTc1LTQ1MzItODFkYy01ZjBmNWU3M2M4ZjgucG5n" alt="图10 step5：同step2"></p></li><li><p>Step6：遍历到相连的边有BC、EC、FG、EG，最小边为EC，将C添加至已选节点中，并从未选节点中删去，进入下一步循环。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS80MjgxNDU5MC0xYjM3LTQ1MGMtYTgzOC05Njc4YmI2ZTYxOTYucG5n" alt="图11  step6：同step2"></p></li><li><p>Step7：遍历到相连的边有FG、EG，最小边为EG，将G添加至已选节点中，并从未选节点中删去，此时未选节点列表为空，符合结束条件，程序结束。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS85MjBjYjUxOS03NzkwLTRkMGYtYTM3Mi00ZmE5MzlmOTJhNjcucG5n" alt="图12 step7：当没有未选节点时结束"><br>使用代码实现时，由于<code>prim算法</code>是沿着节点去找边，所以以未选取的节点的数量为限制条件进行搜索，在一个最小生成树结构中，如果有某一个节点与其他任一节点都不存在联系，这个数据就是无效数据，当发现不再有这种数据时，也就是得到了一个完整的最小生成树。程序中，我将<code>i</code>定义为<code>首节点</code>，<code>j</code>定义为<code>尾节点</code>，在已经选取的节点中遍历i，遍历i的同时在预选取节点中遍历j，这样就可以将所有的节点情况一一遍历。而寻找最小的边时，首先通过“<code>if (li[0] == i and li[1] == j) or (li[0] == j and li[1] == i) :</code>”进行判断，如果<code>i</code>节点和<code>j</code>节点相连，就将‘<code>ij</code>’作为<code>key</code>，权值作为<code>value</code>，加入字典<code>edge_weight</code>中，这里巧妙的运用了字典的<code>key</code>是一个字符串的不会乱序的特征，通过<code>lambda</code>表达式进行排序，很容易按照<code>key</code>的索引和权重大小，找到符合条件的——最短的边，以及与之相对应的ij首位节点。这里已选节点和预选节点都使用了列表的格式，所以只要再依次把符合条件的尾节点从预选节点中<code>remove</code>掉，再<code>append</code>至已选节点列表中即可。代码截图如（图13）。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9lMWI1NzY2My0zYTNkLTQ4YjctODUyMy03NTAxNWI2NWRkZDEucG5n" alt="图13  prim算法实现代码截图"></p><h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><p><code>Kruskal算法</code>是对所有的权重进行排序，再次体现贪心算法的思想。通过对权重排序，将权重最小的边开始遍历，直至图中的所有节点都连在同一个树上，此时即为最小生成树。</p></li></ul><p>如以下图例（如图14，同图5）：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS80YTBlYTQ0Ni1hZWJjLTQ4MGUtYWNlYi1iMGNjMTUwYjhiMTMucG5n" alt="图14  kruskal算法原始有权图">)</p><ul><li><p>Step1：遍历所有边，最小边是AD或CE，排序中除权重外还会以ASCII码排序，选AD为最小边，加入到最小生成树中，A、D添加至已选节点，剩下的为未选节点。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8xOWE0ZjdiMy1jYTZhLTRkZDMtOTNkYy03ZGU3NDE0NjdmODEucG5n" alt="图15  step1：选取最小边"></p></li><li><p>Step2：继续遍历剩下的边，CE为最小边，加入到最小生成树中，C、E添加至已选节点，剩下的为未选节点。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9lYzg4OTRmMy00ZDJlLTQ1ZjYtYjRkZi1jODkyMzljOTViMWEucG5n" alt="图16  step2：同step1"></p></li><li><p>Step3：继续遍历剩下的边，符合条件的最小边依次为：DF、AB、BE，加入到最小生成树中，将B、F添加至已选节点，剩下的为未选节点。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9hM2M1MzQzYy0xM2QyLTRmNmEtYjhiMS1iZmRkODRhYTNkMmYucG5n" alt="图17  step3：同step1"></p></li><li><p>Step4：同上，虽然BC比EG更小，但点BC已经通过E点连通，所以添加第二最小边EG，此时所有节点在同一个树中，程序结束。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9lZDcwYmZlMS1jNmNjLTQwZGQtYjY3Mi1kNmNlOWNhZmQ0NzEucG5n" alt="图18  step4：当边的数量达到节点数-1时结束"><br>使用代码实现时，由于kruskal算法是依次遍历最小边，所以以最小生成树的边与总节点数的关系作为约束条件。一开始程序沿用<code>prim算法</code>中将未添加节点作为限制条件，但是很快发现逻辑的疏漏：倘若有<code>A</code>、<code>B</code>、<code>C</code>、<code>D</code>四个节点，按最小边<code>AB</code>和<code>CD</code>添加至最小生成树之后，<code>ABCD</code>四个点并不连通，属于两个树，模型如下图（图19）：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS84MmYyNTE2Ny1lYjg0LTQyODItOWJjNy0zODUzOWQxMjFjM2IucG5n" alt="图19  节点全部已选时图不连通的情况"><br>经过观察，最小生成树的边和节点的数目关系符合“<code>边数 = 节点数 – 1</code>”， 所以以最小生成树的边与总节点数的关系作为约束条件，判断下一条最小边的首尾节点与已选节点的关系。这里由于每次涉及到两个节点、重复节点的添加和去除，所以已选节点和未选节点以集合的形式进行运算，解决了添加节点的重复问题，在从预选节点中去除时，也只需选择在全部节点集合中，而不在已选节点集合中的集合，即“<code>candidate_node = candidate - selected_node</code>”。</p></li></ul><p>判断逻辑如上述，首先选取最小边，判断最小边的首尾节点是否已经被选，如果目标最小边的首尾节点任有一个节点不在已选节点当中，或者都不在已选节点当中，那么可以直接添加该最小边，并将首尾节点去重添加到已选节点集合当中；如果目标最小边的首尾节点均在已选节点当中，并且此时已连接的最小生成树的边数小于已选节点数减一，那么由于首尾节点均在已选节点集合当中，此时只需要将该最小边添加到最小生成树当中即可。代码截图如（图20）。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9iMWNmMjc1Ni0xM2U0LTQxMTYtYjIwMy0xYTAyZTY0YTFhNzYucG5n" alt="图20  kruskal算法实现代码截图"></p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>本程序使用python3.7.3版本进行编程，如有运行报错，请更换python版本为3.7.3或其他适配版本进行测试。</p><p>运行程序后会显示系统名称及作者信息。<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS81NTQwMDAxZi0yMzBhLTRjYjItYjM0Yi1hYWQwMWJhNDk4ODMucG5n" alt="图21  最小生成树系统运行截图"><br>使用示例如下：<br><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9hNTRiNzgzOC0xMzRmLTRiNGQtODM3OC1kNzc3NTA4MTkxYTIucG5n" alt="图24  功能1终端输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9hN2EwMGQ5Ni0xY2Y1LTQ3MGYtOTdjYS1jMjVkOGFjOThjMjYucG5n" alt="图25  功能2图像输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9mOTU0YTY2ZC00OTI0LTRjODUtYThkNC1jMTFhMjk1MWUwNjYucG5n" alt="图26  功能2终端输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS82M2IxNjc4NC02NDg0LTQ0ZGEtYjI5Mi04OGYxYzEzZThiODUucG5n" alt="图27  功能2图像输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS9lNGE5YjIzZC00NDhlLTQ5ODgtYjYwYi0wMGNjYjEzYTBjYWQucG5n" alt="图28  功能3终端输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS84N2ExNzJlNC03ODIwLTRiNzgtOGRhMS1kNDFmYmM4ZTg5ZmIucG5n" alt="图29  功能3图像输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS85Y2ZlYjcyZC0xMDIxLTQyOTQtODgwOS01NmUxZThmNzQ2MWMucG5n" alt="图30  功能4终端输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS8xYzZmMTQ5My00MDYyLTRiM2ItYjc5My0yZjMwZjE3Yzk2YjMucG5n" alt="图31  功能0终端输出示例"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/aHR0cHM6Ly9pbWdrci5jbi1iai51ZmlsZW9zLmNvbS83OWE2MDVjOS03NWQ0LTRmMjktOTMzOS04MzkwMGU5Yjg2YWUucG5n" alt="图32  异常处理功能终端输出示例"></p><h2 id="测试数据及代码"><a href="#测试数据及代码" class="headerlink" title="测试数据及代码"></a>测试数据及代码</h2><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><table><thead><tr><th>首节点</th><th>尾节点</th><th>权重</th></tr></thead><tbody><tr><td>A</td><td>B</td><td>2</td></tr><tr><td>A</td><td>C</td><td>3</td></tr><tr><td>B</td><td>C</td><td>1</td></tr><tr><td>B</td><td>D</td><td>1</td></tr><tr><td>B</td><td>E</td><td>4</td></tr><tr><td>E</td><td>F</td><td>1</td></tr><tr><td>C</td><td>F</td><td>5</td></tr><tr><td>F</td><td>G</td><td>1</td></tr><tr><td>D</td><td>E</td><td>1</td></tr></tbody></table><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">G = nx.Graph()  <span class="comment">#原始有权图</span></span><br><span class="line">P = nx.Graph()  <span class="comment">#画prim生成的最小生成树有权图</span></span><br><span class="line">K = nx.Graph()  <span class="comment">#画Kruskal生成的最小生成树有权图</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nodedict=&#123;&#125;     <span class="comment">#节点的字典集，这里选择字典，既保证了数据不会重复，也可以排序，选择初始顶点，对于选择纠结症的人非常实用</span></span><br><span class="line">edgelist=[]     <span class="comment">#边的列表</span></span><br><span class="line">labels=&#123;&#125;       <span class="comment">#标签，即所有的节点名称，画节点信息时使用</span></span><br><span class="line">edges=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>(<span class="params">fileroute</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileroute,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            l=line.strip().split(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">            l[<span class="number">2</span>] = <span class="built_in">float</span>(l[<span class="number">2</span>])</span><br><span class="line">            edgelist.append(l)</span><br><span class="line">            nodedict[l[<span class="number">0</span>]]=l[<span class="number">0</span>]</span><br><span class="line">            nodedict[l[<span class="number">1</span>]]=l[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 对字典进行排序，以便选取图的顶点，防止选择纠结症，方便绘制节点信息</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(nodedict):</span><br><span class="line">        labels[i]=nodedict[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (nodedict,edgelist,labels)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">origin</span>(<span class="params">fileroute</span>):</span></span><br><span class="line">    <span class="comment"># 从存储图数据的文件中读取数据</span></span><br><span class="line">    <span class="comment"># nodedict=read_file(fileroute)[0]</span></span><br><span class="line">    edgelist=read_file(fileroute)[<span class="number">1</span>]</span><br><span class="line">    labels=read_file(fileroute)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(edgelist)</span></span><br><span class="line">    G.add_weighted_edges_from(edgelist)</span><br><span class="line">    <span class="comment"># 完成图原始数据的读取</span></span><br><span class="line">    edge_labels = nx.get_edge_attributes(G,<span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">    <span class="comment"># 生成节点位置</span></span><br><span class="line">    pos = nx.spring_layout(G)</span><br><span class="line">    <span class="comment"># 把节点画出来</span></span><br><span class="line">    nx.draw_networkx_nodes(G, pos, node_color=<span class="string">&#x27;g&#x27;</span>, node_size=<span class="number">500</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line">    <span class="comment"># 把边画出来</span></span><br><span class="line">    nx.draw_networkx_edges(G, pos, width=<span class="number">1.0</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># # 把节点的标签画出来</span></span><br><span class="line">    nx.draw_networkx_labels(G, pos, labels, font_size=<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># # 把边权重画出来</span></span><br><span class="line">    nx.draw_networkx_edge_labels(G, pos, edge_labels)</span><br><span class="line">    plt.title(<span class="string">&quot;origin&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">实现prim算法的函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim_tree</span>(<span class="params">fileroute</span>):</span></span><br><span class="line">    <span class="comment"># 从存储图数据的文件中读取数据</span></span><br><span class="line">    nodedict = read_file(fileroute)[<span class="number">0</span>]</span><br><span class="line">    edgelist = read_file(fileroute)[<span class="number">1</span>]</span><br><span class="line">    labels = read_file(fileroute)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    res=[]                  <span class="comment"># 使用prim算法时最小生成树的边列表</span></span><br><span class="line"></span><br><span class="line">    prim_candidate_node=[]       <span class="comment"># 预选节点</span></span><br><span class="line">    prim_selected_node=[]        <span class="comment"># 已选节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> labels:          <span class="comment"># 初始时，所有节点均为预选节点</span></span><br><span class="line">        prim_candidate_node.append(key)</span><br><span class="line"></span><br><span class="line">    prim_selected_node.append(prim_candidate_node[<span class="number">0</span>])</span><br><span class="line">    prim_candidate_node.remove(prim_selected_node[<span class="number">0</span>])</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        实现prim算法的逻辑代码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(prim_candidate_node) &gt; <span class="number">0</span> :       <span class="comment"># prim算法是沿着节点去找边，所以已未选取的节点为限制条件进行搜索</span></span><br><span class="line">        edge_weight=&#123;&#125;</span><br><span class="line">        beginnode=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        endnode=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        weight=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> prim_selected_node:        <span class="comment"># 将i定义为首节点</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> prim_candidate_node:   <span class="comment"># 将j定义为尾节点</span></span><br><span class="line">                <span class="keyword">for</span> li <span class="keyword">in</span> edgelist:</span><br><span class="line">                    <span class="keyword">if</span> (li[<span class="number">0</span>] == i <span class="keyword">and</span> li[<span class="number">1</span>] == j) <span class="keyword">or</span> (li[<span class="number">0</span>] == j <span class="keyword">and</span> li[<span class="number">1</span>] == i) :</span><br><span class="line">                        <span class="comment"># 如果i节点和j节点相连，就将‘ij’作为key，权值作为value，加入字典edge_weight中</span></span><br><span class="line">                        edge_weight[i+j]=li[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(edge_weight.items(),key=<span class="keyword">lambda</span> kv:(kv[<span class="number">1</span>], kv[<span class="number">0</span>])):</span><br><span class="line">            <span class="comment"># 将edge_weight字典从小到大排序，第一个值是最小值，根据key的ij排列顺序，很容易判断出首尾节点</span></span><br><span class="line">            endnode=key[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">            weight=<span class="built_in">float</span>(key[<span class="number">1</span>])</span><br><span class="line">            beginnode=key[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        res.append([beginnode,endnode,weight])  <span class="comment"># 然后将选取的最小权值的边加入到最小生成树中即可</span></span><br><span class="line">        prim_selected_node.append(endnode)</span><br><span class="line">        prim_candidate_node.remove(endnode)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    P.add_weighted_edges_from(res)</span><br><span class="line">    edge_labels = nx.get_edge_attributes(P, <span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">    <span class="comment"># 生成节点位置</span></span><br><span class="line">    pos = nx.spring_layout(P)</span><br><span class="line">    <span class="comment"># 把节点画出来</span></span><br><span class="line">    nx.draw_networkx_nodes(P, pos, node_color=<span class="string">&#x27;g&#x27;</span>, node_size=<span class="number">500</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line">    <span class="comment"># 把边画出来</span></span><br><span class="line">    nx.draw_networkx_edges(P, pos, width=<span class="number">1.0</span>, alpha=<span class="number">0.5</span>, edge_color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="comment"># 把节点的标签画出来</span></span><br><span class="line">    nx.draw_networkx_labels(P, pos, labels, font_size=<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 把边权重画出来</span></span><br><span class="line">    nx.draw_networkx_edge_labels(P, pos, edge_labels)</span><br><span class="line">    plt.title(<span class="string">&quot;prim&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">实现kruskal算法的函数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kruskal_tree</span>(<span class="params">fileroute</span>):</span></span><br><span class="line">    edgelist = read_file(fileroute)[<span class="number">1</span>]</span><br><span class="line">    labels = read_file(fileroute)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    nodenum = <span class="built_in">len</span>(labels)       <span class="comment"># 节点数</span></span><br><span class="line"></span><br><span class="line">    candidate = <span class="built_in">set</span>()           <span class="comment"># 全部节点</span></span><br><span class="line">    selected_node = <span class="built_in">set</span>()       <span class="comment"># 已选节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> labels:</span><br><span class="line">        candidate.add(key)</span><br><span class="line"></span><br><span class="line">    candidate_node = <span class="built_in">set</span>(candidate) <span class="comment"># 预选节点，这里设置预选节点，方便之后去重判断</span></span><br><span class="line"></span><br><span class="line">    edgesorted = <span class="built_in">sorted</span>(edgelist, key=<span class="keyword">lambda</span> weight: weight[<span class="number">2</span>])     <span class="comment"># 按照权值对所有边进行排序，体现贪心算法思想</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        实现kruskal算法的逻辑代码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    edge_node = &#123;&#125;</span><br><span class="line">    edgelist_chosed = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(edgelist_chosed) &lt; nodenum - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> edgesorted:</span><br><span class="line">            <span class="keyword">if</span> li[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> selected_node <span class="keyword">or</span> li[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> selected_node:</span><br><span class="line">                edgelist_chosed.append(li)</span><br><span class="line">                selected_node.add(li[<span class="number">0</span>])</span><br><span class="line">                selected_node.add(li[<span class="number">1</span>])</span><br><span class="line">                candidate_node = candidate - selected_node</span><br><span class="line">            <span class="keyword">elif</span> li[<span class="number">0</span>] <span class="keyword">in</span> selected_node <span class="keyword">and</span> li[<span class="number">1</span>] <span class="keyword">in</span> selected_node <span class="keyword">and</span> <span class="built_in">len</span>(edgelist_chosed) &lt; <span class="built_in">len</span>(selected_node) - <span class="number">1</span>:</span><br><span class="line">                edgelist_chosed.append(li)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(edgelist_chosed)</span><br><span class="line">    K.add_weighted_edges_from(edgelist_chosed)</span><br><span class="line">    edge_labels = nx.get_edge_attributes(K, <span class="string">&#x27;weight&#x27;</span>)</span><br><span class="line">    <span class="comment"># 生成节点位置</span></span><br><span class="line">    pos = nx.spring_layout(K)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把节点画出来</span></span><br><span class="line">    nx.draw_networkx_nodes(K, pos, node_color=<span class="string">&#x27;g&#x27;</span>, node_size=<span class="number">500</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把边画出来</span></span><br><span class="line">    nx.draw_networkx_edges(K, pos, width=<span class="number">1.0</span>, alpha=<span class="number">0.5</span>, edge_color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 把节点的标签画出来</span></span><br><span class="line">    nx.draw_networkx_labels(K, pos, labels, font_size=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 把边权重画出来</span></span><br><span class="line">    nx.draw_networkx_edge_labels(K, pos, edge_labels)</span><br><span class="line">    plt.title(<span class="string">&quot;kruskal&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    请选择相应功能模块：</span></span><br><span class="line"><span class="string">    1: 生成原始关系图</span></span><br><span class="line"><span class="string">    2：查看prim算法演示</span></span><br><span class="line"><span class="string">    3：查看kruskal算法演示</span></span><br><span class="line"><span class="string">    4: 更改源文件</span></span><br><span class="line"><span class="string">    0：退出此次运行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filein</span>():</span></span><br><span class="line">    fileroute = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> flag:</span><br><span class="line">        fileroute = <span class="built_in">input</span>(<span class="string">&#x27;请输入正确的图数据的完整路径：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(fileroute):</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> fileroute</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----Python实现最小生成树的两种方式----&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----作者：Mxdon----&quot;</span>)</span><br><span class="line">    fileroute=filein()</span><br><span class="line">    menu()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            chose = <span class="built_in">input</span>(<span class="string">&quot;您的输入是数字：&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> chose==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;原始有权图已绘制&quot;</span>)</span><br><span class="line">                origin(fileroute)</span><br><span class="line">                menu()</span><br><span class="line">            <span class="keyword">elif</span> chose==<span class="string">&quot;2&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;prim算法时的最小生成树的图已绘制&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;---prim算法最小生成树边数据如下：---&quot;</span>)</span><br><span class="line">                prim_tree(fileroute)</span><br><span class="line">                menu()</span><br><span class="line">            <span class="keyword">elif</span> chose==<span class="string">&quot;3&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;kruskal算法时的最小生成树的图已绘制&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;---kruskal算法最小生成树边数据如下：---&quot;</span>)</span><br><span class="line">                kruskal_tree(fileroute)</span><br><span class="line">                menu()</span><br><span class="line">            <span class="keyword">elif</span> chose==<span class="string">&quot;4&quot;</span>:</span><br><span class="line">                fileroute = filein()</span><br><span class="line">                menu()</span><br><span class="line">            <span class="keyword">elif</span> chose==<span class="string">&quot;0&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;---再见---&quot;</span>)</span><br><span class="line">                sys.exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;无此选项&quot;</span>)</span><br><span class="line">                menu()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\033[31m请检查文件内容是否符合“节点-节点-权重”的格式!\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.jianshu.com/p/cf21443b3838">数据结构（十）：最小生成树</a><br><a href="https://blog.csdn.net/mashijia986/article/details/79100925">python最小生成树kruskal与prim算法</a><br><a href="https://blog.csdn.net/a2392008643/article/details/81781766">最小生成树的两种方法（Kruskal算法和Prim算法）</a><br><a href="https://www.cnblogs.com/biyeymyhjob/archive/2012/07/30/2615542.html">最小生成树-Prim算法和Kruskal算法</a><br><a href="https://blog.csdn.net/qq_31196849/article/details/78529724">数据结构基础概念篇</a><br><a href="https://blog.csdn.net/yeyazhishang/article/details/82353846#8%E5%9B%BE">数据结构：八大数据结构分类</a><br><a href="https://www.icourse163.org/learn/PKU-1206307812?tid=1206626211#/learn/content?type=detail&id=1212763078&cid=1216399015&replay=true">数据结构与算法Python版-陈斌</a><br><a href="https://www.cnblogs.com/wushaogui/p/9239959.html">NetworkX系列教程(10)-算法之二:最小/大生成树问题</a><br><a href="https://www.runoob.com/python3/python3-tutorial.html">Python 3 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形化 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu19.10使用Qemu安装树莓派</title>
      <link href="/2020/Ubuntu19.10%E4%BD%BF%E7%94%A8Qemu%E5%AE%89%E8%A3%85%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
      <url>/2020/Ubuntu19.10%E4%BD%BF%E7%94%A8Qemu%E5%AE%89%E8%A3%85%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu19-10使用Qemu安装树莓派"><a href="#Ubuntu19-10使用Qemu安装树莓派" class="headerlink" title="Ubuntu19.10使用Qemu安装树莓派"></a>Ubuntu19.10使用Qemu安装树莓派</h1><blockquote><p>之前一直是在Windows下鼓捣虚拟机，这次试试qemu</p></blockquote><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装qemu"><a href="#安装qemu" class="headerlink" title="安装qemu"></a>安装qemu</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/mxdon/img/raw/master/img/ac90e76e-456d-468b-a0d9-1ceba4b51e93.png"></p><h3 id="安装树莓派"><a href="#安装树莓派" class="headerlink" title="安装树莓派"></a>安装树莓派</h3><p>在github上找到相应版本的内核和设备树文件。<br><img src="https://gitee.com/mxdon/img/raw/master/img/9daa7d40-b017-45ea-a4c6-ef36585853bf.png"><br>先创建一个项目目录，把镜像文件、设备树文件，和内核文件都放进去<br><img src="https://gitee.com/mxdon/img/raw/master/img/f60a70ac-1dbd-4bda-8477-0262cb5fa05f.png"><br>然后<code>fdisk -l 2020-02-13-raspbian-buster.img</code>查看硬盘实体使用情况<br><img src="https://gitee.com/mxdon/img/raw/master/img/c645d24a-54c2-48e9-9832-fb1b057b0e13.png"><br>将<code>img2</code>的起点地址乘以单元扇区大小，得到镜像应该挂载的偏移量。<br><img src="https://gitee.com/mxdon/img/raw/master/img/bf603b12-b393-48af-a1bb-d6c6fa81c760.png"><br><code>sudo mount -v -o offset=272629760 -t ext4 ~/qemu_raspi/2020-02-13-raspbian-buster.img /mnt/raspbian</code>其中的<code>/mnt/raspbian</code>文件夹要提前建好<br><img src="https://gitee.com/mxdon/img/raw/master/img/f2b268bc-9d61-48e9-bb91-666fb14e9176.png"><br>接下来编辑<code>/mnt/raspbian/ld.so.preload</code>文件，将其中的内容注释（行首加“#”注释），然后使用umount卸载已经加载的文件系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /mnt/raspbian</span><br></pre></td></tr></table></figure><p>然后执行模拟树莓派的命令，参考github上的说明：<br><img src="https://gitee.com/mxdon/img/raw/master/img/a1d75ece-522a-4e83-a2a7-f45f72ba4682.png"><br>修改相关参数，最终命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -kernel ~/qemu_raspi/kernel-qemu-4.19.50-buster -cpu arm1176 -m 256 -M versatilepb -serial stdio -append &quot;root=/dev/sda2 rootfstype=ext4 rw&quot; -hda ~/qemu_raspi/2020-02-13-raspbian-buster.img -redir tcp:5022::22 -no-reboot</span><br></pre></td></tr></table></figure><p>其中参数可以通过使用<code>qemu-system-arm -help | grep &quot;\-参数&quot;</code>的命令形式，查看命令的相关介绍：<br><img src="https://gitee.com/mxdon/img/raw/master/img/7541d2b2-d89f-4c2e-847d-e289a8778e84.png"></p><blockquote><ul><li>-M：设定模拟的开发板类型. versatilepb 是 ARM Versatile Platform Board<ul><li>-cpu：select CPU (‘-cpu help’ for list)——指定cpu类型，模拟ARM1176 CPU. Raspberry Pi 板上搭载了 Broadcom BCM2835, 这个处理器用的是ARM1176JZ-F.</li><li>-m：[size=]megs[,slots=n,maxmem=size]——RAM的大小是256MB. 设定成比256MB大的值板子好像不能启动.</li><li>-drive：[file=file][,if=type][,bus=n][,unit=m][,media=d][,index=i]——指定要制作文件、输入类型、……</li><li>-net：[user|tap|bridge|socket][,option][,option][,…](use the -netdev option if possible instead)——大概是网络连接的一些参数</li><li>-dtb：file    use ‘file’ as device tree image——是镜像文件解压出来有的一些文件，叫设备树引导文件，与内核文件共同编译成支持qemu启动的内核</li><li>-kernel：bzImage use ‘bzImage’ as kernel image——内核</li><li>-serial stdio——重定向Guest 的串口到Host的标准输入输出.</li><li>-append：cmdline use ‘cmdline’ as kernel command line——使用“ cmdline”作为内核命令行</li></ul></li></ul></blockquote><p>然后便开始启动树莓派：<br><img src="https://gitee.com/mxdon/img/raw/master/img/7a95fa3b-0c69-4323-be09-48241748af15.png"><br>这一步我还以为是创建用户，想了一大会密码，<br><img src="https://gitee.com/mxdon/img/raw/master/img/4abfdaa8-cfc9-4089-9642-4a05fd2eabc8.png"><br>结果用户密码是固定的：用户名: pi, 密码: raspberry<br><img src="https://gitee.com/mxdon/img/raw/master/img/67879246-8605-4fea-9af4-877b50ad2183.png"><br>终于登录成功了。</p><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><p>上面可以看到是没有图形化界面的，但是运行最开始时有写vnc的相关信息，所以再装一下vnc viewer<br><img src="https://gitee.com/mxdon/img/raw/master/img/0b4efa23-fe41-4c69-9bc3-b29b8d76f926.png"><br>官网下载即可。<br><img src="https://gitee.com/mxdon/img/raw/master/img/7413d847-95ac-45bf-b502-f4ddacda836a.png"><br>安装<br><img src="https://gitee.com/mxdon/img/raw/master/img/1de786a3-cfb1-47dd-b0a6-b4b7ad2d8275.png"><br>软件自动显示了5900端口的树莓派<br><img src="https://gitee.com/mxdon/img/raw/master/img/97206bcb-68bb-42fa-986d-ed95279ddcff.png"><br>但是还是没有图形界面显示<br><img src="https://gitee.com/mxdon/img/raw/master/img/b69cce76-d4e4-428a-bbf9-921d0c02fd54.png"><br>参考其中的日志<br><img src="https://gitee.com/mxdon/img/raw/master/img/e40bd7e6-14cf-4ed4-9fc6-64056b5c6d43.png"><br>经过排查，是内核文件不匹配造成的，这一点在提供内核的github界面也有说明，万能设备树文件支持的是<code>stretch</code>系列的树莓派<br><img src="https://gitee.com/mxdon/img/raw/master/img/61d8a762-fdc0-43cf-abec-3fe18b35ce10.png"><br>所以更换镜像为：<code>2018-06-27-raspbian-stretch.img</code>，内核更改为：<code>kernel-qemu-4.14.79-stretch</code>，重新按照之前的步骤重复即可。最终打开图形界面：<br><img src="https://gitee.com/mxdon/img/raw/master/img/81ae7a84-4328-419b-913a-f113625b7422.png"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>树莓派——清华开源软件镜像站：<code>https://mirrors.tuna.tsinghua.edu.cn/raspbian-images/raspbian/images/</code></p><p>树莓派——树莓派实验室（好像是官网）：<code>https://shumeipai.nxez.com/download#os</code></p><p>vncviewer：<code>https://www.realvnc.com/en/connect/download/viewer/</code></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/yalecaltech/article/details/90524245">QEMU搭建树莓派环境</a><br><a href="https://blog.csdn.net/talkxin/article/details/79505826">使用qemu虚拟机运行树莓派(linux kernel 4.9)</a><br><a href="https://blog.csdn.net/weixin_30256505/article/details/101739642">Windows中使用QEMU创建树莓派虚拟机</a><br><a href="https://www.linuxidc.com/Linux/2014-08/105511.htm">用QEMU模拟树莓派Raspberry Pi的方法</a><br><a href="https://github.com/dhruvvyas90/qemu-rpi-kernel">qemu-rpi-kernel</a><br><a href="https://azeria-labs.com/emulate-raspberry-pi-with-qemu/">RASPBERRY PI ON QEMU</a><br><a href="https://www.cnblogs.com/penny772866/p/5927796.html">ubuntu下使用vnc viewer</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> Qemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用树莓派搭建wordpress博客网站</title>
      <link href="/2020/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2020/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="使用树莓派搭建wordpress博客网站"><a href="#使用树莓派搭建wordpress博客网站" class="headerlink" title="使用树莓派搭建wordpress博客网站"></a>使用树莓派搭建wordpress博客网站</h1><h2 id="下载wordpress"><a href="#下载wordpress" class="headerlink" title="下载wordpress"></a>下载wordpress</h2><p>下载地址：<code>https://wordpress.org/</code></p><span id="more"></span><p><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/46f1b7ce-9f21-444b-b252-ec0892dd70d8.png"></p><h2 id="安装树莓派"><a href="#安装树莓派" class="headerlink" title="安装树莓派"></a>安装树莓派</h2><p>详情参考《这篇文章》</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>由于虚拟机出现了点问题——无法设置共享文件夹——<code>virtualbox</code>中，文件权限修改的时候总会报错“<code>read only file system</code>”，尝试了重新挂载等诸多方法未果，改到<code>Windows</code>下使用<code>VMware</code>，结果安装<code>VMwaretools</code>的选项呈灰色，无法点击，也是没能解决（最近没能解决的事情也太多了……）</p></blockquote><p>但是作业还是要交的，只能暂时放弃修复，选择使用网盘传输（奶牛快传）（可气的是共享粘贴板也没办法正常使用……）：</p><p><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/3b4c819a-8183-4e49-b79a-d75eb2fabcc2.png"><br>只好手动输入网址：</p><p><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/ff160488-6d22-4a2a-a586-26627bfe9073.png"></p><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装<code>php</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php</span><br></pre></td></tr></table></figure><p>默认安装的版本是<code>7.3</code><br>可用<code>php -v</code>查看</p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装<code>mysql</code></h3><p>常规思路也还是不行（疯了，树莓派使我处处碰壁），经过一番查证，应该安装<code>mysql</code>的升级版——<code>mariadb</code>，安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mariadb-server</span><br></pre></td></tr></table></figure><p>默认情况下MariaDB安装好后都没有配置访问用户的密码，因此如果需要远程连接时会无法连接。因此需要先对root用户设置密码。首先透过上一步中的命令连接至MariaDB，输入如下语句进行密码的修改:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">UPDATE user SET password=password(&#x27;你的密码&#x27;) WHERE user=&#x27;root&#x27;;</span><br><span class="line">UPDATE user SET plugin=&#x27;mysql_native_password&#x27; WHERE user = &#x27;root&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mariadb</span><br></pre></td></tr></table></figure><p>重启完成后，试用密码进行mariadb登录，验证是否修改成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h3 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a>安装apache</h3><p>自带啦，不用安装啦</p><h2 id="配置wordpress"><a href="#配置wordpress" class="headerlink" title="配置wordpress"></a>配置wordpress</h2><p>将<code>wordpress</code>解压到<code>/var/www/</code>的目录下，名字随意，这里我的文件夹叫做<code>blog</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip wordpress.zip</span><br></pre></td></tr></table></figure><p>访问<code>localhost</code>，显示如下：<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/19d506c3-cf88-48c7-a589-14a9ebf75185.png"></p><p>更改<code>apache</code>的首页定向,要不然访问<code>localhost</code>的时候自动就是<code>/var/www/</code>文件夹下默认的<code>html</code>文件夹及其下面的<code>index.html</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apache2/sites-available/000-default.conf</span><br></pre></td></tr></table></figure><p><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/fd161472-ea7c-4638-bcb6-9d25b722b4ab.png"><br>然后又报没有<code>MySQL</code>扩展的错误<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/8aee8efa-51a5-4abd-9a3f-d529469fe89d.png"><br>安装扩展解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php-mysql</span><br></pre></td></tr></table></figure><p>然后又报错：建立数据库连接出错<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/c74c9e22-024f-4745-b9aa-210fb1278562.png"><br>经查询，是因为数据库的配置和连接问题。<br>打开数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">连接数据库</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">创建wordpress数据库</span><br><span class="line">create database wordpress;</span><br><span class="line"></span><br><span class="line">创建名叫wordpress的用户，密码是root（可自行修改）</span><br><span class="line">grant all on wordpress.* to wordpress@&#x27;localhost&#x27; identified by &#x27;root&#x27;;</span><br><span class="line"></span><br><span class="line">刷新更改</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>这样数据库就建立完了，接下来是与<code>wordpress</code>进行链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">把配置文件&#x27;wp-config-sample.php&#x27;的名字改成&#x27;wp-config.php&#x27;</span><br><span class="line">sudo mv wp-config-sample.php wp-config.php</span><br><span class="line"></span><br><span class="line">编辑配置文件</span><br><span class="line">sudo nano wp-config.php</span><br></pre></td></tr></table></figure><p>将数据库的相关信息，一一对应修改掉：<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/19cc7f6b-7115-4075-9bc6-97abef24924f.png"></p><p>然后再访问<code>localhost/blog/index.php</code>即可开始配置<code>wordpress</code><br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/30a69add-e0c2-4de5-a3eb-697752dd5940.png"><br>部分设置如图：然后点击下方的安装即可。<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/bc7e6993-72a9-4a86-aef6-c472a85b1967.png"><br>然后登录<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/6390f0cf-5828-4ca2-8e8b-f8b05f759e35.png"><br>试写一篇并发布：<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/3d5f2fc7-0d53-421d-8262-4c90871eeaa7.png"><br>最终效果：<br><img src="/images/%E4%BD%BF%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/ceebb4eb-a3e1-4f38-b759-6fde31795529.png"></p><p>锵锵~计网作业完事啦</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://codex.wordpress.org.cn/WordPress%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B#.E8.91.97.E5.90.8D.E7.9A.845.E5.88.86.E9.92.9F.E5.AE.89.E8.A3.85.E6.AD.A5.E9.AA.A4">WordPress的安装过程</a><br><a href="https://blog.csdn.net/sitebus/article/details/97435428">Ubuntu下安装PHP</a><br><a href="https://www.cnblogs.com/bluewelkin/p/3808226.html">Linux下安装配置MySQL+Apache+PHP+WordPress的详细笔记</a><br><a href="https://blog.csdn.net/danmaidesenling/article/details/51280273">Linux上安装 wordpress（apache，php，mysql）</a><br><a href="https://www.cnblogs.com/ftl1012/p/9302206.html">Linux 下Wordpress博客搭建</a><br><a href="https://blog.csdn.net/armcsdn/article/details/100481814">关于在树莓派上不能安装MySql</a><br><a href="https://www.wpdaxue.com/error-establishing-a-database-connection.html">解决WordPress建立数据库连接时出错</a><br><a href="https://www.cnblogs.com/x_wukong/p/5859882.html">您的 PHP 似乎没有安装运行 WordPress 所必需的 MySQL 扩展”处理方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 网站搭建 </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透软件推荐</title>
      <link href="/2020/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2020/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><blockquote><p> 上一篇介绍了内网穿透的过程，这一篇推荐一下内网穿透的工具(<strong>需要看结果的直接滑到最后吧</strong>)：</p></blockquote><h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p>链接：<code>https://hsk.oray.com/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210110004739378.png" alt="花生壳"></p><p><strong>简评</strong></p><p><strong>花生壳</strong>应该算是业界大佬，平常大家使用的<strong>向日葵远程控制软件</strong>就是该公司的产品</p><ul><li>优点：信誉保障，教程完善，界面美观，有免费套餐两条映射，<strong>支持在网站查看远程端口</strong></li><li>缺点：免费套餐<strong>限流量</strong>，需要实名认证，支持架构少</li></ul><h2 id="cpolar"><a href="#cpolar" class="headerlink" title="cpolar"></a>cpolar</h2><p>链接：<a href="https://www.cpolar.com/">https://www.cpolar.com/</a></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210110004512119.png" alt="cpolar"></p><p><strong>简评</strong></p><ul><li>优点： 有免费套餐，<strong>不限流量</strong>，不需要手机号注册，支持架构多，使用简单，界面简洁，<strong>支持在网站查看远程端口</strong></li><li>缺点：网站指引不太明确</li></ul><h2 id="natapp"><a href="#natapp" class="headerlink" title="natapp"></a>natapp</h2><p>链接：<code>http://www.neiwangchuantou.cn/archives/234.html</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210110004155946.png" alt="natapp"></p><p><strong>简评</strong></p><ul><li>优点：界面简洁，有免费套餐，<strong>不限流量</strong>，支持架构多，文档完整</li><li>缺点：需要实名认证</li></ul><h2 id="网云穿"><a href="#网云穿" class="headerlink" title="网云穿"></a>网云穿</h2><p>链接：<code>https://www.xiaomy.net/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210110000624334.png" alt="网云穿"></p><p><strong>简评</strong></p><ul><li>优点：网站界面清晰明了，有免费套餐</li><li>缺点：手机号注册，免费套餐<strong>限流量</strong>，支持架构不多</li></ul><h2 id="行云管家"><a href="#行云管家" class="headerlink" title="行云管家"></a>行云管家</h2><p>链接：<code>https://www.cloudbility.com/default.html</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109221903903.png" alt="行云管家"></p><p><strong>简评</strong></p><ul><li>优点：界面清爽</li><li>缺点：需要手机号注册，<strong>无免费套餐</strong></li></ul><h2 id="nat123"><a href="#nat123" class="headerlink" title="nat123"></a>nat123</h2><p>链接：<code>http://nat123.com/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109221344863.png" alt="nat123"></p><p><strong>简评</strong></p><ul><li>优点：信誉保障，支持架构多，教程完善，有免费套餐，不需要手机号注册</li><li>缺点：界面不太美观，需要实名</li></ul><h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2><p>链接：<code>http://www.ngrok.cc/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109220716701.png" alt="ngrok"></p><p>链接：<code>https://ngrok.com/download</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109220511410.png" alt="ngrok"></p><p><strong>简评</strong></p><ul><li><p>优点：第一种有免费套餐，支持架构多，<strong>不限流量</strong>，<strong>国外网站不需要手机号注册</strong>，</p><p>第二种有免费套餐，<strong>不限流量</strong>，不需要手机号注册，<strong>端口不会变</strong></p></li><li><p>缺点：<del>第一种对英文不够用的同学不太友好</del>，</p></li></ul><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>链接：<code>http://www.chuantou.org/</code></p><p>开源地址：<code>https://github.com/fatedier/frp</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109215409574.png" alt="frp"></p><p>链接：<code>https://www.natfrp.com/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109215545561.png" alt="frp"></p><p><strong>简评</strong></p><ul><li><p>优点：第一种开源，维护多，自持自定义，<strong>完全免费</strong>，<strong>无需注册</strong>；</p><p>第二种有免费套餐，五条映射线路，不需要手机号注册，自带更新程序，支持架构多，可以刷路由器；</p></li><li><p>缺点：第一种使用不便；</p><p>第二种<strong>限流量</strong>，教程有点乱</p></li></ul><h2 id="神卓"><a href="#神卓" class="headerlink" title="神卓"></a>神卓</h2><p>链接：<code>https://www.shenzhuohl.com/index.html</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109215038546.png" alt="神卓"></p><p><strong>简评</strong></p><ul><li>优点：有免费套餐，<strong>不限流量</strong></li><li>缺点：免费套餐<strong>仅一条映射</strong>，手机号注册，网站界面相对较花</li></ul><h2 id="飞鸽"><a href="#飞鸽" class="headerlink" title="飞鸽"></a>飞鸽</h2><p>链接：<code>https://www.fgnwct.com/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109214713118.png" alt="飞鸽"></p><p><strong>简评</strong></p><ul><li>优点：有免费套餐，网站界面简洁，支持<code>Mips</code>、群辉等架构，可以刷路由器，注册不需要手机号</li><li>缺点：免费套餐<strong>限流量</strong></li></ul><h2 id="闪库"><a href="#闪库" class="headerlink" title="闪库"></a>闪库</h2><p>链接：<code>http://www.ipyingshe.com/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109214234709.png" alt="闪库"></p><p><strong>简评</strong></p><ul><li>优点：界面做的好看</li><li>缺点：注册需要客户端，没有使用教程，版本架构支持的少，<strong>文件偏大</strong></li></ul><h2 id="魔法隧道"><a href="#魔法隧道" class="headerlink" title="魔法隧道"></a>魔法隧道</h2><p>链接：<code>http://www.mofasuidao.cn/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109214103290.png" alt="魔法隧道"></p><p><strong>简评</strong></p><p>貌似没有免费的套餐，软件也四年没更新了，需要手机号注册，支持架构少</p><h2 id="go-intranet-forward"><a href="#go-intranet-forward" class="headerlink" title="go-intranet-forward"></a>go-intranet-forward</h2><p>链接：<code>https://gitlab.com/king011/go-intranet-forward</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109213201092.png" alt="go-intranet-forward"></p><p><strong>简评</strong></p><ul><li>优点：代码开源，可以自己修改，服务器也支持自定义，不用注册帐号</li><li>缺点：需要自己配置<code>Golang</code>环境，已经不维护了，想白嫖公网的就算了吧</li></ul><h2 id="ZeroTier"><a href="#ZeroTier" class="headerlink" title="ZeroTier"></a>ZeroTier</h2><p>链接：<code>https://www.zerotier.com/</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210110004937226.png" alt="ZeroTier"></p><p><strong>简评</strong></p><ul><li>优点：有免费套餐，<strong>国外公网不限流量</strong>，支持架构多，不需要手机号注册</li><li>缺点：<del>对英文不够用的同学不太友好</del></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>个人推荐：<code>cpolar</code> &gt; <code>ngrok</code> &gt; <code>神卓</code> &gt; <code>natapp</code> &gt; <code>frp</code> &gt;  <code>网云穿</code> &gt; <code>ZeroTier</code></p><p>因为上述的基本都免流量，这才是使用最舒服的点，至于钞能力用户：</p><p>个人推荐：<code>花生壳</code> &gt; <code>网云穿</code> &gt; <code>行云管家</code> &gt; <code>nat123</code> &gt; <code>其他</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派入门--在Linux下搭建开发环境</title>
      <link href="/2020/%E6%A0%91%E8%8E%93%E6%B4%BE-01/"/>
      <url>/2020/%E6%A0%91%E8%8E%93%E6%B4%BE-01/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派入门–在Linux下搭建开发环境"><a href="#树莓派入门–在Linux下搭建开发环境" class="headerlink" title="树莓派入门–在Linux下搭建开发环境"></a>树莓派入门–在Linux下搭建开发环境</h1><p>[toc]</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>由于网上绝大多数教程应该都是在Windows在如何烧写系统之类的，而我身为一个Linux用户（已经爱上Linux），就为Linux下的使用增添加瓦吧~（其实是因为我之前白嫖的内网穿透开始莫名其妙不给我用了，可能是嫖太多了emmmm，考虑到白嫖工具的网速之类问题，顺手就自己搭一个内网穿透环境吧（见下篇））</p><p>系统：Ubuntu20.10</p><p>架构：X64</p><p>材料：64G- TF卡一张、读卡器一个、树莓派4B 4G板卡一个</p><h1 id="TF卡制作"><a href="#TF卡制作" class="headerlink" title="TF卡制作"></a>TF卡制作</h1><p>其实和Windows下的区别，无非就是制作系统的步骤不一样、ssh的步骤不一样~（好像也就这两步哈？）</p><h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><p>Ubuntu生态较为完备，一般可以直接使用<strong>磁盘工具</strong>进行设置：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417104933418.png" alt="需要的话一开始可能还要格式化磁盘(推荐GPT或者不分区)"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417104957624.png" alt="卷名随便起就好啦"></p><p>如果没有这样的软件，当然用命令行都可以做到呀：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb#sdb表示你的TF卡</span><br><span class="line">g#创建gpt磁盘</span><br><span class="line">n#创建分区</span><br><span class="line">默认   #起始扇区，考虑分区对齐，所以从2048开始</span><br><span class="line">默认   #结束扇区，用于将整个TF卡格式化</span><br><span class="line">t#改变分区类型</span><br><span class="line">C12A7328-F81F-11D2-BA4B-00A0C93EC93B#FAT的格式类型（EFI其实就是FAT）</span><br><span class="line">w</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417141850479.png" alt="操作过程"></p><p>上面EFI其实就是FAT类型的，这是由UEFI只支持FAT文件系统去承载EFI文件</p><p>如果不放心的话（强迫症<del>是我</del>）可以使用mkfs.vfat进行转换(.vfat就是fat的名字加强版，区别不打（vfat支持长文件名）)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.vfat /dev/sdb</span><br></pre></td></tr></table></figure><p>经过上面的分区操作，现在已经可以把系统写入到TF卡了！</p><h2 id="下载系统"><a href="#下载系统" class="headerlink" title="下载系统"></a>下载系统</h2><p>树莓派的官方系统在：<a href="https://www.raspberrypi.org/software/operating-systems/">https://www.raspberrypi.org/software/operating-systems/</a></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417105359710.png" alt="谷歌翻译后的说明文字"></p><p>在国内的话其实有很多镜像网站非常好用，比如清华源：<a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/">https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/</a></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417110401792.png" alt="清华软件源"></p><p>1、2、3分别代表标准版、完整版、轻量版，其他见名知意，我选择了完整版最新的文件下载</p><h2 id="制作系统盘"><a href="#制作系统盘" class="headerlink" title="制作系统盘"></a>制作系统盘</h2><p>解压：下载的镜像是zip文件，所以要解压在linux下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip 2020-02-13-raspbian-buster-full.zip -d ./#-d后面的路径是解压路径，./就是解压在当前路径</span><br></pre></td></tr></table></figure><p>然后写入TF卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd bs=4M if=2020-02-13-raspbian-buster-full.img of=/dev/sdb</span><br></pre></td></tr></table></figure><p>bs=4M代表blokesize一次写入的大小，大部分系统是支持的，如果不放心可以改成1M，就是烧录慢一点而已</p><p>if代表in_file</p><p>of代表out_file</p><p>照着抄就行啦</p><p>然后烧录完的TF卡如下：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417143521421.png" alt="和Linux下的分区很像嘛，毕竟树莓派系统也是Linux"></p><p>然后就开始插到板子里了</p><h1 id="上电、连线、开机"><a href="#上电、连线、开机" class="headerlink" title="上电、连线、开机"></a>上电、连线、开机</h1><ol><li>由于<del>没钱</del>没有准备相应的HDMI线、键盘等工具，所以只是个裸板，为了能够直接通过网络操作我的树莓派，所以要先在上面写完的TF卡中，打开其中的boot文件夹，在里面新建一个ssh文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /media/boot/ssh</span><br></pre></td></tr></table></figure><ol start="2"><li>然后连接网线和电源线，其中电源线就用常规的手机充电器就行</li></ol><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417152631452.png" alt="树莓派平面图"></p><p>其中1、2、3分别插入TF卡、手机充电器、网线</p><p>对于一个裸机，这写就足够了，如果没有网线的话，也可以在上述boot文件夹下添加wifi连接参数，也可以的。</p><h2 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h2><p>树莓派并没有关机按键，所以插上电源以后就开机了，这时我们可以使用<code>arp -a</code>来查看局域网下的网络设备，其中排除所有已知ip以后就可以确定树莓派的ip地址</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417153300465.png" alt="arp -a查看局域网设备"></p><p>当然，手机上使用Fing（一个软件）一眼就能看出哪个是树莓派的ip：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417153509940.png" alt="Fing查看局域网设备"></p><h1 id="ssh和vnc"><a href="#ssh和vnc" class="headerlink" title="ssh和vnc"></a>ssh和vnc</h1><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>经过以上配置，开机以后便可以直接通过ssh连接树莓派：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417153839091.png" alt="ssh连接树莓派"></p><p>其中1处的pi是这个系统的默认用户名，2处输入系统的默认密码是：“<code>raspberry</code>”</p><p>这样就进入系统了！</p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p>要是想使用VNC，还需要一定的配置。</p><p>首先执行<code>sudo raspi-config</code></p><p>然后按照图示进行选择：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417154320236.png" alt="接口配置"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417154405609.png" alt="vnc配置"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417154428794.png" alt="选择yes"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417154456062.png" alt="配置完成"></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417154539971.png" alt="通过方向键或者Tab键选择finish退出"></p><p>此时树莓派的VNC功能也配置完成了！</p><p>只需要在本机上使用VNC-viewer软件即可查看树莓派的桌面了！</p><p>其中ubuntu自带的远程桌面：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417154932014.png" alt="ubuntu自带远程桌面"></p><p>但是我遇到了这个：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417163127838.png" alt="自带远程桌面连接树莓派报错"></p><p>然后我查到说树莓派自带的vncserver的加密方式与tigervnc viewer不同，所以只好换一个（也可以在树莓派上重新安装其他版本的vncserver），网上推荐realvnc-viewer，下载地址：<a href="https://www.realvnc.com/en/connect/download/viewer/">https://www.realvnc.com/en/connect/download/viewer/</a></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417163426291.png" alt="realvnc-viewer"></p><p>输入ip地址，后面跟着vncserver的虚拟桌面序号，就可以连接成功啦~</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417163626417.png" alt="树莓派"></p><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><p>经过一定的配置，现在已经是一个可以正常使用的小电脑啦</p><p>为了更快的安装软件，国内用户经常需要替换软件源，将相应文件按下图编辑并替换掉：</p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417165025018.png" alt="树莓派换源"></p><p>然后再更新apt仓库即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>如果不知道替换适合自己的版本的话，也可以去清华大学软件源查看：地址——<a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/</a></p><p><img src="https://gitee.com/mxdon/img/raw/master/img/image-20210417165220279.png" alt="清华大学软件源说明"></p><h1 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h1><p><img src="https://p.pstatp.com/origin/137610000bfce4e396a63"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派入门--在Linux下搭建开发环境</title>
      <link href="/2020/%E6%A0%91%E8%8E%93%E6%B4%BE-02%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/%E6%A0%91%E8%8E%93%E6%B4%BE-02%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派入门–在Linux下搭建开发环境"><a href="#树莓派入门–在Linux下搭建开发环境" class="headerlink" title="树莓派入门–在Linux下搭建开发环境"></a>树莓派入门–在Linux下搭建开发环境</h1><p>[toc]</p><blockquote><p>由于之前白嫖的cpolar内网穿透突然给我报token错误，我寻思可能是我用的太多，导致封号，所以就用树莓派自己搭一个内网穿透服务器，供日常远程操作用（功耗++++）</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统：raspberry pi OS</p><p>架构：armv7(64bit)</p><h1 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h1><p><img src="https://p.pstatp.com/origin/137610000bfce4e396a63"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘格式及其ID信息</title>
      <link href="/2020/%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8F%8A%E5%85%B6ID%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/%E7%A3%81%E7%9B%98%E6%A0%BC%E5%BC%8F%E5%8F%8A%E5%85%B6ID%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘格式及其ID信息"><a href="#磁盘格式及其ID信息" class="headerlink" title="磁盘格式及其ID信息"></a>磁盘格式及其ID信息</h1><h2 id="GPT"><a href="#GPT" class="headerlink" title="GPT"></a>GPT</h2><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="left">ID</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">EFI System</td><td align="left">C12A7328-F81F-11D2-BA4B-00A0C93EC93B</td></tr><tr><td align="center">2</td><td align="left">MBR partition scheme</td><td align="left">024DEE41-33E7-11D3-9D69-0008C781F39F</td></tr><tr><td align="center">3</td><td align="left">Intel Fast Flash</td><td align="left">D3BFE2DE-3DAF-11DF-BA40-E3A556D89593</td></tr><tr><td align="center">4</td><td align="left">BIOS boot</td><td align="left">21686148-6449-6E6F-744E-656564454649</td></tr><tr><td align="center">5</td><td align="left">Microsoft reserved</td><td align="left">E3C9E316-0B5C-4DB8-817D-F92DF00215AE</td></tr><tr><td align="center">6</td><td align="left">Microsoft basic data</td><td align="left">EBD0A0A2-B9E5-4433-87C0-68B6B72699C7</td></tr><tr><td align="center">7</td><td align="left">Microsoft LDM metadata</td><td align="left">5808C8AA-7E8F-42E0-85D2-E1E90434CFB3</td></tr><tr><td align="center">8</td><td align="left">Microsoft LDM data</td><td align="left">AF9B60A0-1431-4F62-BC68-3311714A69AD</td></tr><tr><td align="center">9</td><td align="left">Windows recovery environment</td><td align="left">DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</td></tr><tr><td align="center">10</td><td align="left">IBM General Parallel Fs</td><td align="left">37AFFC90-EF7D-4E96-91C3-2D7AE055B174</td></tr><tr><td align="center">11</td><td align="left">Microsoft Storage Spaces</td><td align="left">E75CAF8F-F680-4CEE-AFA3-B001E56EFC2D</td></tr><tr><td align="center">12</td><td align="left">HP-UX data</td><td align="left">75894C1E-3AEB-11D3-B7C1-7B03A0000000</td></tr><tr><td align="center">13</td><td align="left">HP-UX service</td><td align="left">E2A1E728-32E3-11D6-A682-7B03A0000000</td></tr><tr><td align="center">14</td><td align="left">Linux swap</td><td align="left">0657FD6D-A4AB-43C4-84E5-0933C84B4F4F</td></tr><tr><td align="center">15</td><td align="left">Linux filesystem</td><td align="left">0FC63DAF-8483-4772-8E79-3D69D8477DE4</td></tr><tr><td align="center">16</td><td align="left">Linux server data</td><td align="left">3B8F8425-20E0-4F3B-907F-1A25A76F98E8</td></tr><tr><td align="center">17</td><td align="left">Linux root (x86)</td><td align="left">44479540-F297-41B2-9AF7-D131D5F0458A</td></tr><tr><td align="center">18</td><td align="left">Linux root (x86-64)</td><td align="left">4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709</td></tr><tr><td align="center">19</td><td align="left">Linux reserved</td><td align="left">8DA63339-0007-60C0-C436-083AC8230908</td></tr><tr><td align="center">20</td><td align="left">Linux home</td><td align="left">933AC7E1-2EB4-4F13-B844-0E14E2AEF915</td></tr><tr><td align="center">21</td><td align="left">Linux RAID</td><td align="left">A19D880F-05FC-4D3B-A006-743F0F84911E</td></tr><tr><td align="center">22</td><td align="left">Linux extended boot</td><td align="left">BC13C2FF-59E6-4262-A352-B275FD6F7172</td></tr><tr><td align="center">23</td><td align="left">Linux LVM</td><td align="left">E6D6D379-F507-44C2-A23C-238F2A3DF928</td></tr><tr><td align="center">24</td><td align="left">FreeBSD data</td><td align="left">516E7CB4-6ECF-11D6-8FF8-00022D09712B</td></tr><tr><td align="center">25</td><td align="left">FreeBSD boot</td><td align="left">83BD6B9D-7F41-11DC-BE0B-001560B84F0F</td></tr><tr><td align="center">26</td><td align="left">FreeBSD swap</td><td align="left">516E7CB5-6ECF-11D6-8FF8-00022D09712B</td></tr><tr><td align="center">27</td><td align="left">FreeBSD UFS</td><td align="left">516E7CB6-6ECF-11D6-8FF8-00022D09712B</td></tr><tr><td align="center">28</td><td align="left">FreeBSD ZFS</td><td align="left">516E7CBA-6ECF-11D6-8FF8-00022D09712B</td></tr><tr><td align="center">29</td><td align="left">FreeBSD Vinum</td><td align="left">516E7CB8-6ECF-11D6-8FF8-00022D09712B</td></tr><tr><td align="center">30</td><td align="left">Apple HFS/HFS+</td><td align="left">48465300-0000-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">31</td><td align="left">Apple UFS</td><td align="left">55465300-0000-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">32</td><td align="left">Apple RAID</td><td align="left">52414944-0000-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">33</td><td align="left">Apple RAID offline</td><td align="left">52414944-5F4F-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">34</td><td align="left">Apple boot</td><td align="left">426F6F74-0000-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">35</td><td align="left">Apple label</td><td align="left">4C616265-6C00-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">36</td><td align="left">Apple TV recovery</td><td align="left">5265636F-7665-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">37</td><td align="left">Apple Core storage</td><td align="left">53746F72-6167-11AA-AA11-00306543ECAC</td></tr><tr><td align="center">38</td><td align="left">Solaris boot</td><td align="left">6A82CB45-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">39</td><td align="left">Solaris root</td><td align="left">6A85CF4D-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">40</td><td align="left">Solaris /usr &amp; Apple ZFS</td><td align="left">6A898CC3-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">41</td><td align="left">Solaris swap</td><td align="left">6A87C46F-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">42</td><td align="left">Solaris backup</td><td align="left">6A8B642B-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">43</td><td align="left">Solaris /var</td><td align="left">6A8EF2E9-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">44</td><td align="left">Solaris /home</td><td align="left">6A90BA39-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">45</td><td align="left">Solaris alternate sector</td><td align="left">6A9283A5-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">46</td><td align="left">Solaris reserved 1</td><td align="left">6A945A3B-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">47</td><td align="left">Solaris reserved 2</td><td align="left">6A9630D1-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">48</td><td align="left">Solaris reserved 3</td><td align="left">6A980767-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">49</td><td align="left">Solaris reserved 4</td><td align="left">6A96237F-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">50</td><td align="left">Solaris reserved 5</td><td align="left">6A8D2AC7-1DD2-11B2-99A6-080020736631</td></tr><tr><td align="center">51</td><td align="left">NetBSD swap</td><td align="left">49F48D32-B10E-11DC-B99B-0019D1879648</td></tr><tr><td align="center">52</td><td align="left">NetBSD FFS</td><td align="left">49F48D5A-B10E-11DC-B99B-0019D1879648</td></tr><tr><td align="center">53</td><td align="left">NetBSD LFS</td><td align="left">49F48D82-B10E-11DC-B99B-0019D1879648</td></tr><tr><td align="center">54</td><td align="left">NetBSD concatenated</td><td align="left">2DB519C4-B10E-11DC-B99B-0019D1879648</td></tr><tr><td align="center">55</td><td align="left">NetBSD encrypted</td><td align="left">2DB519EC-B10E-11DC-B99B-0019D1879648</td></tr><tr><td align="center">56</td><td align="left">NetBSD RAID</td><td align="left">49F48DAA-B10E-11DC-B99B-0019D1879648</td></tr><tr><td align="center">57</td><td align="left">ChromeOS kernel</td><td align="left">FE3A2A5D-4F32-41A7-B725-ACCC3285A309</td></tr><tr><td align="center">58</td><td align="left">ChromeOS root fs</td><td align="left">3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC</td></tr><tr><td align="center">59</td><td align="left">ChromeOS reserved</td><td align="left">2E0A753D-9E48-43B0-8337-B15192CB1B5E</td></tr><tr><td align="center">60</td><td align="left">MidnightBSD data</td><td align="left">85D5E45A-237C-11E1-B4B3-E89A8F7FC3A7</td></tr><tr><td align="center">61</td><td align="left">MidnightBSD boot</td><td align="left">85D5E45E-237C-11E1-B4B3-E89A8F7FC3A7</td></tr><tr><td align="center">62</td><td align="left">MidnightBSD swap</td><td align="left">85D5E45B-237C-11E1-B4B3-E89A8F7FC3A7</td></tr><tr><td align="center">63</td><td align="left">MidnightBSD UFS</td><td align="left">0394Ef8B-237C-11E1-B4B3-E89A8F7FC3A7</td></tr><tr><td align="center">64</td><td align="left">MidnightBSD ZFS</td><td align="left">85D5E45D-237C-11E1-B4B3-E89A8F7FC3A7</td></tr><tr><td align="center">65</td><td align="left">MidnightBSD Vinum</td><td align="left">85D5E45C-237C-11E1-B4B3-E89A8F7FC3A7</td></tr></tbody></table><h2 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h2><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">序号</th><th align="left">名称</th><th align="center">序号</th><th align="left">名称</th><th align="center">序号</th><th align="left">名称</th></tr></thead><tbody><tr><td align="center">0</td><td align="left">空</td><td align="center">24</td><td align="left">NEC DOS</td><td align="center">81</td><td align="left">Minix / 旧 Linu</td><td align="center">bf</td><td align="left">Solaris</td></tr><tr><td align="center">1</td><td align="left">FAT12</td><td align="center">27</td><td align="left">隐藏的 NTFS Win</td><td align="center">82</td><td align="left">Linux 交换 / So</td><td align="center">c1</td><td align="left">DRDOS/sec (FAT-</td></tr><tr><td align="center">2</td><td align="left">XENIX root</td><td align="center">39</td><td align="left">Plan 9</td><td align="center">83</td><td align="left">Linux</td><td align="center">c4</td><td align="left">DRDOS/sec (FAT-</td></tr><tr><td align="center">3</td><td align="left">XENIX usr</td><td align="center">3c</td><td align="left">PartitionMagic</td><td align="center">84</td><td align="left">OS/2 隐藏的 C:</td><td align="center">c6</td><td align="left">DRDOS/sec (FAT-</td></tr><tr><td align="center">4</td><td align="left">FAT16 &lt;32M</td><td align="center">40</td><td align="left">Venix 80286</td><td align="center">85</td><td align="left">Linux 扩展</td><td align="center">c7</td><td align="left">Syrinx</td></tr><tr><td align="center">5</td><td align="left">扩展</td><td align="center">41</td><td align="left">PPC PReP Boot</td><td align="center">86</td><td align="left">NTFS 卷集</td><td align="center">da</td><td align="left">非文件系统数据</td></tr><tr><td align="center">6</td><td align="left">FAT16</td><td align="center">42</td><td align="left">SFS</td><td align="center">87</td><td align="left">NTFS 卷集</td><td align="center">db</td><td align="left">CP/M / CTOS / .</td></tr><tr><td align="center">7</td><td align="left">HPFS/NTFS/exFAT</td><td align="center">4d</td><td align="left">QNX4.x</td><td align="center">88</td><td align="left">Linux 纯文本</td><td align="center">de</td><td align="left">Dell 工具</td></tr><tr><td align="center">8</td><td align="left">AIX</td><td align="center">4e</td><td align="left">QNX4.x 第2部分</td><td align="center">8e</td><td align="left">Linux LVM</td><td align="center">df</td><td align="left">BootIt</td></tr><tr><td align="center">9</td><td align="left">AIX 可启动</td><td align="center">4f</td><td align="left">QNX4.x 第3部分</td><td align="center">93</td><td align="left">Amoeba</td><td align="center">e1</td><td align="left">DOS 访问</td></tr><tr><td align="center">a</td><td align="left">OS/2 启动管理器</td><td align="center">50</td><td align="left">OnTrack DM</td><td align="center">94</td><td align="left">Amoeba BBT</td><td align="center">e3</td><td align="left">DOS R/O</td></tr><tr><td align="center">b</td><td align="left">W95 FAT32</td><td align="center">51</td><td align="left">OnTrack DM6 Aux</td><td align="center">9f</td><td align="left">BSD/OS</td><td align="center">e4</td><td align="left">SpeedStor</td></tr><tr><td align="center">c</td><td align="left">W95 FAT32 (LBA)</td><td align="center">52</td><td align="left">CP/M</td><td align="center">a0</td><td align="left">IBM Thinkpad 休</td><td align="center">eb</td><td align="left">BeOS fs</td></tr><tr><td align="center">e</td><td align="left">W95 FAT16 (LBA)</td><td align="center">53</td><td align="left">OnTrack DM6 Aux</td><td align="center">a5</td><td align="left">FreeBSD</td><td align="center">ee</td><td align="left">GPT</td></tr><tr><td align="center">f</td><td align="left">W95 扩展 (LBA)</td><td align="center">54</td><td align="left">OnTrackDM6</td><td align="center">a6</td><td align="left">OpenBSD</td><td align="center">ef</td><td align="left">EFI (FAT-12/16/</td></tr><tr><td align="center">10</td><td align="left">OPUS</td><td align="center">55</td><td align="left">EZ-Drive</td><td align="center">a7</td><td align="left">NeXTSTEP</td><td align="center">f0</td><td align="left">Linux/PA-RISC</td></tr><tr><td align="center">11</td><td align="left">隐藏的 FAT12</td><td align="center">56</td><td align="left">Golden Bow</td><td align="center">a8</td><td align="left">Darwin UFS</td><td align="center">f1</td><td align="left">SpeedStor</td></tr><tr><td align="center">12</td><td align="left">Compaq 诊断</td><td align="center">5c</td><td align="left">Priam Edisk</td><td align="center">a9</td><td align="left">NetBSD</td><td align="center">f4</td><td align="left">SpeedStor</td></tr><tr><td align="center">14</td><td align="left">隐藏的 FAT16 &lt;3</td><td align="center">61</td><td align="left">SpeedStor</td><td align="center">ab</td><td align="left">Darwin 启动</td><td align="center">f2</td><td align="left">DOS 次要</td></tr><tr><td align="center">16</td><td align="left">隐藏的 FAT16</td><td align="center">63</td><td align="left">GNU HURD or Sys</td><td align="center">af</td><td align="left">HFS / HFS+</td><td align="center">fb</td><td align="left">VMware VMFS</td></tr><tr><td align="center">17</td><td align="left">隐藏的 HPFS/NTF</td><td align="center">64</td><td align="left">Novell Netware</td><td align="center">b7</td><td align="left">BSDI fs</td><td align="center">fc</td><td align="left">VMware VMKCORE</td></tr><tr><td align="center">18</td><td align="left">AST 智能睡眠</td><td align="center">65</td><td align="left">Novell Netware</td><td align="center">b8</td><td align="left">BSDI swap</td><td align="center">fd</td><td align="left">Linux raid 自动</td></tr><tr><td align="center">1b</td><td align="left">隐藏的 W95 FAT3</td><td align="center">70</td><td align="left">DiskSecure 多启</td><td align="center">bb</td><td align="left">Boot Wizard 隐</td><td align="center">fe</td><td align="left">LANstep</td></tr><tr><td align="center">1c</td><td align="left">隐藏的 W95 FAT3</td><td align="center">75</td><td align="left">PC/IX</td><td align="center">be</td><td align="left">Solaris 启动</td><td align="center">ff</td><td align="left">BBT</td></tr><tr><td align="center">1e</td><td align="left">隐藏的 W95 FAT1</td><td align="center">80</td><td align="left">旧 Minix</td><td align="center"></td><td align="left"></td><td align="center"></td><td align="left"></td></tr></tbody></table><h2 id="最后，点个关注不迷路"><a href="#最后，点个关注不迷路" class="headerlink" title="最后，点个关注不迷路"></a>最后，点个关注不迷路</h2><blockquote><p>公众号：<a href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a089ae12bfb4ca9a9e5d9ac82f58d43~tplv-k3u1fbpfcp-zoom-1.image">孟游先生的旅游笔记</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘 </tag>
            
            <tag> GPT </tag>
            
            <tag> MBR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程控制——内网穿透篇</title>
      <link href="/2020/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E2%80%94%E2%80%94%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%AF%87/"/>
      <url>/2020/%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6%E2%80%94%E2%80%94%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>因为某些原因，想要远程控制自己的电脑，但是公司条件不允许常规的远程软件，所以就想到了利用<code>内网穿透</code>+<code>ssh</code>进行简单的远程操作，起码传输文件和项目编译都会稍微方便一点点～</p></blockquote><p><strong>说明，本文选择使用<code>cpolar</code>进行测试，为了排除局域网的可能性干扰，本文测试环境为</strong>：</p><p>受控端：<code>ubuntu20.04</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109170919872.png" alt="ubuntu"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109180844181.png" alt="ubuntu的ip地址"></p><p>控制端：<code>Android-Termux</code></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109171313732.png" alt="Termux"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109180955289.png" alt="手机的ip地址"></p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><ul><li><p>开通帐号</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109173503110.png"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109173547142.png" alt="注册信息"></p></li></ul><p>​    记录下这一步是因为有的软件需要<strong>实名认证</strong>，而有的不需要，侧面也反映一些问题，大家自己品就好了～</p><p>​    注册账户基本是必要的，所以有<strong>互联网洁癖</strong>的同志可以注意一下;</p><ul><li><p>注册完成后选择免费套餐即可</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109174905804.png" alt="套餐选择"></p></li><li><p>下载软件</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109175131481.png" alt="cpolar下载项"></p></li></ul><p>​    如果没注册的话，可以从这里直接下载</p><p>​    <img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109173344438.png" alt="首页下载"></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>如图，下载之后还是需要在登录后的“<strong>仪表盘</strong>”界面找到使用方法和<code>token(authtoekn)</code>，有的网站可能叫“<strong>控制台</strong>”或者“<strong>我的隧道</strong>”;</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109175354731.png" alt="使用教程"></p><p>第二步：在<code>window</code>可以直接右键解压，<code>linux</code>或<code>MacOS</code>的话可以使用命令解压（其实右键也可以，提前给文件<code>chmod 777</code>、<code>chown $user</code>也可以右键解压）</p><p>比如我把软件解压到<code>/opt/cpolar</code>下</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109181301477.png" alt="解压与使用"></p><p>第三步：连接账户，只要把上图中步骤三的命令复制下来，在命令行中执行即可，需要注意的是，要在文件解压的环境下执行，比如说我把文件下载并解压到<code>/opt/cpolar</code>下，那么就在<code>/opt/cpolar</code>这执行命令：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109182439411.png" alt="初次执行"></p><p>如上图，在linux下可能会有执行权限的问题，所以再执行一下<code>sudo chmod a+x cpolar</code>就好啦～</p><p>这时显示配置文件已保存，所以接下来的执行就可以看第四步啦～</p><ul><li><p>运行</p><p>由于每种软件的运行方式多少都会有些不一样，所以建议大家看一下操作文档，比如官网的文档，绝大多数的产品都会附赠操作文档，所以有什么问题要优先阅读文档！</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109182809962.png" alt="官网的文档"></p><p>通过阅读文档知道要使用<code>./cpolar tcp 22</code>命令来将本地的<code>22</code>端口（<code>ssh</code>的默认监听端口）映射到公网上，所以我们来试一下：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109183246425.png" alt="执行结果"></p><p>执行之后出现了这样的界面，红框中的链接就是我需要的公网链接！</p></li></ul><h3 id="连接成功"><a href="#连接成功" class="headerlink" title="连接成功"></a>连接成功</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2021/image-20210109185121822.png" alt="连接成功"></p><p>由于使用电脑截图手机，清晰度和完整度不方便同时兼顾，大家凑合看吧～</p><p>首先是第一行，<code>ssh</code>就是我此次要达到的目的，远程登录无界面的的操作台，<code>-p</code>代表端口，后面的<code>10218</code>就是上面执行<code>cpolar</code>时产生的端口号（**免费用户每次开启的端口是随机的，<del>所以我一般都不关</del>**），<code>mxdon</code>是我的用户名，<code>@+网址</code>是固定搭配了。这样可以看到下面，已经是我<code>ubuntu</code>的界面啦～远程操作也就完成啦～</p><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><p>其实远程控制桌面也是可以的，<code>windows</code>下默认的远程端口是<code>3389</code>，只要执行<code>.cpolar tcp 3389</code>即可通过相应的方式远程控制，由于我手机里的<code>Termux</code>没有安装图形化控制界面，所以这里就不演示了，感兴趣的同学完全可以<del>收买我做教程</del>看看别的教程hhhhh</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八位Booth(二位)乘法器</title>
      <link href="/2020/%E5%85%AB%E4%BD%8DBooth-%E4%BA%8C%E4%BD%8D-%E4%B9%98%E6%B3%95%E5%99%A8/"/>
      <url>/2020/%E5%85%AB%E4%BD%8DBooth-%E4%BA%8C%E4%BD%8D-%E4%B9%98%E6%B3%95%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="八位“Booth二位乘算法”乘法器"><a href="#八位“Booth二位乘算法”乘法器" class="headerlink" title="八位“Booth二位乘算法”乘法器"></a>八位“Booth二位乘算法”乘法器</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="补码乘法器"><a href="#补码乘法器" class="headerlink" title="补码乘法器"></a>补码乘法器</h3><p>之前介绍了几篇无符号乘法器或加法器的写法，当然，稍作修改也就可以改成符合有符号数的乘法器或加法器。</p><p>但是呢，我们之前写的乘法器或加法器，其实都是默认是<strong>正数</strong>来写的，而且是以<strong>正数的原码</strong>来写的，所以上面说稍作修改也就可以成为有符号数的乘法器或加法器，其实就是对我们以为的<strong>原码进行取补码</strong>，再进行乘法或加法的运算。</p><span id="more"></span><p>随着计算机硬件部件的升级，处理器技术的发展，现代处理器中的定点数(小数点位置固定)都是按照补码形式来存储的。</p><p>所以在之前写的无符号加法器中，只要利用：<br>$$<br>X_补+Y_补=[X+Y]_补<br>$$<br>就可以轻易将原先的加法器改写成有符号加法器——只要对结果再取一次补码即可。</p><p>但是乘法器呢？稍作学习可以知道，补码的乘法是这样的：<br>$$<br>X<em>Y_补=[X</em>Y]_补<br>$$<br>我们再考虑一下之前所说的：<strong>在现代处理器中的定点数都是按照补码形式来存储的</strong>。</p><p>所以我们要想得到两个数的乘法结果，首先应该知道<strong>被乘数的原码和补码，再对最终结果取补码</strong>，即可得到我们期望的乘法结果。</p><p>那么如何求“<code>X*Y补</code>”呢？在处理器中，一个二进制数<code>Y补</code>形如<code>y7y6y5y4y3y2y1y0</code>，也就是表示一个数的补码，那么<strong>它的原码</strong>是多少呢？</p><p>补码的计算方法，除了“首位不变，余位取反再加一”的方式，还有一种就是“<strong>用溢出条件来减这个数</strong>”，在我们之前第一节课说<strong>二进制</strong>的时候，以钟表为例——“十二进制”，得到结论——“<code>4</code>是<code>-8</code>的补码”。</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201111205914305.png"></p><p>我们用第二种取补码的方式：<code>-8的补码=12-8=4</code>（这里没有考虑符号问题，只是求了补码的值）</p><p>所以考虑一下符号的话，<code>-8的补码=8-12=-4</code></p><p>同理：</p><p>十进制下，<code>-4的补码=4-10=-6</code></p><p>二进制下，<code>-101补码=1101补码=101-1000=-011=1011</code></p><p>这样解决求补码的方式在接下来的计算方面就更方便了，至于正数嘛，不变就好了。</p><p>回到上面的问题，一个二进制数<code>Y补</code>形如<code>y7y6y5y4y3y2y1y0</code>，<strong>它的原码</strong>是多少呢？根据：<br>$$<br>[X_补]_补=X<br>$$<br><code>Y补</code>的原码<code>Y</code>应该为：<br>$$<br>Y=(y_7<em>2^7+y_6</em>2^6+y_5<em>2^5+……+y_0</em>2^0)-1<em>2^8<br>$$<br>稍微化简一下：<br>$$<br>Y=-y_7</em>2^7+(y_6<em>2^6+y_5</em>2^5+……+y_0<em>2^0)<br>$$<br>所以我们如果想求<code>X*Y</code>，可以先求其补码：<br>$$<br>[X</em>Y]_补=[X*(-y_7<em>2^7)+X</em>(y_6<em>2^6+y_5</em>2^5+……+y_0<em>2^0)]_补<br>$$<br>根据补码加法“<code>X补+Y补=[X+Y]补</code>”再稍微化简一下：<br>$$<br>[X</em>Y]_补=-y_7*[X<em>2^7]_补+y_6</em>[X<em>2^6]_补+y_5</em>[X<em>2^5]_补+……+y_0</em>[X<em>2^0]_补<br>$$<br>再引入一个定理：<br>$$<br>[X</em>2^n]_补=X_补<em>2^n<br>$$<br>所以上式又可以换一种写法：<br>$$<br>[X</em>Y]_补=X_补*(-y_7<em>2^7+(y_6</em>2^6+y_5<em>2^5+……+y_0</em>2^0))=Y<em>X_补<br>$$<br>哦这不就是上面介绍过的补码乘法嘛：<br>$$<br>[X</em>Y]_补=Y<em>X_补=X</em>Y_补<br>$$<br>如果令一个数<code>Y1补=y6y6y5y4y3y2y1y0</code>，去掉了首位，那么上式是不是可以理解为：<br>$$<br>[X<em>Y]_补=X_补</em>Y1_补-y_7<em>X_补</em>2^7<br>$$<br>其中的<code>Y1补</code>不就刚好是<code>Y补</code>的后7位嘛？也就是说一个乘法可以分为两部分理解：首位的乘法和其他位的乘法。<strong>首位的乘法产生的部分积符号是减，其他位的部分积符号为加</strong>。</p><p>经过上面的推导大家应该会对补码乘法的原理有了一定的概念，我们来把它写成竖式的形式，以<code>(-6)x(-7)</code>为例，原码乘应该是<code>1110x1111</code>，在计算机中是以补码的形式存储，所以补码乘是<code>1010x1001</code>，代入公式，令<code>X补=1010</code>，<code>Y补=1001</code>，其运算过程如下：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112144911306.png"></p><p>这里可能有一些迷惑的是：为什么第一步运算得到的结果是<code>11111010</code>？为什么要在前面填充<code>1111</code>？</p><p>这也就是所谓的符号填充，我们之前的设计中都没有涉及到符号位，所以默认都是填充<code>0</code>，现在遇到了负数问题，也就需要填充符号了，但是这样看起来是不是<del>一点都觉得</del>很奇怪？如果没办法理解的话，我建议你可以尝试对它求补码，看看是不是可以保持首位符号位不变，余位取反加一。惊叹于设计师的机智。</p><p>补码乘法器的原理讲明白了，具体电路实现的话，大家可以尝试一下，本节重点不在于此。</p><h3 id="Booth一位乘"><a href="#Booth一位乘" class="headerlink" title="Booth一位乘"></a>Booth一位乘</h3><p>在上面已经讨论了补码乘法器的原理，那么什么是<code>Booth</code>乘法器呢？<code>Booth</code>乘法器是由英国的<code>Booth</code>夫妇提出的，并没有什么特殊含义，所以我们直接快进到内容。</p><p>经过补码乘法器的推导：<br>$$<br>[X<em>Y]_补=X_补</em>(-y_7<em>2^7+(y_6</em>2^6+y_5<em>2^5+……+y_0</em>2^0))<br>$$<br>参考中学数学：<br>$$<br>2^n=2<em>2^{n-1}<br>$$<br>其核心计算思想是括号里的形式，也就是</em><em><code>Y补</code>的原码<code>Y</code>，**所以我们对括号里的内容再进行分解合并，也就是对<code>Y</code>分解合并。先分解：<br>$$<br>Y=-y_7</em>2^7+((2-1)y_6<em>2^6+(2-1)y_5</em>2^5+……+(2-1)y_0<em>2^0)<br>$$<br>这样应该挺直观了吧：<br>$$<br>Y=-y_7</em>2^7+(y_6<em>2^7-y_6</em>2^6)+(y_5<em>2^6-y_5</em>2^5)+……+(y_0<em>2^1-y_0</em>2^0)<br>$$<br>再合并：<br>$$<br>Y=(y_6-y_7)*2^7+(y_5-y_6)*2^6+(y_4-y_5)*2^5+……+(0-y_0)*2^0<br>$$<br>最后有个<code>0-y0</code>的项，看起来有点不合群，所以令：<br>$$<br>y_{-1}=0<br>$$<br>代入上式，即：<br>$$<br>Y=(y_6-y_7)*2^7+(y_5-y_6)*2^6+(y_4-y_5)*2^5+……+(y_{-1}-y_0)*2^0<br>$$<br>这也就是<code>Booth</code>一位乘算法的原理。其优点就在于不用再像补码乘法器那样，<strong>不需要专门对最后一次部分积采用补码减法</strong>。</p><p>根据上式，还可以列出<code>Booth</code>一位乘的规则：</p><table><thead><tr><th align="center">y(i-1)</th><th align="center">y(i)</th><th align="center">y(i-1) - y(i)</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">加0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">-1</td><td align="center">减<code>X补</code></td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">加<code>X补</code></td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">加0</td></tr></tbody></table><p>再举个例子来计算，仍以<code>(-6)x(-7)</code>为例，补码乘是<code>1010x1001</code>，列出竖式：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112170824568.png"></p><p>可是这里为什么还是有减法呢？和常规的补码乘法器相比，简直是老和尚抹洗头膏，大可不必。甚至由于每次判断两位数字，增大了电路的复杂度，那么为什么booth乘法器如此好用呢？</p><p>其实<code>booth</code>一位乘算法并不常用，但是booth二位乘就不一样了，通过增加一定的空间复杂度，将运算周期减为一半！</p><h3 id="Booth二位乘"><a href="#Booth二位乘" class="headerlink" title="Booth二位乘"></a>Booth二位乘</h3><p>还是根据补码乘法器，我们将<code>Y</code>的表达式再进行变换——先分解：<br>$$<br>Y=-2<em>y_7</em>2^6+y_6<em>2^6+(y_5</em>2^6-2<em>y_5</em>2^4)+……+y_0<em>2^0+y_{-1}<em>2^0<br>$$<br>再整合：<br>$$<br>Y=(y_5+y_6-2</em>y_7）</em>2^6+（y_3+y_4-2<em>y_5）</em>2^4)+……+(y_{-1}+y_0-2*y_1)*2^0<br>$$<br>好了<code>Booth</code>二位乘算法也完事了，类比于<code>Booth</code>一位乘，我们也可以列出<code>Booth</code>二位乘的规则：</p><table><thead><tr><th align="center">y(i-1)</th><th align="center">y(i)</th><th align="center">y(i+1)</th><th align="center">y(i-1) + y(i) - 2*y(i+1)</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">加<code>0</code></td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">加<code>X补</code></td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">加<code>X补</code></td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">2</td><td align="center">加<code>2*X补</code>，即<code>X补&lt;&lt;1</code></td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">-2</td><td align="center">减<code>2*X补</code>，即<code>X补&lt;&lt;1</code></td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">-1</td><td align="center">减<code>X补</code></td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">-1</td><td align="center">减<code>X补</code></td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">加<code>0</code></td></tr></tbody></table><p>再举个例子来计算，仍以<code>(-6)x(-7)</code>为例，补码乘是<code>1010x1001</code>，列出竖式：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112183044343.png"></p><p>运算周期减半了！</p><p>好了，那<code>Booth</code>乘法器有没有三位乘呢？可以有，但是三位的时候就会出现加<code>3*X补</code>，<code>2*X补</code>可以通过左移一位得到，而<code>3*X补</code>就有点麻烦了，所以不再介绍，至于四位乘、八位乘，想挑战的同学可以挑战一下。</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="减法变加法"><a href="#减法变加法" class="headerlink" title="减法变加法"></a>减法变加法</h3><p>首先我们来解决一个问题，如何把减法消除？我们知道，<strong>减去一个数，等于加上这个数的相反数；减去一个数，也等于加上这个数的补码。</strong>这个过程中的减数也默认是正数，因为正数的补码还是正数，只有正数前面加一个符号再去补码才有用。那么如上面竖式所写，<strong>减去一个负补码，就应该等于加上“这个负补码的补码的相反数”</strong>，比如上面的补码乘法器竖式，就应该变换成如下形式：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112174657850.png"></p><p>再说明一下吧：**减<code>11010</code>，就相当于加<code>11010</code>的补码的相反数，即加<code>10110</code>的相反数，即<code>00110</code>**。</p><p>所以<code>booth</code>一位乘算法的示例应该变成这样：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112175327806.png"></p><p><code>booth</code>二位乘算法的示例应该变成这样：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112183729148.png"></p><h3 id="vivado特性"><a href="#vivado特性" class="headerlink" title="vivado特性"></a>vivado特性</h3><p>考虑到上述减法变加法的操作后，容易总结出：减法变加法，其实就是对补码的符号位取反，也就是对减数每一位取反后再加一。</p><p>再回读一边上述的理论部分，可能你会发现，在乘法运算中，只用到了<strong>补码</strong>和<strong>“负补码”</strong>两种概念的数字。而在<code>vivado</code>中（相当于在处理器中），数字默认是以补码形式存储的，即输入的乘数<strong>默认就是补码形式</strong>，这样只需要再求出<strong>“负补码”</strong>即可。设<code>X[3:0]</code>表示一个乘数，默认是以补码形式存储，则其“负补码”：<br>$$<br>X_{负补码}=!X + 1<br>$$<br>至于其原码：<br>$$<br>X_{原码}=(X[3],!X[2:0]) + 1<br>$$<br>其实根本用不着。</p><p>有了以上知识储备，我们就可以写代码啦~</p><h2 id="设计文件"><a href="#设计文件" class="headerlink" title="设计文件"></a>设计文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于实力不够，没能设计成改一个数字变一个规模的程序</span></span><br><span class="line"><span class="meta">`<span class="meta-keyword">define</span> size 8</span></span><br><span class="line"><span class="keyword">module</span> mul_booth_signed(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="meta">`size - 1 : 0] mul1,mul2,</span></span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] clk_cnt,<span class="comment">//运算节拍，相当于状态机了，8位的话每次运算有4个拍</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">2</span>*<span class="meta">`size - 1 : 0] res</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于传值默认就是补码，所以只需要再计算“负补码”即可</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="meta">`size - 1 : 0] bmul1,bmul2;</span></span><br><span class="line">    <span class="keyword">assign</span> bmul1 = (~mul1 + <span class="number">1&#x27;b1</span>) ;</span><br><span class="line">    <span class="keyword">assign</span> bmul2 = (~mul2 + <span class="number">1&#x27;b1</span>) ;<span class="comment">//其实乘数2的负补码也没用到。</span></span><br><span class="line"><span class="comment">//其实可以把状态机的开始和结束状态都写出来，我懒得写了，同学们可以尝试一下啊~</span></span><br><span class="line">    <span class="keyword">parameter</span>   zeroone       =   <span class="number">3&#x27;b00</span>,</span><br><span class="line">                twothree      =   <span class="number">3&#x27;b001</span>,</span><br><span class="line">                fourfive      =   <span class="number">3&#x27;b010</span>,</span><br><span class="line">                sixseven      =   <span class="number">3&#x27;b011</span>;</span><br><span class="line">    <span class="comment">//y(i-1),y(i),y(i+1)三个数的判断寄存器，由于有多种情况，也可以看成状态机（也可以改写成状态机形式，大家自己试试吧）</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//部分积</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>*<span class="meta">`size-1 : 0] A;</span></span><br><span class="line"><span class="comment">//每个节拍下把相应位置的数据传给temp寄存器</span></span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(clk_cnt)</span><br><span class="line">            zeroone  : temp &lt;= &#123;mul2[<span class="number">1</span>:<span class="number">0</span>],<span class="number">1&#x27;b0</span>&#125;;</span><br><span class="line">            twothree : temp &lt;= mul2[<span class="number">3</span>:<span class="number">1</span>];</span><br><span class="line">            fourfive : temp &lt;= mul2[<span class="number">5</span>:<span class="number">3</span>];</span><br><span class="line">            sixseven : temp &lt;= mul2[<span class="number">7</span>:<span class="number">5</span>];</span><br><span class="line">            <span class="keyword">default</span> : temp &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (clk_cnt == <span class="number">3&#x27;b100</span>) <span class="keyword">begin</span><span class="comment">//如果节拍到4就让部分积归0，此时已经完成一次计算了</span></span><br><span class="line">            A &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">case</span> (temp)</span><br><span class="line">            <span class="number">3&#x27;b000</span>,<span class="number">3&#x27;b111</span> :   <span class="keyword">begin</span><span class="comment">//这些是从高位到低位的判断，别看反了噢</span></span><br><span class="line">                A &lt;= A + <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="number">3&#x27;b001</span>,<span class="number">3&#x27;b010</span> : <span class="keyword">begin</span><span class="comment">//加法操作使用补码即可，倍数利用左移解决</span></span><br><span class="line">                A &lt;= A + (&#123;&#123;<span class="number">8</span>&#123;mul1[<span class="meta">`size-1]&#125;&#125;,mul1&#125; &lt;&lt; 2*(clk_cnt-1));</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="number">3&#x27;b011</span> : <span class="keyword">begin</span></span><br><span class="line">                A &lt;= A + (&#123;&#123;<span class="number">8</span>&#123;mul1[<span class="meta">`size-1]&#125;&#125;,mul1&#125; &lt;&lt; 2*(clk_cnt-1) + 1);</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="number">3&#x27;b100</span>: <span class="keyword">begin</span><span class="comment">//减法操作利用“负补码”改成加法操作，倍数利用左移解决</span></span><br><span class="line">                A &lt;= A + (&#123;&#123;<span class="number">8</span>&#123;bmul1[<span class="meta">`size-1]&#125;&#125;,bmul1&#125; &lt;&lt; 2*(clk_cnt-1) + 1);</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="number">3&#x27;b101</span>,<span class="number">3&#x27;b110</span> : <span class="keyword">begin</span></span><br><span class="line">                A &lt;= A + (&#123;&#123;<span class="number">8</span>&#123;bmul1[<span class="meta">`size-1]&#125;&#125;,bmul1&#125; &lt;&lt; 2*(clk_cnt-1));</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">default</span>: A &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//当节拍到4的时候写入结果寄存器。</span></span><br><span class="line">    <span class="keyword">assign</span> res = (clk_cnt == <span class="number">3&#x27;b100</span>) ? A : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>这是一个八位<code>Booth</code>二位乘算法的乘法器，至于<code>Booth</code>一位和<code>Booth</code>四位的乘法器，大家各自尝试就好。</p><p>此外在这个文件当中，我用到了<code>clk_cnt</code>这个寄存器，大家是不是以为我会多用一个模块用来产生<code>clk_cnt</code>的波形？</p><p>~~身为一个懒人，我直接在测试文件里写了吼吼吼~~~</p><h3 id="综合电路"><a href="#综合电路" class="headerlink" title="综合电路"></a>综合电路</h3><p><code>37</code>个元件，<code>36</code>个IO口，<code>318</code>根线</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112221019705.png"></p><h2 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> mul_tb(</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] mul1,mul2;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] res;</span><br><span class="line">    <span class="keyword">reg</span> clk;</span><br><span class="line">    <span class="keyword">wire</span> clk_en;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] clk_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        mul1 &lt;= -<span class="number">8&#x27;d7</span>;</span><br><span class="line">        mul2 &lt;= -<span class="number">8&#x27;d3</span>;</span><br><span class="line">        clk &lt;= <span class="number">0</span>;</span><br><span class="line">        clk_cnt &lt;= <span class="number">3&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> # <span class="number">10</span> clk = ~clk;</span><br><span class="line"><span class="comment">//clk_cnt发生器，懒人版</span></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        clk_cnt &lt;= clk_cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">if</span> (clk_cnt == <span class="number">3&#x27;b100</span>)</span><br><span class="line">            clk_cnt &lt;= <span class="number">3&#x27;b00</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="comment">//每次运算结束后，让乘数变化，以便产生不同的数据用以观察</span></span><br><span class="line">    <span class="keyword">assign</span> clk_en = (clk_cnt == <span class="number">3&#x27;b100</span>) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk_en) <span class="keyword">begin</span></span><br><span class="line">        mul2 &lt;= mul2 + <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    mul_booth_signed try(<span class="variable">.mul1</span>(mul1),<span class="variable">.mul2</span>(mul2),<span class="variable">.res</span>(res),<span class="variable">.clk</span>(clk),<span class="variable">.clk_cnt</span>(clk_cnt));</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真波形"><a href="#仿真波形" class="headerlink" title="仿真波形"></a>仿真波形</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201112220822106.png"></p><p>将其改成有符号十进制数形式显示，可以验证电路设计正确。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> 乘法器 </tag>
            
            <tag> Booth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八位右移位乘法器（无符号）</title>
      <link href="/2020/%E5%85%AB%E4%BD%8D%E5%8F%B3%E7%A7%BB%E4%BD%8D%E4%B9%98%E6%B3%95%E5%99%A8%EF%BC%88%E6%97%A0%E7%AC%A6%E5%8F%B7%EF%BC%89/"/>
      <url>/2020/%E5%85%AB%E4%BD%8D%E5%8F%B3%E7%A7%BB%E4%BD%8D%E4%B9%98%E6%B3%95%E5%99%A8%EF%BC%88%E6%97%A0%E7%AC%A6%E5%8F%B7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="八位右移位乘法器"><a href="#八位右移位乘法器" class="headerlink" title="八位右移位乘法器"></a>八位右移位乘法器</h1><h2 id="虚假的右移位"><a href="#虚假的右移位" class="headerlink" title="虚假的右移位"></a>虚假的右移位</h2><p>其实移位总是相对的，所以右移还是有左移的成分。</p><p>左移位乘法器很好理解，因为在列竖式的时候就能看明白，符合我们的常规思维：</p><span id="more"></span><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201110164456963.png" alt="image-20201110164456963"></p><p>也就是说，每一次乘法之后，只要把对应的部分积左移相应的位数，再相加，就可以得到最终的结果，这个过程像极了小学二年级的乘法课，非常的直观了，这里不做赘述~</p><p>那么什么是右移呢？我听到有同学说，把乘数和被乘数换一下就是了，像这样：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201110170450444.png" alt="image-20201110170450444"></p><p>运算顺序<strong>从右往左</strong>，理论上结果是正确的，就是看起来有点别扭，我们把它转过来：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201110171651354.png" alt="image-20201110171651354"></p><p>这下应该看明白了吧，无非是最后的结果再加移位一次，从而实现一个“虚假的右移位”</p><h2 id="真正的右移位"><a href="#真正的右移位" class="headerlink" title="真正的右移位"></a>真正的右移位</h2><p>真正的右移位，其实是针对<strong>小数</strong>计算而言的，我们计算<strong>整数</strong>乘法的时候，习惯性的左移，根本原因是我们习惯了整数的小数点在最右侧，只要不超过那个小数点，就可以直接相加得结果。</p><p>而小数计算，因为小数点在左边的缘故，在计算机当中，就可以根据小数点位置不变的思想，来<strong>将部分积右移</strong>，从而实现一个右移乘法器。这种思想所成的乘法器，也成为<strong>定点乘法器</strong>。</p><p>以二进制小数计算“<code>0.1101 x 0.1011</code>”为例：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/8.png" alt="image-20201110171651354"></p><p>由图可以看出，最后一位的结果并<strong>不参与</strong>移位相加的运算，什么意思呢？</p><p>我们再画详细点：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201110192743010.png" alt="image-20201110192743010"></p><p>计算时，<strong>每次得到的部分积，都会与上一次得到的部分积相加，而每次相加结果的最后一位不参与运算，可直接右移转存</strong>，则部分积占用的空间显然比左移运算小多了。这样说，想必应该足够明白了吧？</p><h2 id="设计文件-方式一"><a href="#设计文件-方式一" class="headerlink" title="设计文件(方式一)"></a>设计文件(方式一)</h2><p>知道了上述原理，我们来写一个右移位的乘法器，逻辑很清晰，每次根据乘数位是否为<code>0</code>进行判断，如果是<code>0</code>，则<code>部分积=前一步的部分积+0</code>，如果是<code>1</code>，则<code>部分积=前一步的部分积+被乘数</code>，同时每次将部分积的最低位存储至结果的低位中，最后一次的部分积则为结果的高位。</p><p>实现代码如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> mul_8_1(result,mul1,mul2);</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span>[<span class="number">7</span>:<span class="number">0</span>] mul1;</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span>[<span class="number">7</span>:<span class="number">0</span>] mul2;</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>[<span class="number">15</span>:<span class="number">0</span>] res;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] A;        <span class="comment">//部分积</span></span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] temp_x;   <span class="comment">//乘法运算时，被乘数与乘数最后一位的积的最后一位不参与最后的加法运算，将其右移另存。</span></span><br><span class="line">    <span class="keyword">always</span> @ (*)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        A=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i=i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(mul2[i]) A=A+&#123;<span class="number">1&#x27;b0</span>,mul1&#125;;      <span class="comment">//部分积移位前可能会比乘数多一位</span></span><br><span class="line">                <span class="keyword">else</span> A=A+<span class="number">9&#x27;b000000000</span>;</span><br><span class="line">                temp_x[i]=A[<span class="number">0</span>];</span><br><span class="line">                A=A&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            res=&#123;A,temp_x&#125;;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>在<code>RTL</code>级电路综合中却很少使用<code>for</code>循环语句。主要原因就是<code>for</code>循环会被综合器展开为所有变量情况的执行语句，每个变量独立占用寄存器资源，每条执行语句并不能有效地复用硬件逻辑资源，造成巨大的资源浪费。也就是说，<code>for</code>语句循环几次，就是将相同的电路复制几次。循环次数越多，综合电路占用面积越大，综合就越慢。</p><p>所以我们稍微改改写法，就可以解决<code>for</code>循环了。</p><h3 id="综合电路"><a href="#综合电路" class="headerlink" title="综合电路"></a>综合电路</h3><p><code>23</code>个元件，<code>32</code>个<code>IO</code>口，<code>202</code>根线</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201110195053083.png" alt="image-20201110195053083"></p><h2 id="设计文件-方式二"><a href="#设计文件-方式二" class="headerlink" title="设计文件(方式二)"></a>设计文件(方式二)</h2><p>所幸八位的乘法器也并不算复杂，可以写一个并行计算的部分积。这样也就解决了<code>for</code>循环的问题。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">define</span> size 8</span></span><br><span class="line"><span class="keyword">module</span> mul_8_1(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="meta">`size - 1:0] mul1,mul2,</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">2</span>*<span class="meta">`size - 1:0] res</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">wire</span> [<span class="meta">`size : 0] A[0:`size-1];</span></span><br><span class="line">    <span class="keyword">wire</span> [<span class="meta">`size -1 : 0] low_pro;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">0</span>] = mul2[<span class="number">0</span>] ? &#123;<span class="number">1&#x27;b0</span>,mul1&#125; : <span class="number">9&#x27;d0</span>;</span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">1</span>] = mul2[<span class="number">1</span>] ? ((A[<span class="number">0</span>]&gt;&gt;<span class="number">1</span>) + &#123;<span class="number">1&#x27;b0</span>,mul1&#125;) : ((A[<span class="number">0</span>]&gt;&gt;<span class="number">1</span>) + <span class="number">9&#x27;d0</span>);</span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">2</span>] = mul2[<span class="number">2</span>] ? ((A[<span class="number">1</span>]&gt;&gt;<span class="number">1</span>) + &#123;<span class="number">1&#x27;b0</span>,mul1&#125;) : ((A[<span class="number">1</span>]&gt;&gt;<span class="number">1</span>) + <span class="number">9&#x27;d0</span>);</span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">3</span>] = mul2[<span class="number">3</span>] ? ((A[<span class="number">2</span>]&gt;&gt;<span class="number">1</span>) + &#123;<span class="number">1&#x27;b0</span>,mul1&#125;) : ((A[<span class="number">2</span>]&gt;&gt;<span class="number">1</span>) + <span class="number">9&#x27;d0</span>);</span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">4</span>] = mul2[<span class="number">4</span>] ? ((A[<span class="number">3</span>]&gt;&gt;<span class="number">1</span>) + &#123;<span class="number">1&#x27;b0</span>,mul1&#125;) : ((A[<span class="number">3</span>]&gt;&gt;<span class="number">1</span>) + <span class="number">9&#x27;d0</span>);</span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">5</span>] = mul2[<span class="number">5</span>] ? ((A[<span class="number">4</span>]&gt;&gt;<span class="number">1</span>) + &#123;<span class="number">1&#x27;b0</span>,mul1&#125;) : ((A[<span class="number">4</span>]&gt;&gt;<span class="number">1</span>) + <span class="number">9&#x27;d0</span>);</span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">6</span>] = mul2[<span class="number">6</span>] ? ((A[<span class="number">5</span>]&gt;&gt;<span class="number">1</span>) + &#123;<span class="number">1&#x27;b0</span>,mul1&#125;) : ((A[<span class="number">5</span>]&gt;&gt;<span class="number">1</span>) + <span class="number">9&#x27;d0</span>);</span><br><span class="line">    <span class="keyword">assign</span> A[<span class="number">7</span>] = mul2[<span class="number">7</span>] ? ((A[<span class="number">6</span>]&gt;&gt;<span class="number">1</span>) + &#123;<span class="number">1&#x27;b0</span>,mul1&#125;) : ((A[<span class="number">6</span>]&gt;&gt;<span class="number">1</span>) + <span class="number">9&#x27;d0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">0</span>] = A[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">1</span>] = A[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">2</span>] = A[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">3</span>] = A[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">4</span>] = A[<span class="number">4</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">5</span>] = A[<span class="number">5</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">6</span>] = A[<span class="number">6</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> low_pro[<span class="number">7</span>] = A[<span class="number">7</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> res = &#123;(A[<span class="number">7</span>] &gt;&gt; <span class="number">1</span>),low_pro&#125;;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="综合电路-1"><a href="#综合电路-1" class="headerlink" title="综合电路"></a>综合电路</h3><p><code>23</code>个元件，<code>32</code>个<code>IO</code>口，<code>224</code>根线，和使用for循环的方式相比，多了几根线？？！</p><p>好吧果然是我的能力问题，有见解的朋友们请务必说一下，我想学！</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201110194747053.png" alt="image-20201110194747053"></p><h2 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h2><p>由于两个都是乘法器，输入和输出端口都一样，则可以用同样的测试文件进行测试：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> mul_tb(</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] mul1,mul2;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] res;</span><br><span class="line">    <span class="keyword">reg</span> clk;</span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        mul1 &lt;= <span class="number">8&#x27;d7</span>;</span><br><span class="line">        mul2 &lt;= <span class="number">8&#x27;d3</span>;</span><br><span class="line">        clk &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> # <span class="number">10</span> clk = ~clk;</span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        mul2 &lt;= mul2 + <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    mul_8_1 try(<span class="variable">.mul1</span>(mul1),<span class="variable">.mul2</span>(mul2),<span class="variable">.res</span>(res),);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="仿真波形"><a href="#仿真波形" class="headerlink" title="仿真波形"></a>仿真波形</h2><p>调成无符号十进制数进行观察，如图所示，<code>7x7=49</code>，<code>7x8=56</code>，结果正确。</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201110200652246.png" alt="image-20201110200652246"></p>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> 乘法器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八位超前进位加法器&amp;八位行波进位加法器</title>
      <link href="/2020/%E5%85%AB%E4%BD%8D%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/"/>
      <url>/2020/%E5%85%AB%E4%BD%8D%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="八位超前进位加法器"><a href="#八位超前进位加法器" class="headerlink" title="八位超前进位加法器"></a>八位超前进位加法器</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>有学弟问我，超前进位加法器中的<code>p=add1 ^ add2</code>和<code>g=add1 &amp; add2</code>是什么意思，所以这篇文章就稍微赘述一点吧~</p></blockquote><p>所谓超前进位，首先应该明白进位是什么。</p><span id="more"></span><p><code>8+4=12</code>，其中的<code>1</code>就是进位，其中的<code>2</code>才是结果。</p><p>那么在二进制中，<code>1+1=10</code>，其中的<code>1</code>就是进位，<code>0</code>就是结果。</p><p>明白了进位和结果，那么多位的数字是怎么计算呢？</p><p>其实上面的计算应该是<code>1+1+上一位的进位=10</code>，所以两个数字的计算应该涉及三个内容——加数，被加数，上一位的进位。</p><p>在一位二进制加法中，<code>a</code>和<code>b</code>分别表示两个加数，<code>cin</code>表示上一位的进位，<code>cout</code>表示下一位的进位，<code>sum</code>表示结果，我们列出其真值表：</p><table><thead><tr><th align="center">add1</th><th align="center">add2</th><th align="center">cin</th><th align="center">cout</th><th align="center">sum</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><p>以数字**<code>1</code>为真<strong>，数字</strong><code>0</code>为假<strong>，</strong><code>a</code>表示<code>1</code><strong>，</strong><code>a&#39;</code>表示<code>0</code><strong>，这样的形式。学过离散数学或者数字电路的同学应该多少会点吧，</strong>“·”代表“与”<strong>，</strong>“+”代表“或”<strong>，所以上面的真值表，写成表达式，就是：<br>$$<br>cout = add1·add2·cin’+add1’·add2·cin+add1·add2’cin+add1·add2·cin<br>$$<br>经过部分化简：<br>$$<br>cout=add1·add2+add1’add2·cin+add1·add2’·cin=add1·add2+cin·(add1⊕add2)<br>$$<br>同理：<br>$$<br>sum =add1⊕add2⊕cin<br>$$<br>找到两个等式的相同部分，都有<code>a⊕b</code>，</strong>其中<code>⊕</code>代表“异或”，在<code>Verilog</code>中用“^”表示**，即<code>a^b</code>，所以令<code>p = add1 ^ add2</code>，现在知道干什么用的了嘛？</p><p>没错，就是中间变量而已，同理<code>g = add1 &amp; add2</code>也是中间变量，这样就可以把上面两个等式改写成：<code>cout = g | (cin &amp; p)</code>和<code>sum = add1 ^ add2 ^ cin</code>（其实就是变短了一点点而已）</p><blockquote><p>不过呢，适当的使用中间变量，可能会让你的代码精简许多~</p></blockquote><p>此外，我发现一个网站可以通过真值表生成表达式：<a href="http://www.32x8.com/index.html">http://www.32x8.com/index.html</a></p><h2 id="设计文件"><a href="#设计文件" class="headerlink" title="设计文件"></a>设计文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> add_8_1(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] add1,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] add2,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> cin,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] sum,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> cout</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">wire</span>[<span class="number">7</span>:<span class="number">0</span>] g,p,c;<span class="comment">//g和p的含义已经讲解了，c代表每一位计算的进位，c[0]表示原始的进位cin</span></span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">0</span>]=cin;</span><br><span class="line">    <span class="keyword">assign</span> p=add1 ^ add2;</span><br><span class="line">    <span class="keyword">assign</span> g=add1 &amp; add2;</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">0</span>] = g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">1</span>] = g[<span class="number">1</span>] | (p[<span class="number">1</span>] &amp; (g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>])));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">2</span>] = g[<span class="number">2</span>] | (p[<span class="number">2</span>] &amp; (g[<span class="number">1</span>] | (p[<span class="number">1</span>] &amp; (g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>])))));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">3</span>] = g[<span class="number">3</span>] | (p[<span class="number">3</span>] &amp; (g[<span class="number">2</span>] | (p[<span class="number">2</span>] &amp; (g[<span class="number">1</span>] | (p[<span class="number">1</span>] &amp; (g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>])))))));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">4</span>] = g[<span class="number">4</span>] | (p[<span class="number">4</span>] &amp; (g[<span class="number">3</span>] | (p[<span class="number">3</span>] &amp; (g[<span class="number">2</span>] | (p[<span class="number">2</span>] &amp; (g[<span class="number">1</span>] | (p[<span class="number">1</span>] &amp; (g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>])))))))));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">5</span>] = g[<span class="number">5</span>] | (p[<span class="number">5</span>] &amp; (g[<span class="number">4</span>] | (p[<span class="number">4</span>] &amp; (g[<span class="number">3</span>] | (p[<span class="number">3</span>] &amp; (g[<span class="number">2</span>] | (p[<span class="number">2</span>] &amp; (g[<span class="number">1</span>] | (p[<span class="number">1</span>] &amp; (g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>])))))))))));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">6</span>] = g[<span class="number">6</span>] | (p[<span class="number">6</span>] &amp; (g[<span class="number">5</span>] | (p[<span class="number">5</span>] &amp; (g[<span class="number">4</span>] | (p[<span class="number">4</span>] &amp; (g[<span class="number">3</span>] | (p[<span class="number">3</span>] &amp; (g[<span class="number">2</span>] | (p[<span class="number">2</span>] &amp; (g[<span class="number">1</span>] | (p[<span class="number">1</span>] &amp; (g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>])))))))))))));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">7</span>] = g[<span class="number">7</span>] | (p[<span class="number">7</span>] &amp; (g[<span class="number">6</span>] | (p[<span class="number">6</span>] &amp; (g[<span class="number">5</span>] | (p[<span class="number">5</span>] &amp; (g[<span class="number">4</span>] | (p[<span class="number">4</span>] &amp; (g[<span class="number">3</span>] | (p[<span class="number">3</span>] &amp; (g[<span class="number">2</span>] | (p[<span class="number">2</span>] &amp; (g[<span class="number">1</span>] | (p[<span class="number">1</span>] &amp; (g[<span class="number">0</span>] | (p[<span class="number">0</span>] &amp; c[<span class="number">0</span>])))))))))))))));</span><br><span class="line">    <span class="keyword">assign</span> sum=p^c[<span class="number">7</span>:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> cout=c[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>上面的代码应该看起来很长，像老太太的裹脚布，但这也就是所谓的<strong>超前进位</strong>。</p><p><code>Verilog</code>中“块”和<code>assign</code>语句都是并行执行的，上面有许多<code>assign</code>语句，所以从<code>c[0]</code>到<code>c[7]</code>，根据第一步的<code>cin</code>，就可以同步计算出每一位的进位（超前进位），以及最后的结果，这些是同时完成的，也就完成了超前进位加法器。</p><h2 id="综合电路"><a href="#综合电路" class="headerlink" title="综合电路"></a>综合电路</h2><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107203230210.png" alt="image-20201107203230210"></p><p>点击<code>RTL-ANALYSIS——Synthesis</code>，可以查看综合电路图：</p><p><code>19</code>个元件，<code>26</code>个<code>IO</code>口，<code>56</code>根线</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107213633419.png" alt="image-20201107213633419"></p><h2 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> add_tb();</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] add1,add2;</span><br><span class="line">    <span class="keyword">reg</span> cin;</span><br><span class="line">    <span class="keyword">reg</span> clk;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">wire</span> cout;</span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        add1 &lt;= <span class="number">8&#x27;d10</span>;</span><br><span class="line">        add2 &lt;= <span class="number">8&#x27;d3</span>;</span><br><span class="line">        cin &lt;= <span class="number">1&#x27;b0</span>;     </span><br><span class="line">        clk &lt;= <span class="number">1&#x27;b0</span>;   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span> # <span class="number">10</span> clk = ~clk;</span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">negedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        &#123;add1,add2&#125; &lt;= &#123;add1,add2&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    add_8_1 try(<span class="variable">.add1</span>(add1),<span class="variable">.add2</span>(add2),<span class="variable">.cin</span>(cin),<span class="variable">.sum</span>(sum),<span class="variable">.cout</span>(cout));</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>还有些同学，对测试文件的理解也还是不够深刻，这里稍提一嘴，测试文件就是给电路加激励信息，使电路运作。至于加提示信息之类的，各自加油就好啦~</p><h2 id="仿真波形"><a href="#仿真波形" class="headerlink" title="仿真波形"></a>仿真波形</h2><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107204605260.png" alt="image-20201107204605260"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107204248110.png" alt="image-20201107204248110"></p><p>右键某一信号，选择相应的进制数，以<code>10+9</code>为例，最终输出<code>cout=0</code>，<code>sum=19</code></p><p>那么之后的<code>10+11</code>为什么没有进位使<code>cout=1</code>呢？</p><p>把他们转换成二进制观察一下就明白啦~</p><h1 id="八位行波进位加法器"><a href="#八位行波进位加法器" class="headerlink" title="八位行波进位加法器"></a>八位行波进位加法器</h1><blockquote><p>当时不知道在哪听的这个名字，就一直用下了，其实这个应该叫做<strong>行波进位加法器</strong>——由N个全加器<strong>级联</strong>而成，所以被我叫成了级联进位emmm</p></blockquote><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>如上所说，行波进位加法器是由<code>N</code>个全加器级联而成，比如<code>8</code>位的加法器可以由<code>8</code>个一位全加器级联而成，也可以由<code>2</code>个四位全加器构成，区别就是所综合出的电路大小。</p><h2 id="设计文件-1"><a href="#设计文件-1" class="headerlink" title="设计文件"></a>设计文件</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> add_8_2(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] add1,add2,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> cin,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] sum,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> cout</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>] G,P,C; </span><br><span class="line"><span class="keyword">always</span> @(add1 <span class="keyword">or</span> add2 <span class="keyword">or</span> cin)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    G[<span class="number">0</span>] = add1[<span class="number">0</span>] &amp; add2[<span class="number">0</span>]; </span><br><span class="line">    P[<span class="number">0</span>] = add1[<span class="number">0</span>] ^ add2[<span class="number">0</span>]; </span><br><span class="line">    C[<span class="number">0</span>] = cin; <span class="comment">//最低位的进位输入，即cin</span></span><br><span class="line">    sum[<span class="number">0</span>] = G[<span class="number">0</span>]^ P[<span class="number">0</span>] ^ C[<span class="number">0</span>];<span class="comment">//第一位的计算结果</span></span><br><span class="line">    G[<span class="number">1</span>] = add1[<span class="number">1</span>] &amp; add2[<span class="number">1</span>];</span><br><span class="line">    P[<span class="number">1</span>] = add1[<span class="number">1</span>] ^ add2[<span class="number">1</span>];</span><br><span class="line">    C[<span class="number">1</span>] = G[<span class="number">0</span>] |(P[<span class="number">0</span>] &amp; C[<span class="number">0</span>]);<span class="comment">//c=add1add2+(add1+add2)cin=G|(P&amp;cin)</span></span><br><span class="line">    sum[<span class="number">1</span>] = G[<span class="number">1</span>] ^ P[<span class="number">1</span>] ^ C[<span class="number">1</span>];</span><br><span class="line">    G[<span class="number">2</span>] = add1[<span class="number">2</span>] &amp; add2[<span class="number">2</span>];</span><br><span class="line">    P[<span class="number">2</span>] = add1[<span class="number">2</span>] ^ add2[<span class="number">2</span>];</span><br><span class="line">    C[<span class="number">2</span>] = G[<span class="number">1</span>] |(P[<span class="number">1</span>] &amp; C[<span class="number">1</span>]);</span><br><span class="line">    sum[<span class="number">2</span>] = G[<span class="number">2</span>] ^ P[<span class="number">2</span>] ^ C[<span class="number">2</span>];</span><br><span class="line">    G[<span class="number">3</span>] = add1[<span class="number">3</span>]&amp; add2[<span class="number">3</span>];</span><br><span class="line">    P[<span class="number">3</span>] = add1[<span class="number">3</span>] ^ add2[<span class="number">3</span>];</span><br><span class="line">    C[<span class="number">3</span>] = G[<span class="number">2</span>] |(P[<span class="number">2</span>] &amp; C[<span class="number">2</span>]);</span><br><span class="line">    sum[<span class="number">3</span>] = G[<span class="number">3</span>] ^ P[<span class="number">3</span>] ^ C[<span class="number">3</span>];</span><br><span class="line">    G[<span class="number">4</span>] = add1[<span class="number">4</span>] &amp; add2[<span class="number">4</span>];</span><br><span class="line">    P[<span class="number">4</span>] = add1[<span class="number">4</span>] ^ add2[<span class="number">4</span>];</span><br><span class="line">    C[<span class="number">4</span>] = G[<span class="number">3</span>] |(P[<span class="number">3</span>] &amp; C[<span class="number">3</span>]);</span><br><span class="line">    sum[<span class="number">4</span>] = G[<span class="number">4</span>] ^ P[<span class="number">4</span>] ^ C[<span class="number">4</span>];</span><br><span class="line">    G[<span class="number">5</span>] = add1[<span class="number">5</span>] &amp; add2[<span class="number">5</span>];</span><br><span class="line">    P[<span class="number">5</span>] = add1[<span class="number">5</span>] ^ add2[<span class="number">5</span>];</span><br><span class="line">    C[<span class="number">5</span>] = G[<span class="number">4</span>] |(P[<span class="number">4</span>] &amp; C[<span class="number">4</span>]);</span><br><span class="line">    sum[<span class="number">5</span>] = G[<span class="number">5</span>] ^ P[<span class="number">5</span>] ^ C[<span class="number">5</span>];</span><br><span class="line">    G[<span class="number">6</span>] = add1[<span class="number">6</span>] &amp; add2[<span class="number">6</span>];</span><br><span class="line">    P[<span class="number">6</span>] = add1[<span class="number">6</span>] ^ add2[<span class="number">6</span>];</span><br><span class="line">    C[<span class="number">6</span>] = G[<span class="number">5</span>] |(P[<span class="number">5</span>] &amp; C[<span class="number">5</span>]);</span><br><span class="line">    sum[<span class="number">6</span>] = G[<span class="number">6</span>] ^ P[<span class="number">6</span>] ^ C[<span class="number">6</span>];</span><br><span class="line">    G[<span class="number">7</span>] = add1[<span class="number">7</span>] &amp; add2[<span class="number">7</span>];</span><br><span class="line">    P[<span class="number">7</span>] = add1[<span class="number">7</span>] ^ add2[<span class="number">7</span>];</span><br><span class="line">    C[<span class="number">7</span>] = G[<span class="number">6</span>] |(P[<span class="number">6</span>] &amp; C[<span class="number">6</span>]);</span><br><span class="line">    sum[<span class="number">7</span>] = G[<span class="number">7</span>] ^ P[<span class="number">7</span>] ^ C[<span class="number">7</span>];</span><br><span class="line">    cout = G[<span class="number">7</span>] |(P[<span class="number">7</span>] &amp; C[<span class="number">7</span>]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>这是把上述原理复现了一边，上一步的进位输出，传入到下一位计算的进位输入。</p><p>综合后的电路如下，<code>48</code>个元件，<code>26</code>个<code>IO</code>口，<code>65</code>根线</p><h3 id="综合电路-1"><a href="#综合电路-1" class="headerlink" title="综合电路"></a>综合电路</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107211917238.png" alt="image-20201107211917238"></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>上面的语句重复性太大，就用模块例化的方式来写</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> add_8_2(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] add1,add2,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> cin,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] sum,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> cout</span><br><span class="line">);</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">6</span>:<span class="number">0</span>] c;</span><br><span class="line">    add_1_unit a1(add1[<span class="number">0</span>],add2[<span class="number">0</span>],cin,c[<span class="number">0</span>],sum[<span class="number">0</span>]);</span><br><span class="line">    add_1_unit a2(add1[<span class="number">1</span>],add2[<span class="number">1</span>],c[<span class="number">0</span>],c[<span class="number">1</span>],sum[<span class="number">1</span>]);</span><br><span class="line">    add_1_unit a3(add1[<span class="number">2</span>],add2[<span class="number">2</span>],c[<span class="number">1</span>],c[<span class="number">2</span>],sum[<span class="number">2</span>]);</span><br><span class="line">    add_1_unit a4(add1[<span class="number">3</span>],add2[<span class="number">3</span>],c[<span class="number">2</span>],c[<span class="number">3</span>],sum[<span class="number">3</span>]);</span><br><span class="line">    add_1_unit a5(add1[<span class="number">4</span>],add2[<span class="number">4</span>],c[<span class="number">3</span>],c[<span class="number">4</span>],sum[<span class="number">4</span>]);</span><br><span class="line">    add_1_unit a6(add1[<span class="number">5</span>],add2[<span class="number">5</span>],c[<span class="number">4</span>],c[<span class="number">5</span>],sum[<span class="number">5</span>]);</span><br><span class="line">    add_1_unit a7(add1[<span class="number">6</span>],add2[<span class="number">6</span>],c[<span class="number">5</span>],c[<span class="number">6</span>],sum[<span class="number">6</span>]);</span><br><span class="line">    add_1_unit a8(add1[<span class="number">7</span>],add2[<span class="number">7</span>],c[<span class="number">6</span>],cout,sum[<span class="number">7</span>]);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>其中的<code>add_1_unit</code>模块如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> add_1_unit(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> add1,add2,cin,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> cout,sum</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">assign</span> cout = (add1 &amp; add2) | (cin &amp; (add1 ^ add2));</span><br><span class="line">    <span class="keyword">assign</span> sum = add1 ^ add2 ^ cin;    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>综合后的电路如下，全展开后有<code>48</code>个元件，<code>26</code>个<code>IO</code>口，<code>97</code>根线</p><h3 id="综合电路-2"><a href="#综合电路-2" class="headerlink" title="综合电路"></a>综合电路</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107211509863.png" alt="image-20201107211509863"></p><p>其中的每一个单元如下：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107211540510.png" alt="image-20201107211540510"></p><p>全展开后如下：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107212247756.png" alt="image-20201107212247756"></p><p>两种写法</p><p>数据总线的数量有区别：一个是<code>65</code>根线，一个是<code>97</code>根线。</p><p>代码量有区别：一个<code>40</code>行左右，一个总共<code>27</code>行左右。</p><p>优缺点不言而喻。</p><h2 id="测试文件-1"><a href="#测试文件-1" class="headerlink" title="测试文件"></a>测试文件</h2><p>都是八位加法器，与超前进位加法器也没区别</p><p>还是放一下吧：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> add_tb();</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] add1,add2;</span><br><span class="line">    <span class="keyword">reg</span> cin;</span><br><span class="line">    <span class="keyword">reg</span> clk;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">wire</span> cout;</span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        add1 &lt;= <span class="number">8&#x27;d10</span>;</span><br><span class="line">        add2 &lt;= <span class="number">8&#x27;d3</span>;</span><br><span class="line">        cin &lt;= <span class="number">1&#x27;b0</span>;     </span><br><span class="line">        clk &lt;= <span class="number">1&#x27;b0</span>;   </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span> # <span class="number">10</span> clk = ~clk;</span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">negedge</span> clk) <span class="keyword">begin</span></span><br><span class="line">        &#123;add1,add2&#125; &lt;= &#123;add1,add2&#125; + <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    add_8_2 try(<span class="variable">.add1</span>(add1),<span class="variable">.add2</span>(add2),<span class="variable">.cin</span>(cin),<span class="variable">.sum</span>(sum),<span class="variable">.cout</span>(cout));</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="仿真波形-1"><a href="#仿真波形-1" class="headerlink" title="仿真波形"></a>仿真波形</h2><p>与超前进位一致，用二进制查看一下如下图：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201107214523763.png" alt="image-20201107214523763"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>行波进位加法器，由于后一位的进位依赖于前一位的进位，所以关键路径更长，限制速度，性能不高，</p><p>超前进位加法器，由于进位计算是并行的，所以关键路径短，速度快，但是位宽越宽，也就代表会综合出更复杂的、面积更大的电路。</p>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> 加法器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React实现五子棋游戏</title>
      <link href="/2020/web%E7%BB%93%E8%AF%BE%E8%AE%BA%E6%96%87/"/>
      <url>/2020/web%E7%BB%93%E8%AF%BE%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="React实现五子棋游戏"><a href="#React实现五子棋游戏" class="headerlink" title="React实现五子棋游戏"></a>React实现五子棋游戏</h1><span id="more"></span><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>React 最早起源于 Facebook 的一个内部项目，因为公司对现有的 Javascript MVC 框架都不满意，就决定自己开发一套，用来架设 Instagram 的网站。开发完成后，发现这套东西很好用，就在 2013 年 5 月开源了。</p><p>Javascript操作网页的接口，全称为“文档对象模型”(Document Object Model)，简称DOM。而在网页对象层级之间，元素与元素的关系形成DOM树，在 DOM 树的状态需要发生变化时，虚拟 DOM 机制会将同一 Event loop 前后的 DOM 树进行对比，如果两个 DOM 树存在不一样的地方，那么 React 仅仅会针对这些不一样的区域来进行响应的 DOM 修改，从而实现最高效的 DOM 操作和渲染。</p><p>此外，在 React 里提及的“组件”，常规是一些可封装起来、复用的 UI 模块，可以理解为“带有细粒度 UI 功能的部分 DOM 区域”。然后我们可以把这些组件层层嵌套起来使用，当然这样组件间会存在依赖关系。</p><p>为了分析网站的结构，以及更好的学习React中组件的使用方法，面向对象的编程思想，本文通过搭建一个前端五子棋界面，对React的响应方式进行研究。</p><p>关键词：React；高效渲染；五子棋；</p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h3><p>MVC是一种设计模式，它将应用划分为3个部分：数据（模型）、展现层（视图）和用户交互（控制器）。React主要用于构建UI。从MVC模式中，只作为V层（视图层），即用React写Html+CSS。</p><p>React不同于传统的Html+CSS+Js的Web页面开发模式，它更强调组件化，使用组件的方式聚焦于视图层，借助Jsx来写高内聚UI组件，单向数据流模式使得UI组件状态的维护管理更加清晰。用React开发，组件化抽离页面元素，页面实现是相当于是拼装模式，对于页面相似度大的业务，会显得特高效、快捷。</p><h3 id="论文组织结构"><a href="#论文组织结构" class="headerlink" title="论文组织结构"></a>论文组织结构</h3><p>论文共分为四个章节，组织结构如下。</p><p>第一章 绪论。主要介绍react的研究背景和价值，并对本文的研究内容和技术路线做出概要描述。</p><p>第二章 论文研究基础。本章首先要介绍Html5、CSS、Javascript的相关基础知识进行陈述。接着再介绍React的基础语法。</p><p>第三章 React五子棋的实现细节。本章主要对五子棋的实现思路和部分代码进行解析，从而研究React的实现模式。</p><p>第四章 总结与展望。主要内容是对论文工作的总结和展望。</p><h2 id="论文研究基础"><a href="#论文研究基础" class="headerlink" title="论文研究基础"></a>论文研究基础</h2><p>本章主要介绍论文设计的相关背景知识。首先介绍Html5、CSS、Javascript的相关基础知识，接着再介绍React的使用方法。</p><h3 id="Html5"><a href="#Html5" class="headerlink" title="Html5"></a>Html5</h3><p>HTML5 是 HyperText Markup Language 5 的缩写，HTML5 技术结合了 HTML4.01 的相关标准并革新，符合现代网络发展要求，在 2008 年正式发布。HTML5 由不同的技术构成，其在互联网中得到了非常广泛的应用，提供更多增强网络应用的标准机。与传统的技术相比，HTML5 的语法特征更加明显，并且结合了SVG的内容。这些内容在网页中使用可以更加便捷地处理多媒体内容，而且 HTML5中还结合了其他元素，对原有的功能进行调整和修改，进行标准化工作。</p><p>为了更好地处理今天的互联网应用，HTML5添加了很多新元素及功能，比如： 图形的绘制，多媒体内容，更好的页面结构，更好的形式 处理，和几个api拖放元素，定位，包括网页 应用程序缓存，存储，网络工作者，等。</p><p>HTML5 新标签</p><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&lt;!DOCTYPE&gt;</td><td align="center">定义文档类型。</td></tr><tr><td align="center"><code>&lt;html&gt;</code></td><td align="center">定义一个 HTML 文档</td></tr><tr><td align="center"><code>&lt;title&gt;</code></td><td align="center">为文档定义一个标题</td></tr><tr><td align="center"><code>&lt;body&gt;</code></td><td align="center">定义文档的主体</td></tr><tr><td align="center"><code>&lt;h1&gt;</code>to<code>&lt;h6&gt;</code></td><td align="center">定义 HTML 标题</td></tr><tr><td align="center"><code>&lt;p&gt;</code></td><td align="center">定义一个段落</td></tr><tr><td align="center"><code>&lt;br&gt;</code></td><td align="center">定义简单的折行。</td></tr><tr><td align="center"><code>&lt;hr&gt;</code></td><td align="center">定义水平线。</td></tr><tr><td align="center"><code>&lt;!--…--&gt;</code></td><td align="center">定义一个注释</td></tr></tbody></table><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p><p>CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。</p><p>CSS样式可以直接存储于HTML网页或者单独的样式单文件。无论哪一种方式，样式单包含将样式应用到指定类型的元素的规则。外部使用时，样式单规则被放置在一个带有文件扩展名_css的外部样式单文档中。</p><p>样式规则是可应用于网页中元素，如文本段落或链接的格式化指令。样式规则由一个或多个样式属性及其值组成。内部样式单直接放在网页中，外部样式单保存在独立的文档中，网页通过一个特殊标签链接外部样式单。</p><p>名称CSS中的“层叠（cascading）”表示样式单规则应用于HTML文档元素的方式。具体地说，CSS样式单中的样式形成一个层次结构，更具体的样式覆盖通用样式。样式规则的优先级由CSS根据这个层次结构决定，从而实现级联效果。</p><p>CSS字体（Font） 属性</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">font</td><td align="center">在一个声明中设置所有字体属性</td></tr><tr><td align="center">font-family</td><td align="center">规定文本的字体系列</td></tr><tr><td align="center">font-size</td><td align="center">规定文本的字体尺寸</td></tr><tr><td align="center">font-style</td><td align="center">规定文本的字体样式</td></tr><tr><td align="center">font-variant</td><td align="center">规定文本的字体样式</td></tr><tr><td align="center">font-weight</td><td align="center">规定字体的粗细</td></tr><tr><td align="center">@font-face</td><td align="center">一个规则，允许网站下载并使用其他超过”Web- safe”字体的字体</td></tr><tr><td align="center">font-size-adjust</td><td align="center">为元素规定 aspect 值</td></tr><tr><td align="center">font-stretch</td><td align="center">收缩或拉伸当前的字体系列</td></tr></tbody></table><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><p>JavaScript（通常缩写为JS）是一种高级的、解释型的编程语言[8]。JavaScript是一门基于原型、函数先行的语言[9]，是一门多范式的语言，它支持面向对象程序设计，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。</p><p>JavaScript 语句标识符 (关键字) ：</p><table><thead><tr><th align="center">语句</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">break</td><td align="center">用于跳出循环。</td></tr><tr><td align="center">catch</td><td align="center">语句块，在 try 语句块执行出错时执行 catch 语句块。</td></tr><tr><td align="center">continue</td><td align="center">跳过循环中的一个迭代。</td></tr><tr><td align="center">do … while</td><td align="center">执行一个语句块，在条件语句为 true 时继续执行该语句块。</td></tr><tr><td align="center">for</td><td align="center">在条件语句为 true 时，可以将代码块执行指定的次数。</td></tr><tr><td align="center">for … in</td><td align="center">用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。</td></tr><tr><td align="center">function</td><td align="center">定义一个函数</td></tr><tr><td align="center">if … else</td><td align="center">用于基于不同的条件来执行不同的动作。</td></tr><tr><td align="center">return</td><td align="center">退出函数</td></tr><tr><td align="center">switch</td><td align="center">用于基于不同的条件来执行不同的动作。</td></tr><tr><td align="center">throw</td><td align="center">抛出（生成）错误 。</td></tr><tr><td align="center">try</td><td align="center">实现错误处理，与 catch 一同使用。</td></tr><tr><td align="center">var</td><td align="center">声明一个变量。</td></tr><tr><td align="center">while</td><td align="center">当条件语句为 true 时，执行语句块。</td></tr></tbody></table><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>React（有时叫React.js或ReactJS），是一个为数据提供渲染为HTML视图的开源JavaScript 库。React视图通常采用包含以自定义HTML标记规定的其他组件的组件渲染。React为程序员提供了一种子组件不能直接影响外层组件（”data flows down”）的模型，数据改变时对HTML文档的有效更新，和现代单页应用中组件之间干净的分离。</p><p>React 的核心思想是：封装组件。各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。基于这种方式的一个直观感受就是我们不再需要不厌其烦地来回查找某个 DOM 元素，然后操作 DOM 去更改 UI。</p><p>所以React的本质还是Javascript语言，但其应用都是构建在组件之上。所以有必要再了解其组件以及相关语法JSX。</p><p>将 HTML 直接嵌入了 JS 代码里面，这个就是 React 提出的一种叫 <em>JSX</em> 的语法，这应该是最开始接触 React 最不能接受的设定之一，因为前端被“表现和逻辑层分离”这种思想“洗脑”太久了。但实际上组件的 HTML 是组成一个组件不可分割的一部分，能够将 HTML 封装起来才是组件的完全体，React 发明了 JSX 让 JS 支持嵌入 HTML 不得不说是一种非常聪明的做法，让前端实现真正意义上的组件化成为了可能。</p><h2 id="React五子棋的实现细节"><a href="#React五子棋的实现细节" class="headerlink" title="React五子棋的实现细节"></a>React五子棋的实现细节</h2><p>本章开始介绍五子棋的实现细节。</p><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><p>首先设定界面的大小——15x15的正方形棋盘，下面的VALUE_TEXT用于将逻辑判断标准0、1、2，对应显示为“”、“O”、“X”，即将棋盘上可能出现的三种图标与数字逻辑0、1、2分别对应起来，用于之后的判断。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 五子棋行数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ROW_COUNT = <span class="number">15</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 五子棋列数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  COL_COUNT = <span class="number">15</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 值对应的显示文本</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VALUE_TEXT = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;O&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;X&quot;</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>创建棋盘之后，对棋盘默认的填充为空值，以此显示一个空棋盘作为初始界面。下面的棋子单元格将15x15的大棋盘划分成225个1x1的单元。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建原始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crateGridArr</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> outData = [],</span><br><span class="line">    rowData = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; col; i++) &#123;</span><br><span class="line">    rowData.push(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">    outData.push(rowData.concat());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> outData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 棋子单元格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">label</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">square</span> $&#123;<span class="attr">props.active</span> ? &quot;<span class="attr">active</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">datarow</span>=<span class="string">&#123;props.row&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">datacol</span>=<span class="string">&#123;props.col&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;VALUE_TEXT[props.value]&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/web%E7%BB%93%E8%AF%BE%E8%AE%BA%E6%96%87/image-20201028170623674.png" alt="棋盘界面图示"></p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>利用数据结构栈，将棋盘上的行为次数记录下来，如果栈的长度超过规定的最大长度，就将数据右移存入栈尾。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈，只存放设定长度的数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StepStack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">maxLength</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.maxLength = maxLength;</span><br><span class="line">    <span class="built_in">this</span>.stack = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.stack.length &gt; <span class="built_in">this</span>.maxLength) &#123;</span><br><span class="line">      <span class="built_in">this</span>.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.stack.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">shift</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stack.shift();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">rollback</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> outData = <span class="built_in">this</span>.stack.splice(index);</span><br><span class="line">    <span class="keyword">return</span> outData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">stacks</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack.concat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">reset</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stack = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了分别记录游戏双方的数据，通过三个参数，分别记录选手，以及其下子的横纵坐标。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加记录</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">addStack</span>(<span class="params">x, y, user</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stepStack.push(&#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      user</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>除了记录添加的数据，本文还进行了悔棋和重玩两种功能设计，悔棋时只需将之前存入的数据，按照后进先出的规则依次出栈即可；考虑到游戏的可玩性与项目的设计性，只需保留20步记录，即最多悔棋20步。</p><p>重玩则是将栈清空。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gomoku</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">// 生成15X15的网格数据，O:1，X:2</span></span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">grid</span>: crateGridArr(ROW_COUNT, COL_COUNT),</span><br><span class="line">      <span class="attr">steps</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.curUser = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.gameOver = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.result = [];</span><br><span class="line">    <span class="comment">// 只保留最近20步的记录</span></span><br><span class="line">    <span class="built_in">this</span>.stepStack = <span class="keyword">new</span> StepStack(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">this</span>.reSet = <span class="built_in">this</span>.reSet.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="comment">//悔棋  </span></span><br><span class="line">  <span class="function"><span class="title">rollback</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target.className !== <span class="string">&quot;step&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> target = e.target,</span><br><span class="line">      index = +target.getAttribute(<span class="string">&quot;dataindex&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rollData = <span class="built_in">this</span>.stepStack.rollback(index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (rollData.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">this</span>.state.grid.concat();</span><br><span class="line">    rollData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      data[item.x][item.y] = <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setStaticState([], rollData[<span class="number">0</span>].user);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">grid</span>: data,</span><br><span class="line">      <span class="attr">steps</span>: <span class="built_in">this</span>.stepStack.stacks()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//重玩</span></span><br><span class="line">  <span class="function"><span class="title">reSet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setStaticState([], <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">this</span>.stepStack.reset();</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">grid</span>: crateGridArr(ROW_COUNT, COL_COUNT),</span><br><span class="line">      <span class="attr">steps</span>: []</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h3><p>落子功能的设计很简单，作为一个鼠标点击的游戏，只需要将其设置为button按钮，然后按照“X”、“O”玩家的依次点击，对button设置相应的事件，轮流返回“X”、“O”对应的1或2数值即可判断。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每一步的button</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Step</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;step&quot;</span> <span class="attr">dataindex</span>=<span class="string">&#123;props.index&#125;</span>&gt;</span>&#123;`[$&#123;</span></span><br><span class="line"><span class="xml">      VALUE_TEXT[props.user]</span></span><br><span class="line"><span class="xml">    &#125;] Moves To [$&#123;props.coordinate&#125;]`&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是落子的逻辑判断，如果落子处的VALUE_TEXT不为0，即该处不为空，则不允许落子；如果游戏结束，也不允许落子。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 下棋</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> target = e.target;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.gameOver || !target.getAttribute(<span class="string">&quot;datarow&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> row = +target.getAttribute(<span class="string">&quot;datarow&quot;</span>),</span><br><span class="line">      col = +target.getAttribute(<span class="string">&quot;datacol&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state.grid[row][col] !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;当前单元格已被使用.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">this</span>.state.grid.concat();</span><br><span class="line">    data[row][col] = <span class="built_in">this</span>.curUser;</span><br><span class="line">    <span class="built_in">this</span>.addStack(row, col, <span class="built_in">this</span>.curUser);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = checkWin(data, row, col);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setStaticState(result);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">grid</span>: data,</span><br><span class="line">      <span class="attr">steps</span>: <span class="built_in">this</span>.stepStack.stacks()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setCurUser</span>(<span class="params">user</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="built_in">this</span>.curUser = user;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.curUser = <span class="built_in">this</span>.curUser === <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setStaticState</span>(<span class="params">result, user</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.result = [];</span><br><span class="line">    <span class="keyword">if</span> (result &amp;&amp; result.length === <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.gameOver = <span class="literal">true</span>;</span><br><span class="line">      result.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result.push(<span class="string">`<span class="subst">$&#123;item.x&#125;</span>-<span class="subst">$&#123;item.y&#125;</span>`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.gameOver = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setCurUser(user);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>游戏结束的标志有两种：一种是有一方胜利，另一种是棋盘已经下满，即“和棋”。</p><p><img src="/images/web%E7%BB%93%E8%AF%BE%E8%AE%BA%E6%96%87/image-20201028170531403.png" alt="一方胜利图示"></p><p><img src="/images/web%E7%BB%93%E8%AF%BE%E8%AE%BA%E6%96%87/image-20201028170428568.png" alt="棋盘下满清理图示"></p><p>其中棋盘下满的情况容易判断，这里只实现一方胜利的逻辑判断。</p><p>对棋面情况的判断有四种，即横向、纵向、左斜线方向、右斜线方向，只要在某一方向上的棋子达到5个，即为游戏胜利。代码实现如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> direction = &#123;</span><br><span class="line">  <span class="attr">horizontal</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">vertical</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">leftOblique</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">rightOblique</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params">arr, x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> target = arr[x][y],</span><br><span class="line">    rowLen = arr.length,</span><br><span class="line">    colLen = arr[<span class="number">0</span>].length,</span><br><span class="line">    startNode = &#123; x, y &#125;,</span><br><span class="line">    nodeList;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.x &gt;= rowLen || node.x &lt; <span class="number">0</span> || node.y &gt;= colLen || node.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[node.x][node.y] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">    nodeList = [startNode];</span><br><span class="line">    <span class="keyword">let</span> left = startNode,</span><br><span class="line">      right = startNode,</span><br><span class="line">      leftVal = <span class="literal">true</span>,</span><br><span class="line">      rightVal = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前节点出发，左右或者上下同时检测</span></span><br><span class="line">    <span class="keyword">while</span> (leftVal || rightVal) &#123;</span><br><span class="line">      <span class="keyword">if</span> (leftVal) &#123;</span><br><span class="line">        left = getCoordinate(i, left, -<span class="number">1</span>);</span><br><span class="line">        leftVal = check(left) &amp;&amp; nodeList.push(left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rightVal) &#123;</span><br><span class="line">        right = getCoordinate(i, right, <span class="number">1</span>);</span><br><span class="line">        rightVal = check(right) &amp;&amp; nodeList.push(right);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nodeList.length === <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nodeList;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodeList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCoordinate</span>(<span class="params">direct, node, tag</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newNode;</span><br><span class="line">  <span class="keyword">switch</span> (direct) &#123;</span><br><span class="line">    <span class="keyword">case</span> direction.horizontal:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x,</span><br><span class="line">        <span class="attr">y</span>: node.y + tag</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> direction.vertical:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x + tag,</span><br><span class="line">        <span class="attr">y</span>: node.y</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> direction.leftOblique:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x + tag,</span><br><span class="line">        <span class="attr">y</span>: node.y + tag</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> direction.rightOblique:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x - tag,</span><br><span class="line">        <span class="attr">y</span>: node.y + tag</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="attr">y</span>: -<span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>本次设计，更加了解前端工程的奇妙之处，一个小游戏的运行到部署只需要写几百行代码，React的实时渲染也着实令人感到惊叹，简单的CSS代码即可让一个网页有如此美感，性能高的让人称赞。</p><p>此次五子棋的设计所涉及到的难点就在于父子组件通信，在不同的函数中传递不同的返回值，而onClick事件也有更高明的写法，其思想在各方面的编程中都有所影响。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[0]<a href="https://segmentfault.com/a/1190000018946570">React 官网示例实现 + 五子棋 + 简单文章发表 demo</a>——其中代码实现来源于此，我只是将必要代码筛选出来，成一个单独的项目</p><p>[1]<a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/tutorial/tutorial.html#what-is-react">入门教程: 认识 React </a></p><p>[2]<a href="https://react-1251415695.cos-website.ap-chengdu.myqcloud.com/docs/create-a-new-react-app.html#create-react-app">创建新的 React 应用</a></p><p>[3]<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript（JS 教程）</a></p><p>[4]<a href="https://www.jianshu.com/p/2f6d81a15d81">react中的state和props</a></p><p>[5]<a href="https://www.jianshu.com/p/eba2b76b290b">聊一聊我对 React Context 的理解以及应用</a></p><p>[6]<a href="https://www.cnblogs.com/qiqi715/p/10513195.html">react优缺点</a>](<a href="https://www.cnblogs.com/qiqi715/p/10513195.html">https://www.cnblogs.com/qiqi715/p/10513195.html</a>)</p><p>[7]<a href="https://www.jianshu.com/p/0ec77136ec48">DOM、DOM树</a></p><p>[8]<a href="https://zh.wikipedia.org/wiki/React">React</a></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 五子棋行数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  ROW_COUNT = <span class="number">15</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 五子棋列数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  COL_COUNT = <span class="number">15</span>,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 值对应的显示文本</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  VALUE_TEXT = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">&quot;O&quot;</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">&quot;X&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建原始数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crateGridArr</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> outData = [],</span><br><span class="line">    rowData = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; col; i++) &#123;</span><br><span class="line">    rowData.push(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">    outData.push(rowData.concat());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> outData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈，只存放设定长度的数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StepStack</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">maxLength</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.maxLength = maxLength;</span><br><span class="line">    <span class="built_in">this</span>.stack = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.stack.length &gt; <span class="built_in">this</span>.maxLength) &#123;</span><br><span class="line">      <span class="built_in">this</span>.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.stack.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">shift</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.stack.shift();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">rollback</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> outData = <span class="built_in">this</span>.stack.splice(index);</span><br><span class="line">    <span class="keyword">return</span> outData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">stacks</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack.concat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">reset</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stack = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 棋子单元格</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">label</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">square</span> $&#123;<span class="attr">props.active</span> ? &quot;<span class="attr">active</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">datarow</span>=<span class="string">&#123;props.row&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">datacol</span>=<span class="string">&#123;props.col&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;VALUE_TEXT[props.value]&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每一步的button</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Step</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;step&quot;</span> <span class="attr">dataindex</span>=<span class="string">&#123;props.index&#125;</span>&gt;</span>&#123;`[$&#123;</span></span><br><span class="line"><span class="xml">      VALUE_TEXT[props.user]</span></span><br><span class="line"><span class="xml">    &#125;] Moves To [$&#123;props.coordinate&#125;]`&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 五子棋</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gomoku</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成15X15的网格数据，O:1，X:2</span></span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">grid</span>: crateGridArr(ROW_COUNT, COL_COUNT),</span><br><span class="line">      <span class="attr">steps</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.curUser = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.gameOver = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.result = [];</span><br><span class="line">    <span class="comment">// 只保留最近20步的记录</span></span><br><span class="line">    <span class="built_in">this</span>.stepStack = <span class="keyword">new</span> StepStack(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">this</span>.reSet = <span class="built_in">this</span>.reSet.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 下棋</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">handleClick</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> target = e.target;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.gameOver || !target.getAttribute(<span class="string">&quot;datarow&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> row = +target.getAttribute(<span class="string">&quot;datarow&quot;</span>),</span><br><span class="line">      col = +target.getAttribute(<span class="string">&quot;datacol&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state.grid[row][col] !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;当前单元格已被使用.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">this</span>.state.grid.concat();</span><br><span class="line">    data[row][col] = <span class="built_in">this</span>.curUser;</span><br><span class="line">    <span class="built_in">this</span>.addStack(row, col, <span class="built_in">this</span>.curUser);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = checkWin(data, row, col);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setStaticState(result);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">grid</span>: data,</span><br><span class="line">      <span class="attr">steps</span>: <span class="built_in">this</span>.stepStack.stacks()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setCurUser</span>(<span class="params">user</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">      <span class="built_in">this</span>.curUser = user;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.curUser = <span class="built_in">this</span>.curUser === <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">setStaticState</span>(<span class="params">result, user</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.result = [];</span><br><span class="line">    <span class="keyword">if</span> (result &amp;&amp; result.length === <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.gameOver = <span class="literal">true</span>;</span><br><span class="line">      result.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result.push(<span class="string">`<span class="subst">$&#123;item.x&#125;</span>-<span class="subst">$&#123;item.y&#125;</span>`</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.gameOver = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.setCurUser(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加记录</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">addStack</span>(<span class="params">x, y, user</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.stepStack.push(&#123;</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      user</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 悔棋</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">rollback</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.target.className !== <span class="string">&quot;step&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> target = e.target,</span><br><span class="line">      index = +target.getAttribute(<span class="string">&quot;dataindex&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> rollData = <span class="built_in">this</span>.stepStack.rollback(index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (rollData.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">this</span>.state.grid.concat();</span><br><span class="line">    rollData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      data[item.x][item.y] = <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setStaticState([], rollData[<span class="number">0</span>].user);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">grid</span>: data,</span><br><span class="line">      <span class="attr">steps</span>: <span class="built_in">this</span>.stepStack.stacks()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">reSet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setStaticState([], <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">this</span>.stepStack.reset();</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      <span class="attr">grid</span>: crateGridArr(ROW_COUNT, COL_COUNT),</span><br><span class="line">      <span class="attr">steps</span>: []</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> text = <span class="built_in">this</span>.gameOver</span><br><span class="line">      ? <span class="string">`Winner: <span class="subst">$&#123;VALUE_TEXT[<span class="built_in">this</span>.curUser === <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>]&#125;</span>`</span></span><br><span class="line">      : <span class="string">`Next Player: <span class="subst">$&#123;VALUE_TEXT[<span class="built_in">this</span>.curUser]&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;gomoku-box&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> this.handleClick(e)&#125;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;gomoku-bar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.reSet&#125;</span>&gt;</span>Restart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;square-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;this.state.grid.map((row, i) =&gt; &#123;</span></span><br><span class="line"><span class="xml">              return (</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> <span class="attr">className</span>=<span class="string">&quot;square-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  &#123;row.map((cell, j) =&gt; &#123;</span></span><br><span class="line"><span class="xml">                    let key = `$&#123;i&#125;-$&#123;j&#125;`;</span></span><br><span class="line"><span class="xml">                    return (</span></span><br><span class="line"><span class="xml">                      <span class="tag">&lt;<span class="name">Square</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">key</span>=<span class="string">&#123;key&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">active</span>=<span class="string">&#123;this.gameOver</span> &amp;&amp; <span class="attr">this.result.includes</span>(<span class="attr">key</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">value</span>=<span class="string">&#123;cell&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">row</span>=<span class="string">&#123;i&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                        <span class="attr">col</span>=<span class="string">&#123;j&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                      /&gt;</span></span></span><br><span class="line"><span class="xml">                    );</span></span><br><span class="line"><span class="xml">                  &#125;)&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">              );</span></span><br><span class="line"><span class="xml">            &#125;)&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;step-box&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> this.rollback(e)&#125;&gt;</span></span><br><span class="line"><span class="xml">            &#123;this.state.steps.map((step, i) =&gt; &#123;</span></span><br><span class="line"><span class="xml">              let coordinate = `$&#123;step.x&#125;,$&#123;step.y&#125;`;</span></span><br><span class="line"><span class="xml">              return (</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">Step</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">key</span>=<span class="string">&#123;coordinate&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">index</span>=<span class="string">&#123;i&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">coordinate</span>=<span class="string">&#123;coordinate&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                  <span class="attr">user</span>=<span class="string">&#123;step.user&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                /&gt;</span></span></span><br><span class="line"><span class="xml">              );</span></span><br><span class="line"><span class="xml">            &#125;)&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-left&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Gomoku</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> direction = &#123;</span><br><span class="line">  <span class="attr">horizontal</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">vertical</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">leftOblique</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">rightOblique</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前游戏是否结束</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">arr</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>x 当前棋子的横坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>y 当前棋子的纵坐标</span></span><br><span class="line"><span class="comment"> * 赢的情况</span></span><br><span class="line"><span class="comment"> * 连续的五个棋子相同</span></span><br><span class="line"><span class="comment"> * 横线，竖线，左斜线，右斜线四种情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkWin</span>(<span class="params">arr, x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> target = arr[x][y],</span><br><span class="line">    rowLen = arr.length,</span><br><span class="line">    colLen = arr[<span class="number">0</span>].length,</span><br><span class="line">    startNode = &#123; x, y &#125;,</span><br><span class="line">    nodeList;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.x &gt;= rowLen || node.x &lt; <span class="number">0</span> || node.y &gt;= colLen || node.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[node.x][node.y] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">    nodeList = [startNode];</span><br><span class="line">    <span class="keyword">let</span> left = startNode,</span><br><span class="line">      right = startNode,</span><br><span class="line">      leftVal = <span class="literal">true</span>,</span><br><span class="line">      rightVal = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从当前节点出发，左右或者上下同时检测</span></span><br><span class="line">    <span class="keyword">while</span> (leftVal || rightVal) &#123;</span><br><span class="line">      <span class="keyword">if</span> (leftVal) &#123;</span><br><span class="line">        left = getCoordinate(i, left, -<span class="number">1</span>);</span><br><span class="line">        leftVal = check(left) &amp;&amp; nodeList.push(left);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (rightVal) &#123;</span><br><span class="line">        right = getCoordinate(i, right, <span class="number">1</span>);</span><br><span class="line">        rightVal = check(right) &amp;&amp; nodeList.push(right);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nodeList.length === <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nodeList;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodeList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCoordinate</span>(<span class="params">direct, node, tag</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newNode;</span><br><span class="line">  <span class="keyword">switch</span> (direct) &#123;</span><br><span class="line">    <span class="keyword">case</span> direction.horizontal:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x,</span><br><span class="line">        <span class="attr">y</span>: node.y + tag</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> direction.vertical:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x + tag,</span><br><span class="line">        <span class="attr">y</span>: node.y</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> direction.leftOblique:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x + tag,</span><br><span class="line">        <span class="attr">y</span>: node.y + tag</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> direction.rightOblique:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: node.x - tag,</span><br><span class="line">        <span class="attr">y</span>: node.y + tag</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      newNode = &#123;</span><br><span class="line">        <span class="attr">x</span>: -<span class="number">1</span>,</span><br><span class="line">        <span class="attr">y</span>: -<span class="number">1</span></span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================================</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Game</span> /&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="index-scss"><a href="#index-scss" class="headerlink" title="index.scss"></a>index.scss</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.game-box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.game-left</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.step</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0084ff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e5f2ff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#add6ff</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.square-box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.square-row</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">102px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.red</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#4ab3ff</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.square</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#4ab3ff</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gomoku-box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.square-row</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.gomoku-bar</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">button</span>,</span><br><span class="line">        <span class="selector-tag">label</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#0084ff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#e5f2ff</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#add6ff</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">            <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">label</span> &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">float</span>: right;</span><br><span class="line">            <span class="attribute">cursor</span>: default;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.game-box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.square-box</span> &#123;</span><br><span class="line">        <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.step-box</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errors&quot;</span> <span class="attr">style</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">  background: #c00;</span></span></span><br><span class="line"><span class="string"><span class="tag">  color: #fff;</span></span></span><br><span class="line"><span class="string"><span class="tag">  display: none;</span></span></span><br><span class="line"><span class="string"><span class="tag">  margin: -20px -20px 20px;</span></span></span><br><span class="line"><span class="string"><span class="tag">  padding: 20px;</span></span></span><br><span class="line"><span class="string"><span class="tag">  white-space: pre-wrap;</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;mouse-navigation&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;kbd-navigation&#x27;</span>);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (e.keyCode === <span class="number">9</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;kbd-navigation&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;mouse-navigation&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (e.target.tagName === <span class="string">&#x27;A&#x27;</span> &amp;&amp; e.target.getAttribute(<span class="string">&#x27;href&#x27;</span>) === <span class="string">&#x27;#&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">    e.preventDefault();</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, line, col, error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> text = error ? error.stack || error : message + <span class="string">&#x27; (at &#x27;</span> + source + <span class="string">&#x27;:&#x27;</span> + line + <span class="string">&#x27;:&#x27;</span> + col + <span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  errors.textContent += text + <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  errors.style.display = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.error = (<span class="function"><span class="keyword">function</span>(<span class="params">old</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    errors.textContent += <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).join(<span class="string">&#x27; &#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    errors.style.display = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    old.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;)(<span class="built_in">console</span>.error);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形化 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Verilog入门</title>
      <link href="/2020/Verilog%E5%85%A5%E9%97%A8/"/>
      <url>/2020/Verilog%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Verilog入门"><a href="#Verilog入门" class="headerlink" title="Verilog入门"></a>Verilog入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最原始的，或许就是最有效的，一些缩写的全称或许是入门的关键。比如<code>xswl</code>（笑死我了）、<code>xmsl</code>（羡慕死了）等。</p><span id="more"></span><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Verilog"><a href="#Verilog" class="headerlink" title="Verilog"></a>Verilog</h3><p>什么是<code>Verilog</code>？遇事蒙圈，上网浏览！</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20200929210846866.png" alt="image-20200929210846866"></p><blockquote><p><strong><code>wikipedia</code></strong>:</p><p><strong>Verilog</strong>是一种用于描述、设计<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E5%AD%A6">电子系统</a>（特别是<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF">数字电路</a>）的<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80">硬件描述语言</a>，主要用于在<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1">集成电路设计</a>，特别是<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E5%A4%A7%E8%A7%84%E6%A8%A1%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF">超大规模集成电路</a>的<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1">计算机辅助设计</a>。Verilog是<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E6%B0%94%E7%94%B5%E5%AD%90%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%AD%A6%E4%BC%9A">电气电子工程师学会</a>（IEEE）的1364号标准。</p></blockquote><p><strong><code>Verilog</code>全称是<code>Verilog Hardware Description Language</code>（<code>Verilog</code> 硬件描述语言），缩写<code>Verilog HDL</code>，简称<code>Verilog</code></strong></p><p><strong>总之，就是用来描述硬件——描述电路的一种语言</strong>，从前，CPU的设计是许多个工程师在纸上绘制的电路图，现在我们可以用变成语言来实现了。</p><h3 id="VHDL"><a href="#VHDL" class="headerlink" title="VHDL"></a>VHDL</h3><p>那么上图中提到的<code>VHDL</code>是什么呢？全称是<code>Very-High-Speed Integerated Circuit Hardware Description Language</code>，这里千万不要以为<code>Verilog HDL</code>和<code>VHDL</code>是一样的东西噢！</p><h3 id="FPGA"><a href="#FPGA" class="headerlink" title="FPGA"></a>FPGA</h3><blockquote><p><strong><code>wikipedia</code></strong>:</p><p><strong>现场可编程逻辑门阵列</strong>（英语：<strong>Field Programmable Gate Array</strong>，缩写为<strong>FPGA</strong>），它以<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A8%8B%E5%BC%8F%E9%99%A3%E5%88%97%E9%82%8F%E8%BC%AF">PAL</a>、<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E9%98%B5%E5%88%97%E9%80%BB%E8%BE%91">GAL</a>、<a href="https://zh.wikipedia.org/wiki/%E8%A4%87%E9%9B%9C%E5%8F%AF%E7%A8%8B%E5%BC%8F%E9%82%8F%E8%BC%AF%E8%A3%9D%E7%BD%AE">CPLD</a>等<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A8%8B%E5%BC%8F%E9%82%8F%E8%BC%AF%E8%A3%9D%E7%BD%AE">可编程逻辑器件</a>为技术基础发展而成。作为<a href="https://zh.wikipedia.org/wiki/%E7%89%B9%E6%AE%8A%E6%87%89%E7%94%A8%E7%A9%8D%E9%AB%94%E9%9B%BB%E8%B7%AF">专用集成电路</a>中的一种半客制电路，它既弥补<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AE%8C%E5%85%A8%E5%AE%A2%E8%A3%BD&action=edit&redlink=1">完全客制</a>电路不足，又克服原有<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8F%AF%E7%B7%A8%E7%A8%8B%E9%82%8F%E8%BC%AF%E5%85%83%E4%BB%B6&action=edit&redlink=1">可编程逻辑组件</a>门电路数有限的缺点。</p></blockquote><h3 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h3><blockquote><p><strong><code>wikipedia</code></strong>:</p><p><strong>电子设计自动化</strong>（英语：<strong>Electronic design automation</strong>，<a href="https://zh.wikipedia.org/wiki/%E7%B8%AE%E5%AF%AB">缩写</a>：<strong>EDA</strong>）是指利用<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%BE%85%E5%8A%A9%E8%AE%BE%E8%AE%A1">计算机辅助设计</a>（CAD）软件，来完成<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E5%A4%A7%E8%A7%84%E6%A8%A1%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF">超大规模集成电路</a>（VLSI）芯片的<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1">功能设计</a>、<a href="https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E7%BB%BC%E5%90%88">综合</a>、<a href="https://zh.wikipedia.org/wiki/%E5%8A%9F%E8%83%BD%E9%AA%8C%E8%AF%81">验证</a>、<a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E7%90%86%E8%AE%BE%E8%AE%A1">物理设计</a>（包括<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E5%B1%80_(%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF)">布局</a>、<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E7%BA%BF_(%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF)">布线</a>、<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E7%94%B5%E8%B7%AF%E7%89%88%E5%9B%BE">版图</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E8%A7%84%E5%88%99%E6%A3%80%E6%9F%A5">设计规则检查</a>等）等流程的设计方式。</p></blockquote><blockquote><p><strong>思考1</strong>：思考硬件描述语言设计方法的优缺点</p></blockquote><h2 id="语法入门"><a href="#语法入门" class="headerlink" title="语法入门"></a>语法入门</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p><del>语言入门是不是都会从<code>Hello World</code>开始emmm</del></p><h4 id="coding-1-0"><a href="#coding-1-0" class="headerlink" title="coding_1.0"></a>coding_1.0</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> helloworld();</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="built_in">$display</span>(<span class="string">&quot;Hello World!&quot;</span>);  </span><br><span class="line"><span class="built_in">$finish</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20200930154001387.png" alt="image-20200930154001387"></p><p>看起来是不是比<code>C</code>还简洁？！接下来我们来探究一下其中的秘密……</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><p>关键字</p><table><thead><tr><th align="center">关键字</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">module</td><td align="center">模块开始定义</td></tr><tr><td align="center">input</td><td align="center">输入端口定义</td></tr><tr><td align="center">output</td><td align="center">输出端口定义</td></tr><tr><td align="center">inout</td><td align="center">双向端口定义</td></tr><tr><td align="center">parameter</td><td align="center">信号的参数定义</td></tr><tr><td align="center">wire</td><td align="center">wire信号定义</td></tr><tr><td align="center">reg</td><td align="center">reg信号定义</td></tr><tr><td align="center">always</td><td align="center">产生reg信号语句的关键字</td></tr><tr><td align="center">assign</td><td align="center">产生wire信号语句的关键字</td></tr><tr><td align="center">begin</td><td align="center">语句的起始标志</td></tr><tr><td align="center">end</td><td align="center">语句的结束标志</td></tr><tr><td align="center">posedge/negedge</td><td align="center">时序电路的标志</td></tr><tr><td align="center">case</td><td align="center">Case语句起始标记</td></tr><tr><td align="center">default</td><td align="center">Case语句的默认分支标志</td></tr><tr><td align="center">endcase</td><td align="center">Case语句结束标记</td></tr><tr><td align="center">if</td><td align="center">if/else语句标记</td></tr><tr><td align="center">else</td><td align="center">if/else语句标记</td></tr><tr><td align="center">for</td><td align="center">for语句标记</td></tr><tr><td align="center">endmodule</td><td align="center">模块结束定义</td></tr></tbody></table></li><li><p>模块结构：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> 模块名(a,b,c,d);</span><br><span class="line">    <span class="keyword">input</span> a,b;</span><br><span class="line">    <span class="keyword">output</span> c,d;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"><span class="comment">//与下面等同</span></span><br><span class="line"><span class="keyword">module</span> 模块名(<span class="keyword">input</span> a,<span class="keyword">input</span> b,<span class="keyword">output</span> c,<span class="keyword">output</span> d);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></li></ul><p>结合上面的代码进行说明：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> helloworld();           <span class="comment">//定义模块，及模块的名字</span></span><br><span class="line"><span class="keyword">initial</span>          <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">begin</span>      <span class="comment">//代码块开始，相当于C语言的&#x27;&#123;&#x27;</span></span><br><span class="line">        <span class="built_in">$display</span>(<span class="string">&quot;Hello World!&quot;</span>);   <span class="comment">//调用输出函数，相当于C语言的printf</span></span><br><span class="line">        <span class="built_in">$finish</span>;       <span class="comment">//调用结束函数，相当于C语言的return 0</span></span><br><span class="line">    <span class="keyword">end</span>  <span class="comment">//代码块结束，相当于C语言的&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">endmodule</span>  <span class="comment">//模块结束</span></span><br></pre></td></tr></table></figure><p>为了让一个程序能够学到更多的东西，我们可以把上面的<code>hello world</code>程序修改的更加细致一些：</p><h4 id="coding-1-1"><a href="#coding-1-1" class="headerlink" title="coding_1.1"></a>coding_1.1</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="meta-keyword">timescale</span> 1ns/100ps</span></span><br><span class="line"><span class="keyword">module</span> helloworld(</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span>[<span class="number">3</span>:<span class="number">0</span>] a,<span class="comment">//定义了输入端口a和b，输出端口result</span></span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span>[<span class="number">6</span>:<span class="number">0</span>] b,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span>  result</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assign</span> a = <span class="number">4&#x27;b0001</span>;<span class="comment">//初始化a和b</span></span><br><span class="line"><span class="keyword">assign</span> b = <span class="number">7&#x27;b0000001</span>;</span><br><span class="line"><span class="keyword">initial</span> <span class="keyword">begin</span>    </span><br><span class="line">        result &lt;= <span class="number">0</span>;<span class="comment">//在a和b相等的条件下初始化result</span></span><br><span class="line">        clk &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">$display</span>(<span class="string">&quot;Hello,I am ready&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> #<span class="number">50</span> clk = ~clk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">$display</span>(<span class="string">&quot;Hello World!&quot;</span>);  </span><br><span class="line"><span class="comment">//            $finish;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> @(clk) <span class="keyword">begin</span></span><br><span class="line">     <span class="built_in">$display</span>(<span class="string">&quot;sir,where am I?&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> @ (result == <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">$display</span>(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>思考2</strong>：<code>wire</code>和<code>reg</code>的区别？为什么<code>a</code>和<code>b</code>用<code>assign...=</code>赋值，而<code>result</code>用<code>always...&lt;=</code>的形式赋值？</p></blockquote><ul><li><p>数据类型及其运算符</p><p>先介绍一下常见的两种数据类型：</p></li></ul><table><thead><tr><th align="center">名称</th><th align="center">含义</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center"><code>reg</code></td><td align="center"><code>register</code>寄存器类型</td><td align="center">reg[3:0] reg_a,reg_b;</td></tr><tr><td align="center"><code>wire</code></td><td align="center"><code>wire</code>线型</td><td align="center">wire[4:0] wire_a,wire_b;</td></tr></tbody></table><p>针对上述<strong>思考2</strong>，应该可以观察到，<code>reg</code>型数据在<code>always</code>块中赋值，<code>wire</code>型数据在<code>assign</code>语句中赋值。这正是<code>reg</code>和<code>wire</code>的区别之一。其中<code>wire</code>对应连续赋值，如<code>assign</code>，<code>reg</code>对应过程赋值，如<code>always</code>和<code>initial</code>。</p><p><code>wire</code>综合之后一般是一根导线，<code>reg</code>则要根据条件判断是组合逻辑（与原先电路状态无关）还是时序逻辑（跟原先电路状态有关）。</p><p><code>wire</code>和<code>reg</code>的使用还是难以用以上几句话说清楚，大家自行继续思考呀~</p><p>再介绍一下运算符：</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201003132847066.png" alt="image-20201003132847066"></p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201003095612690.png" alt="image-20201003095612690"></p><p>和C语言的运算符一毛一样！</p><h3 id="语法小结"><a href="#语法小结" class="headerlink" title="语法小结"></a>语法小结</h3><ol><li>所有的过程块(<code>initial</code>、<code>always</code>)、<code>assign</code>连续赋值语句等，都是并行执行的。</li><li><code>Verilog</code>更加体现了数据传输的思想，表示一种通过变量名互相连接的关系。</li></ol><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p><img src="https://gitee.com/mxdon/img/raw/master/2020/image-20201003154811154.png" alt="image-20201003154811154"></p><ul><li><p>常见的条件语句</p><p><code>if……else</code>、<code>while</code>、<code>case()……endcase</code>、<code>forever begin……end</code>、<code>for(;;)</code>等，具体与<code>C</code>相差无几。</p></li></ul><h3 id="结构说明语句"><a href="#结构说明语句" class="headerlink" title="结构说明语句"></a>结构说明语句</h3><ul><li><p><code>initial</code>——初始化语句，运行程序就立即开始</p></li><li><p><code>always</code>——只要符合条件，就会一直执行</p><blockquote><p><strong>思考3</strong>：<code>always</code>，<code>while</code>、<code>for</code>以及<code>forever</code>有什么区别？</p></blockquote></li><li><p><code>task</code>——任务，<code>task task_name(input a,……);……endtask</code></p></li><li><p><code>function</code>——函数，<code>function function_name(input a,……);……endfunction</code></p></li></ul><blockquote><p><strong>思考4</strong>：任务和函数的区别，也可以扩展了解一下进程和线程的区别，加油！</p></blockquote><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><p>如上面的程序，<code>$display</code>函数就是一个非常有用的系统函数，这里我们不研究它的实现过程，只需要知道怎么用即可，如同<code>C</code>语言的<code>printf</code>，在不同的地方加一句<code>printf</code>，或许会对调试有很大的帮助！</p><p>其他的函数还有<code>$time、$setup、$write</code>等，遇到的时候可以再进行了解。</p><h3 id="系统任务"><a href="#系统任务" class="headerlink" title="系统任务"></a>系统任务</h3><p>与系统函数相似，常用的有<code>$readmemh、$readmemb、$finish、$stop</code>等，其与系统函数的区别，与任务和函数的区别一致。</p><h3 id="必知必会"><a href="#必知必会" class="headerlink" title="必知必会"></a>必知必会</h3><ul><li>``include<code>——文件包含，所有的代码写在一个文件里那是很头疼的一件事，就像所有的器官都长在脑袋里那样令人费解。</code>include`的作用就是将分开的文件联系在一起，具体请查询“预编译”相关解释。</li><li>``timescale<code>—— </code>timescale 10ns/10ps<code> 其中</code>10ns<code>指时间单位，</code>10ps<code>指时间精度，模块中的时间均为</code>10ns<code>的整数倍，时间延迟的最小分辨率为</code>10ps`</li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统开发</title>
      <link href="/2020/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/"/>
      <url>/2020/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前按照北航的操作系统实验指导，第一次完成了一个半吊子<code>Linux</code>内核，但是在龙芯杯<code>pmon</code>引导的过程中，遇到了没解决的<code>bug</code>，为了更好的理解操作系统的开发，我决定从新开始，先走一遍<code>Linus</code>的路，学习<code>Minix</code>的制作，再看一遍<code>HIT</code>李治军的课，再看一下麻省的<code>JOS</code>课程，最后再按照<code>BUAA</code>的<code>OS</code>实验完成基于<code>MIPS</code>的<code>Linux</code>内核。</p><p>冲冲冲！</p><span id="more"></span><h1 id="Minix"><a href="#Minix" class="headerlink" title="Minix"></a>Minix</h1><h1 id="李治军HIT课程"><a href="#李治军HIT课程" class="headerlink" title="李治军HIT课程"></a>李治军HIT课程</h1><p>课程体系：CPU管理、内存管理、终端管理、磁盘管理、文件管理等，此外还有网络管理、电源管理、多核管理，涉及更高层次的学习(高级操作系统)，暂时不进行介绍。</p><p>目标：能改操作系统(改CPU管理、改屏幕输出、改系统接口、改内存管理)</p><p>斯坦福学操作系统的四个实验：</p><table><thead><tr><th align="center">实验一：扩展线程</th><th align="center"><strong>实现线程调度</strong></th></tr></thead><tbody><tr><td align="center"><strong>实验二：实现系统调用</strong></td><td align="center"><strong>将整个接口剥掉，添加</strong></td></tr><tr><td align="center"><strong>实验三：实现虚存管理</strong></td><td align="center"><strong>扩展实现内存管理</strong></td></tr><tr><td align="center"><strong>实验四：扩展文件系统</strong></td><td align="center"><strong>扩展实现一个文件管理</strong></td></tr></tbody></table><h2 id="控制开机界面"><a href="#控制开机界面" class="headerlink" title="控制开机界面"></a>控制开机界面</h2><p>为什么不能用C而要用汇编？因为汇编可以准确的对指定的地址进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制</title>
      <link href="/2020/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
      <url>/2020/%E4%BA%8C%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>世界上分两种人，第<code>1</code>种是知道二进制的，第<code>10</code>种是不知道二进制的。</p><span id="more"></span><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>所谓进制，就是进位制度。</p><p>0 1 2 3 4 5 6 7 8 9，十个基本元素就是十进制</p><table><thead><tr><th align="center">基本元素</th><th align="center">数量</th><th align="center">名称</th><th align="center">进位后</th></tr></thead><tbody><tr><td align="center">0 1 2 3 4 5 6 7 8 9</td><td align="center">10</td><td align="center">十进制</td><td align="center">11 12 13 14 15 16 17 18 19</td></tr><tr><td align="center">0 1 2 3 4 5 6 7</td><td align="center">8</td><td align="center">八进制</td><td align="center">10 11 12 13 14 15 16 17</td></tr><tr><td align="center">0 1 2 3</td><td align="center">4</td><td align="center">四进制</td><td align="center">10 11 12 13</td></tr><tr><td align="center">0 1</td><td align="center">2</td><td align="center">二进制</td><td align="center">10 11</td></tr></tbody></table><blockquote><p><strong>思考1</strong>： 所谓进制，不过如此，那么你知道十六进制的<code>基本元素</code>和<code>第一次进位后</code>的结果是怎样的嘛？</p></blockquote><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><p>我们的学习重点也就是二进制——机器语言的本质。</p><p>首先介绍一个小技巧，为了用二进制表示十进制的数字，需要四个二进制位来才可以完全表示，这样的一种方式形成了不同的编码（雷格码、<code>2421</code>码、<code>8421</code>码，等等），其中有必要介绍一下<code>8421</code>码，又称作<code>BCD</code>码，介绍这个只是为了帮助大家更快的在大脑中转换数据！</p><p>二进制转换成十进制的方法很直白：<br>$$<br>11010 = 1<em>10^4+1</em>10^3+0<em>10^2+1</em>10^1+0*10^0<br>$$</p><p>$$<br>(11010)_2 =1<em>2^4+1</em>2^3+0<em>2^2+1</em>2^1+0*2^0<br>$$</p><p>如果脑子里也这样计算的话，啊这……但是如果按照<code>8421</code>码的位次来记住<code>1111</code>是<code>8+4+2+1=15</code>的话，记住<code>1011</code>是<code>8+0+2+1=11</code>的话，这样貌似可以少思考一些，从而降低因进制转换的脱发风险~（其实就是把每位二进制所对应的十进制数记住而已emmm……）</p><blockquote><p><strong>思考2</strong>：这是<em>二进制到十进制</em>的转换，那么<em>十进制到二进制</em>、<em>十进制到十六进制</em>、<em>十进制与八进制</em>、<em>八进制与二进制</em>、<em>八进制与十六进制</em>、<em>二进制与十六进制</em>的转换，大家自己去学习一下吧~</p></blockquote><h2 id="补码与反码"><a href="#补码与反码" class="headerlink" title="补码与反码"></a>补码与反码</h2><p>先说转换，<code>1</code>取反是<code>0</code>，<code>0</code>取反是<code>1</code></p><table><thead><tr><th align="center"></th><th align="center">方法</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">反码</td><td align="center">正数：不变，负数：首位不变，其他按位取反</td><td align="center">0010 -&gt; 0010    1010 -&gt; 1101</td></tr><tr><td align="center">补码</td><td align="center">正数：不变，负数：反码加一</td><td align="center">0010 -&gt; 0010    1010 -&gt; 1110</td></tr></tbody></table><blockquote><p>PS：首位是<code>1</code>代表负数，首位是<code>0</code>表示正数，这种表示方式称为原码</p></blockquote><p>介绍补码与反码，对日后处理指令运算有重要作用。</p><p>现在以钟表举例，下表是个坏表，现在要把表从<code>10</code>点调整到<code>2</code>点，有两种途径，一个是逆时针转动<code>10 - 2 = 8</code>格，二是顺时针波动时针转动<code>12 - 10 + 2 = 4</code>格，同样的结果，如果换一种表达，即：<br>$$<br>10点 - 8格 = 2点<br>$$</p><p>$$<br>10点+4格-12点=2点<br>$$</p><p><img src="https://gitee.com/mxdon/img/raw/master/2020/5b166326Nd3225ac9.jpg" alt="img"></p><p>道理很简单，钟表可以看成十二进制，令<code>A = 11</code>，<code>B = 12</code>，钟表的进制元素就是<code>0 1 2 3 4 5 6 7 8 9 A B</code></p><p>那么<code>2</code>点就有两个意思，真正的<code>2</code>点，和真正的<code>14</code>点，<code>14</code>点用是二进制表示就是**<code>12</code>点(细品)**，表中只有<code>12</code>个刻度，没办法表示<code>14</code>点，这样就减去进位<code>12(首位的1)</code>，这样就是最后的<code>2</code>点。</p><p>所以这里的<code>4</code>就是<code>-8</code>的补码（十二进制），因为一个数<strong>减<code>8</code>和加<code>4</code>的效果一样</strong>，这就是<strong>补码的意义</strong>。</p><p>这样说显得有些啰嗦，区区一个二进制本不该如此冗余，但也不知道怎么说，那就这样吧~</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在二进制的世界中，一般数字的位数是固定的，就像人的手指数量固定一样。</p><p><strong>假设1</strong>：二进制<strong>只有<code>5</code>位</strong>，首位要表示符号。</p><p><strong>假设2</strong>：二进制的世界中<strong>只有加法，以及反码的运算</strong>，没有其他的运算方式，那么如何<strong>实现减法</strong>呢？</p><p>以<code>7+5</code>、<code>7-5</code>、<code>-7+5</code>、<code>-7-5</code>这四个计算为例：<br>$$<br>7+5=00111+00101=01100<br>$$</p><p>$$<br>-5的反码=11010，-5的补码=11010+1=11011<br>$$</p><p>$$<br>7-5=00111+11011(-5的补码)=00010(本该是100010，但是只有5位，所以舍弃第一位)<br>$$</p><blockquote><p>练习1：剩下的两个运算交给大家啦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>run linux on loongson_FPGA</title>
      <link href="/2020/run-linux-on-loongson-FPGA/"/>
      <url>/2020/run-linux-on-loongson-FPGA/</url>
      
        <content type="html"><![CDATA[<h1 id="必读"><a href="#必读" class="headerlink" title="必读"></a>必读</h1><h2 id="1、运行要求"><a href="#1、运行要求" class="headerlink" title="1、运行要求"></a>1、运行要求</h2><p>以下例子是ucore移植过程示例，Soc要求为较完备的SoC ：集成 DDR3控制器以连接DDR3颗粒 为内存；集成串口控制器以进行交互；其他可选模块可扩展SoC的功能 ，如网口、 VGA等</p><span id="more"></span><p>cpu务必实现tlb指令及tlb模块，cache指令和cache模块不必实现</p><p>交叉编译工具编译ucore</p><blockquote><p>理论上来说，Soc应该都具备以上要求，cpu也实现了tlb，交叉工具在北航实验中已经用到，系统已经编译完成，先不用考虑。</p></blockquote><h2 id="2、系统编译"><a href="#2、系统编译" class="headerlink" title="2、系统编译"></a>2、系统编译</h2><p>ucore编译后的目标文件是obj/ucore-kernel-initrd，即内核文件，对比北航的系统应该是仿真文件vmlinux文件，都是elf文件，先这么猜着。（没错，后文已经证实！）</p><h2 id="3、运行系统"><a href="#3、运行系统" class="headerlink" title="3、运行系统"></a>3、运行系统</h2><p>先运行pmon，再通过网卡加载ucore至内存，再通过pmon调试（串口之类的），</p><p>可以将ucore的elf文件转换为coe文件，应该要用到交叉编译环境mipsel-linux-，这样可以直接使用ram引导系统，我觉得没必要吧，而且没有参考示例，不稳……</p><h1 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h1><h2 id="0、串口软件"><a href="#0、串口软件" class="headerlink" title="0、串口软件"></a>0、串口软件</h2><p>直接用Windows下环境，SecureCRTP串口软件（D:\fdm_download\nscscc2020_group_v0.01\soc_run_os_v0.01\lab_environment_v1.00\uart_soft\SecureCRTPortable）</p><p><img src="/images/run-linux-on-loongson-FPGA/image-20200814000018297.png" alt="image-20200814000018297"></p><h2 id="1、搭建Tftp服务器"><a href="#1、搭建Tftp服务器" class="headerlink" title="1、搭建Tftp服务器"></a>1、搭建Tftp服务器</h2><p><strong>win10直接打开如下文件即可</strong></p><p>D:\fdm_download\nscscc2020_group_v0.01\soc_run_os_v0.01\lab_environment_v1.00\tftp\tftpd32.450</p><p><img src="/images/run-linux-on-loongson-FPGA/image-20200814000508515.png" alt="image-20200814000508515"></p><h1 id="运行Linux"><a href="#运行Linux" class="headerlink" title="运行Linux"></a>运行Linux</h1><h2 id="1、烧写pmon"><a href="#1、烧写pmon" class="headerlink" title="1、烧写pmon"></a>1、烧写pmon</h2><p><img src="/images/run-linux-on-loongson-FPGA/image-20200814001801521.png" alt="image-20200814001801521"></p><blockquote><p>其中烧写进flash的bit文件应该是<code>D:\fdm_download\nscscc2020_group_v0.01\soc_run_os_v0.01\lab_environment_v1.00\flash_programmer\programmer_by_uart</code>下的programmer_by_uart.bit文件（没错！）<img src="/images/run-linux-on-loongson-FPGA/image-20200814010553766.png" alt="image-20200814010553766"></p><p>使用vivado的open hardware manager，串口软件Secure（上面有说明）<img src="/images/run-linux-on-loongson-FPGA/image-20200814010517873.png" alt="image-20200814010517873"></p></blockquote><h3 id="1-1、烧写soc-up"><a href="#1-1、烧写soc-up" class="headerlink" title="1.1、烧写soc_up"></a>1.1、烧写soc_up</h3><p>下载bit流文件参考vivado使用说明1.6节，原文有错，这里刚好可以理解出该soc_up_33M.bit流文件为soc生成的，这里可以先使用gs132的试一下？</p><p>这样就可以运行pmon了，波特率设置为57600，</p><blockquote><p>这里可以把bit文件转mcs文件固化进FPGA的SPI flash的方法，就不用重新导入了，这个等仿真完了再尝试。</p></blockquote><h2 id="2、运行Linux的方法"><a href="#2、运行Linux的方法" class="headerlink" title="2、运行Linux的方法"></a>2、运行Linux的方法</h2><ul><li>1.启动pmon，通过网口load Linux内核进入FPGA上的DDR3内存上，命令为<code>load tftp://服务器IP/vmlinux</code></li><li>2.在教学soc上，波特率为115200，与pmon不同</li><li>3.启动pmon后给开发板网卡配置同网段IP</li></ul><p><img src="/images/run-linux-on-loongson-FPGA/image-20200814001121698.png" alt="image-20200814001121698"></p><ul><li><p>4.加载内存到NandFlash</p><p><img src="/images/run-linux-on-loongson-FPGA/image-20200814001445310.png" alt="image-20200814001445310"></p></li></ul><blockquote><p>过程中需要的文件：</p><ul><li>ucore编译后的目标文件是obj/ucore-kernel-initrd，即内核文件，对比北航的系统应该是仿真文件vmlinux文件，都是elf文件，先这么猜着。（没错，后文已经证实！）</li><li>其中烧写进flash的bit文件应该是<code>D:\fdm_download\nscscc2020_group_v0.01\soc_run_os_v0.01\lab_environment_v1.00\flash_programmer\programmer_by_uart</code>下的programmer_by_uart.bit文件（没错！）</li><li>下载bit流文件参考vivado使用说明1.6节，原文有错，这里刚好可以理解出该soc_up_33M.bit流文件为soc生成的，这里可以先使用gs132的试一下？（不太确定）</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 龙芯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPERATING SYSTEMS THREE EASY PIECES</title>
      <link href="/2019/OPERATING-SYSTEMS-THREE-EASY-PIECES/"/>
      <url>/2019/OPERATING-SYSTEMS-THREE-EASY-PIECES/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="三个简单的部分"><a href="#三个简单的部分" class="headerlink" title="三个简单的部分"></a>三个简单的部分</h2><span id="more"></span><h2 id="威斯康辛大学麦迪逊分校"><a href="#威斯康辛大学麦迪逊分校" class="headerlink" title="威斯康辛大学麦迪逊分校"></a>威斯康辛大学麦迪逊分校</h2><p>2014年由Arpaci-Dusseau Books，Inc.</p><p>版权所有</p><p>致Vedat S. Arpaci，一生的灵感</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>致读者：</p><p>欢迎阅读本书！我们希望诸位能够像我们写这本书一般享受地阅读这本书。这本书叫做《操作系统：三个简单的部分》，这个名字显然是为了致敬有史以来最伟大的演讲笔记集之一的，由理查德·费曼（Richard Feynman）撰写，主题为物理学[F96]。然而当这本书也将毫无疑问是达不到那位著名的物理学家设定的高标准，也许在您所寻求的范围内，了解什么是操作系统（更广泛地说，系统）就足够了。</p><p>三个简单的部分指的是这本书有组织围绕的三个主要主题元素：虚拟化、并发性、持久性。在讨论这些概念时，我们将讨论操作系统要做的大多数重要事情，希望您也能够在旅途当中有些乐趣。学习新事物是很有趣的，是吧？至少说，应该是。</p><p>每个主要概念会被分成一组章节，其中大多数是提出一个特定的问题，然后说明如何解决。这些章节很简短，请尝试（尽可能地）去参考想法真正来源的原始材料。我们写这本书的目的之一就是让历史的轨迹尽可能地清晰，因为我们认为这会帮助一个学生更清晰地理解这是什么，这曾是什么，这将是什么。在这种情况下，了解如何制作香肠与了解香肠的益处几乎同样重要。</p><p>我们在书中使用的一些设备应该在这里介绍一下。第一个是问题的关键。当我们试图解决一个问题时，我们首先要说明最重要的问题是什么;本书问题的关键在文中被明确地指出，并希望通过本文其余部分提供的技术、算法和思想来解决。</p><p>还有许多旁白和提示贯穿全文，增加了一点颜色的主线表示。题外话倾向于讨论与正文相关(但可能不是必需的)的内容;提示往往是可以应用于您构建的系统的一般经验。本书末尾的索引列出了所有这些技巧和旁白(还有cruces, crux的复数形式)，供您参考。</p><p>我们使用最古老的教学方法之一，对话，贯穿全书，作为一种以不同的角度呈现材料的方式。这些是用来介绍主要的主题概念(我们将会看到，以一种非常好的方式)，以及不时地复习材料。他们也有机会以更幽默的风格写作。不管你觉得它们是有用的还是幽默的，那完全是另一回事了。</p><p>在每个主要部分的开头，我们将首先介绍操作系统提供的抽象，然后在后续章节中讨论提供抽象所需的机制、策略和其他支持。抽象对于计算机科学的所有方面都是基础，所以它们在操作系统中也是必不可少的，这也许并不奇怪。</p><p>在整个章节中，我们尝试在可能的地方使用真正的代码(而不是伪代码)，因此对于几乎所有的示例，您应该能够自己键入并运行它们。在真实的系统上运行真实的代码是学习操作系统的最好方法，所以我们鼓励您在可能的时候这样做。</p><p>在课文的不同部分，我们已经穿插了一些作业，以确保你理解了正在发生的事情。很多作业都是对操作系统的模拟;你应该下载家庭作业，并运行它们来测试你自己。家庭作业模拟器有如下特点:通过给它们一个不同的随机种子，你可以产生一个几乎无限的问题集;模拟器也可以为你解决问题。因此，你可以反复测试你自己，直到你达到了一个很好的理解水平。</p><p>本书最重要的附录是一组项目，在这些项目中，您可以通过设计、实现和测试自己的代码来了解实际的系统是如何工作的。所有项目(以及上面提到的代码示例)都使用C编程语言[KR88];C是一种简单而强大的语言，它是大多数操作系统的基础，因此值得添加到您的语言工具箱中。有两种类型的项目(见在线附录中的想法)。第一类是系统编程项目;对于那些刚接触C和UNIX并希望学习如何进行低级C编程的人来说，这些项目是非常好的。第二类是基于在麻省理工学院开发的一个真正的操作系统内核xv6 [CK+08];这些项目对于那些已经有一些C并且想要在操作系统中动手的学生来说是非常棒的。在威斯康星州，我们以三种不同的方式运行这门课程:要么所有的系统编程，要么所有的xv6编程，要么两者兼而有之。</p><p>致教育工作者：</p><p>如果你是一位教师或教授，希望使用这本书，请随意这样做。你可能已经注意到，它们是免费的，可从以下网页下载:<code>http://www.ostep.org</code></p><p>你也可以从lulu.com网站上购买一本印刷本。在上面的网页上寻找它。</p><p>本书(目前)的正确引用如下:</p><blockquote><p>Operating Systems: Three Easy Pieces<br>Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau Arpaci-Dusseau Books, Inc.<br>May, 2014 (Version 0.8)<br><a href="http://www.ostep.org/">http://www.ostep.org</a></p></blockquote><p>本课程分为15周的学期，你可以在一个合理的深度范围内涵盖大部分的主题。将课程压缩到一个10周的季度中，可能需要从每个部分删除一些细节。还有几章是关于虚拟机监视器的，我们通常会在学期的某个时候挤进去，要么是在虚拟化这一大节的最后，要么是在临近尾声的时候。</p><p>这本书的一个稍微不寻常的方面是并发性，这是许多操作系统书籍前面的一个主题，在这里被推迟，直到学生已经理解了CPU和内存的虚拟化。在我们的经验在教学这门课程近15年来,学生很难理解并发问题,或者为什么他们试图解决它,如果他们还不理解一个地址空间是什么,什么是一个过程,或者为什么上下文切换可能发生在任意时间点上。一旦他们理解了这些概念，然而，引入线程的概念以及由此产生的问题就变得相当容易了，或者至少更容易了。</p><p>你可能已经注意到，书里没有幻灯片。这种遗漏的主要原因是我们相信最古老的教学方法:粉笔和黑板。因此，当我们教这门课的时候，我们带着一些主要的想法和例子来上课，并用黑板来展示它们;讲义和现场代码演示也很有用。根据我们的经验，使用太多的幻灯片会鼓励学生“检查”课堂内容(并登录facebook.com)，因为他们知道这些内容是供他们稍后消化的;使用黑板使讲课成为一种“现场”观摩体验，因此(希望如此)课堂上的学生更有互动性、动态性和趣味性。</p><p>如果你想要一份我们上课准备的笔记，请给我们发邮件。我们已经与世界各地的许多人分享了它们。</p><p>最后一个请求:如果你使用免费的在线章节，请链接到它们，而不是在本地复制。这有助于我们跟踪使用情况(过去几年下载了超过100万章!)，并确保学生得到最新和最好的版本。</p><p>致学生：</p><p>如果你是在读这本书的学生，谢谢你!我们很荣幸能够提供一些材料来帮助您学习操作系统方面的知识。我们都深情地回忆起我们大学时代的一些教科书(例如，Hennessy和Patterson [HP90]，计算机建筑学的经典著作)，希望这本书能成为你积极的回忆之一。</p><p>你可能已经注意到这本书是免费的，可以在网上找到。有一个主要的原因:教科书通常太贵了。我们希望，这本书是新一波免费材料的第一波，帮助那些追求教育的人，不管他们来自世界的哪个地方，也不管他们愿意为一本书花多少钱。如果做不到这一点，那就是一本免费的书，这总比没有好。</p><p>如果可能的话，我们还希望向您指出书中大部分材料的原始来源:多年来影响操作系统领域的伟大论文和人物。思想不是凭空而来的;他们来自聪明、勤奋的人(包括许多图灵奖获得者)，因此我们应该尽可能地赞美这些思想和人。在这样做的过程中，我们希望能够更好地理解已经发生的革命，而不是把这些思想当作始终存在的文本来写[K62]。此外，也许这样的推荐会鼓励你自己深入挖掘;阅读我们这个领域的著名论文无疑是最好的学习方法之一。</p><p>致谢：</p><p>这一节将包含对那些帮助我们整理这本书的人的感谢。现在最重要的是:你的名字可以出现在这里!但是，你必须帮助他们。所以请给我们一些反馈并帮助我们调试这本书。你可能会出名!或者,</p><p>至少，把你的名字写在某本书里。</p><p>到目前为止，帮助过他们的人包括:Abhirami Senthilkumaran<em>， Adam Drescher, Adam Eggum, Ahmed Fikri</em>， Ajaykrishna Raghavan, Alex Wyler, Anand Mundada, B. Brahmananda Reddy, Bala Subrahmanyam Kambala, Benita Bose, Biswajit Mazumder (Clemson)， Bobby Jack, Bj¨orn Lindberg, breni -nan Payne, Brian Kroth, Cara Lauritzen, Charlotte Kissinger, Shen Chien-Chung</p><p>(特拉华州)*,科迪汉森,丹Soendergaard(美国奥尔胡斯),大卫Hanle (Grin-nell),迪Muthukumar,多里安人阿诺德(新墨西哥州)、达斯汀·麦茨勒,达斯汀Passofaro,艾米丽·雅各布森,艾美特Witchel(德州),恩斯特Biersack(法国),芬恩Kuusisto <em>, Guilherme巴普蒂斯塔哈米德Reza Ghasemi,亨利修道院,Hrishikesh黑龙江,嘉定区环城路张</em>,杰克Gillberg,詹姆斯•佩里(美国Michigan-Dearborn) *杰Lim杰洛德Weinman(格林奈尔),乔尔·索莫斯(高露洁),乔纳森·佩里(麻省理工学院),小君</p><p>他,卡尔·沃林Kaushik Kannan,凯文刘*,Lei田布拉斯加-林肯(美国),莱斯利·舒尔茨Lihao Wang玛莎摩天,Masashi Kishikawa(索尼)、马特•Rei-choff马蒂·威廉姆斯,孟黄,Mike Griepentrog明陈(石溪),穆罕默德Alali(特拉华州),基于Kandaswamy,娜塔莎Eilbert, Nathan Dipiazza,内森·沙利文Neeraj Badlani说(北卡罗来纳州状态),纳尔逊•戈麦斯Nghia黄齐(德州)会长Patricio hara雷德福史密斯Ripudaman辛格,罗斯•艾肯Rus -</p><p>局域网Kiselev阮兰德赫里克,沉着的Al-Kiswany Sandeep Ummadi(明尼苏达州)Satish Chebrolu (NetApp) Satyanarayana Shanmugam *,赛斯花粉、Sharad Punuganti Shreevatsa R, Sivaraman Sivaraman *, Srinivasan Thirunarayanan *, Suriyhaprakhas巴拉罗姆珊,Sy金却,托马斯•Griebel郑同心,托尼Adkins,通润Rudeen(普林斯顿大学),陀王Varun大桶,徐Di,悦翔Peng卓</p><p>(德州农工大学)，任玉飞，Zef RosnBrick, Zuyu Zhang。特别感谢那些在上面加了星号的人，他们提出了许多改进的建议。</p><p>特别感谢Joe Meehean教授(Lynchburg饰演)对每一章的详细注释，感谢Jerod Weinman教授(Grinnell饰演)和他的全班同学制作了令人难以置信的小册子，感谢Shen Chien-Chung教授(Delaware饰演)对这本书的阅读和评论。这三位作者对本文材料的完善都给予了不可估量的帮助。</p><p>同时，非常感谢这些年来参加537课程的数百名学生。特别是08年秋季班的学生，他们鼓励第一次写这些笔记(他们厌倦了没有任何课本可读——有进取心的学生!)你真的应该写一本教科书!在那一年的课程评估中)。</p><p>我们也非常感谢那些参与xv6项目的勇敢的少数人</p><p>实验课程，其中大部分现在被纳入主要的537课程。从09年春开始:贾斯汀·切尼克，帕特里克·迪林，马特·捷克，托尼·格雷戈森，迈克尔·格里普特洛格，泰勒·哈特，瑞恩·克罗斯，埃里克·拉济科夫斯基，韦斯利·里尔丹，拉吉夫·瓦迪亚纳坦，克里斯托弗·瓦克拉维克。从09年秋季开始:Nick Bearson, Aaron Brown, Alex Bird, David Capel, Keith Gould, Tom Gould, Jeffrey Hugo, Brandon Johnson, John Kjell, Boyan Li, James Loethen, Will McCardell, Ryan Szaroletta，Simon Tso和Ben Yule。从10年春季开始:帕特里克·布莱西、艾丹·丹尼斯-欧林、帕拉斯·多西、杰克·弗里德曼、本杰明·弗里施、埃文·汉森、皮克奇利·赫曼斯、迈克尔·琼、亚历克斯·兰根菲尔德、斯科特·里克、迈克·特雷费特、加瑞特·斯托斯、布伦南·沃尔、汉斯·维尔纳、苏扬和卡洛斯·格里芬(几乎)。</p><p>虽然他们没有直接帮助我们写这本书，但是我们的研究生已经教会了我们很多关于系统的知识。他们在威斯康辛的时候，我们定期与他们交谈，但他们做所有真正的工作——通过告诉我们他们在做什么，我们每周都能学到新东西。这份名单包括以下我们与之合作发表论文的在读学生和以前的学生;一个星号表示在我们指导下获得博士学位的人:阿布Rajimwale, Ao妈,布莱恩·福尼克里斯•Dragga Deepak Ramamurthi Florentina Popovici <em>, Haryadi Gunawi <em>,詹姆斯·纽金特,约翰</em>弯曲,Lanyue Lu Lakshmi Bairavasundaram <em>, Laxman Visampalli, Leo Arulraj Meenali Rungta, Muthian Si-vathanu <em>,内森·伯内特</em> Nitin Agrawal <em>,斯萨勃拉曼尼亚</em>,斯蒂芬•托德•琼斯</em> Swaminathan兰</em>,Swetha Krishnan, Thanh, Thanumalayan s Pillai Timothy Denehy <em>泰勒哈特,Venkat Venkataramani,维贾伊奇丹巴拉姆,Vijayan普拉巴卡兰</em>,张一英<em>，张玉普</em>，蔡夫·韦斯。</p><p>最后还要感谢艾伦·布朗，他在许多年前(2009年春季)第一次上了这门课，然后又上了xv6的实验课(2009年秋季)，最后当了两年左右的研究生助教(2010年秋季到次年春季)。他孜孜不倦的工作极大地改善了项目的状态(特别是那些在xv6地区的项目)，从而帮助威斯康星州无数的本科生和研究生获得更好的学习体验。就像艾伦会说的那样(用他一贯简洁的方式):“谢谢。”</p><p>作者寄语：</p><p>叶芝有句名言:“教育不是灌满一桶水，而是点燃一团火。”他是对的，但同时也是错的。你确实需要“把桶装满”一点，这些笔记对你的这部分教育是有帮助的;毕竟，当你去谷歌面试时，他们会问你一个关于如何使用信号量的难题，知道信号量是什么可能更好，对吧?</p><p>但叶芝更大的观点显然是切中要害的:教育的真正意义在于让你对某件事感兴趣，让你自己对这个主题有更多的了解，而不仅仅是为了在某门课上取得好成绩而必须消化的东西。正如我们的一位父亲(雷姆齐的父亲，Vedat Arpaci)常说的那样，“在课堂之外学习”。</p><p>我们做这些笔记是为了激发你对操作系统的兴趣，让你自己阅读更多关于这个主题的内容，和你的教授谈论这个领域里正在进行的所有令人兴奋的重新搜索，甚至是参与到那个研究中去。这是一个伟大的领域(!)，充满了令人兴奋和精彩的想法，这些想法深刻而重要地塑造了计算的历史。虽然我们知道这火焰不会照亮你们所有人，但我们希望它照亮许多人，甚至少数人。因为一旦那把火点燃，那就是你真正有能力做一些伟大的事情的时候。因此，教育过程的真正意义在于:继续前进，学习许多新奇而有趣的话题，去学习，去成熟，最重要的是，去发现能点燃你热情的东西。</p><p>Andrea and Remzi<br>Married couple<br>Professors of Computer Science at the University of Wisconsin<br>Chief Lighters of Fires, hopefully4</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[CK+08] “The xv6 Operating System”<br>Russ Cox, Frans Kaashoek, Robert Morris, Nickolai Zeldovich<br>From: <a href="http://pdos.csail.mit.edu/6.828/2008/index.html">http://pdos.csail.mit.edu/6.828/2008/index.html</a><br>xv6 was developed as a port of the original UNIX version 6 and represents a beautiful, clean, and simple way to understand a modern operating system.<br>[F96] “Six Easy Pieces: Essentials Of Physics Explained By Its Most Brilliant Teacher” Richard P. Feynman<br>Basic Books, 1996<br>This book reprints the six easiest chapters of Feynman’s Lectures on Physics, from 1963. If you like Physics, it is a fantastic read.<br>[HP90] “Computer Architecture a Quantitative Approach” (1st ed.)<br>David A. Patterson and John L. Hennessy<br>Morgan-Kaufman, 1990<br>A book that encouraged each of us at our undergraduate institutions to pursue graduate studies; we later both had the pleasure of working with Patterson, who greatly shaped the foundations of our research careers.<br>[KR88] “The C Programming Language”<br>Brian Kernighan and Dennis Ritchie<br>Prentice-Hall, April 1988<br>The C programming reference that everyone should have, by the people who invented the language.<br>[K62] “The Structure of Scientiﬁc Revolutions”<br>Thomas S. Kuhn<br>University of Chicago Press, 1962<br>A great and famous read about the fundamentals of the scientiﬁc process. Mop-up work, anomaly, crisis, and revolution. We are mostly destined to do mop-up work, alas.</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>@[toc]</p><h1 id="一段对话"><a href="#一段对话" class="headerlink" title="一段对话"></a>一段对话</h1><p>教授:欢迎来到这本书!它被称为“操作系统——三个简单的部分”，我在这里要教你们关于操作系统需要知道的事情。我被称为“教授”;你是谁?</p><p>教授你好!我被称为“学生”，你可能已经猜到了。我在这里，准备学习!</p><p>教授:听起来不错。有什么问题吗?</p><p>学生:当然!为什么叫“三个简单的部分”?</p><p>教授:这很简单。嗯，你看，理查德·费曼有很多精彩的物理讲座……</p><p>学生:哦!那个写”你肯定是在开玩笑，费曼先生”的家伙，对吧?伟大的书!这会像那本书一样搞笑吗?</p><p>教授:嗯…嗯,没有。那本书很好，我很高兴你读了它。希望这本书更像他的物理笔记。其中一些基础知识被总结在一本名为《六个简单的部分》的书中。他在讲物理;关于操作系统这个话题，我们将做三个简单的部分。这是适当的，因为操作系统的难度大约是物理的一半。</p><p>学生:嗯，我喜欢物理，所以这可能很好。那些是什么?</p><p>教授:它们是我们将要学习的三个关键思想:虚拟化、并发性和持久性。在学习这些想法,我们将了解所有操作系统是如何工作的,包括如何决定什么程序在一个CPU上运行下,如何处理内存过载在虚拟内存制度,虚拟机监视器是如何工作的,如何管理磁盘信息,甚至对如何构建一个分布式系统,当部分已经失败。诸如此类。</p><p>学生:我不知道你在说什么，真的。</p><p>教授:好!这意味着你在正确的班级。</p><p>学生:我还有一个问题:学习这些东西的最好方法是什么?</p><p>教授:问得好!当然，每个人都需要自己找出答案，但我的做法是:去上课，听教授介绍材料。然后，在每个周末，读一读这些笔记，帮助你更好地理解这些想法。当然，一段时间后(提示:考试前!)，再次阅读笔记来巩固你的知识。当然，你的教授肯定会布置一些作业和项目，所以你应该去做;特别是，在项目中编写真正的代码来解决真正的问题是将这些想法付诸实践的最佳方式。孔子说过……</p><p>学生:哦，我知道!“我听见了，却忘了。我看见，我记得。我知道，我理解。”“或者诸如此类的话。</p><p>教授:(惊讶地)你怎么知道我要说什么?</p><p>学生：似乎是这样。而且，我是孔子的超级粉丝。</p><p>教授:嗯，我想我们会相处得很好的!真棒。</p><p>学生:教授，请允许我再问一个问题。这些对话是做什么用的?我是说，这不应该是一本书吗?为什么不直接展示材料呢?</p><p>教授:啊，好问题，好问题!嗯，我认为有时候把自己从叙述中拉出来思考一下是有用的;这些对话就是那个时代。所以你和我将一起努力理解所有这些非常复杂的想法。你准备好了吗?</p><p>学生：所以我们必须思考?我准备好了。我是说，我还需要做什么?除了这本书，我并没有什么经验。</p><p>教授:我也是，很遗憾。让我们开始工作吧!</p><h1 id="操作系统简介"><a href="#操作系统简介" class="headerlink" title="操作系统简介"></a>操作系统简介</h1><p>如果你正在上一门操作系统的本科课程，你应该已经对计算机程序在运行时的功能有了一些了解。如果没有，这本书(以及相应的课程)将会很难——所以你可能应该停止阅读这本书，或者跑到最近的书店，在继续阅读之前快速地阅读必要的背景材料(Patt/Patel [PP03]和特别是Bryant/O’hallaron [BOH10]都是非常棒的书)。</p><p>那么当程序运行时会发生什么呢?</p><p>一个正在运行的程序做一件非常简单的事情:它执行指令。每秒钟有数百万次(现在甚至数十亿次)，处理器从内存中取出一条指令，并对其进行解码。，找出这是哪条指令)，并执行它(即，它做它应该做的事情，比如把两个数字相加，访问内存，检查一个条件，跳转到一个函数，等等)。处理完这条指令后，处理器继续处理下一条指令，</p><p>以此类推，直到程序最终完成。</p><p>因此，我们刚刚描述了冯·诺依曼模型的基础</p><p>computing2。听起来很简单,对吧?但是在这门课上，我们将会学到，当一个程序运行的时候，许多其他的疯狂的事情正在发生，它们的主要目标是使系统易于使用。</p><p>实际上，有一个软件系统负责使程序的运行变得容易(甚至允许您同时运行许多程序)，允许程序共享内存，允许程序与设备交互，以及诸如此类的其他有趣的事情。软件的主体被称为操作系统(OS)3，因为它负责确保系统以一种易于使用的方式正确和有效地运行。</p><p>操作系统实现这一点的主要方式是通过一种我们称为虚拟化的通用技术。也就是说，操作系统获取物理资源(如处理器、内存或磁盘)并将其转换为更通用、更强大、更易于使用的虚拟形式。因此，我们有时将操作系统称为虚拟机。</p><p>当然，为了让用户告诉操作系统要做什么，从而利用虚拟机的特性(如运行程序、分配内存或访问文件)，操作系统还提供了一些可以调用的接口(api)。实际上，一个典型的操作系统会导出几百个对应用程序可用的系统调用。因为OS提供了这些调用来运行程序、访问内存和设备，以及其他相关操作，所以我们有时也会说OS为应用程序提供了一个标准库。</p><p>最后，由于虚拟化允许许多程序运行(从而对CPU进行碎片化)，许多程序并发地访问它们自己的指令和数据(因此共享内存)，许多程序访问设备(因此共享磁盘等等)，因此OS有时被称为资源管理器。每个CPU、内存和磁盘都是系统的资源;因此，操作系统的角色是管理这些资源，高效、公平地完成这些工作，或者考虑到许多其他可能的目标。为了更好地理解操作系统的作用，我们来看一些示例。</p><blockquote><p>关键问题：如何虚拟化资源</p><p>本书中我们要回答的一个核心问题非常简单:操作系统如何虚拟化资源?这是我们问题的症结所在。为什么操作系统会这样做并不是主要的问题，因为答案应该是显而易见的:它使系统更容易使用。因此，我们关注如何实现:操作系统实现了哪些机制和策略来实现虚拟化?操作系统是如何做到如此高效的呢?需要什么硬件支持?</p><p>我们将使用“问题的关键”，在阴影框中，例如这个，作为一种方法来指出我们试图在构建操作系统中解决的具体问题。因此，在一个特定主题的注释中，您可能会发现一个或多个强调问题的cruces(是的，这是正确的复数形式)。当然，本章中的细节将介绍解决方案，或至少介绍解决方案的基本参数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPPO R11刷机初体验</title>
      <link href="/2019/OPPO-R11%E5%88%B7%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2019/OPPO-R11%E5%88%B7%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 刷机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
            <tag> OPPO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verilog设计乘法器</title>
      <link href="/2019/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/"/>
      <url>/2019/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>移位乘法器、原码乘法器、补码乘法器、流水线乘法器</p><span id="more"></span><h1 id="左移位乘法器"><a href="#左移位乘法器" class="headerlink" title="左移位乘法器"></a>左移位乘法器</h1><h2 id="设计文件"><a href="#设计文件" class="headerlink" title="设计文件"></a>设计文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfq(result,a,b);</span><br><span class="line"><span class="keyword">parameter</span> width = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">input</span> [width:<span class="number">1</span>] a,b;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">2</span>*width-<span class="number">1</span>:<span class="number">0</span>] result;</span><br><span class="line">    <span class="comment">// wire [width:1] a,b;一开始定义为reg类型报错，输入端口为非线型变量，不可定义为reg类型</span></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">2</span>*width-<span class="number">1</span>:<span class="number">0</span>] result;</span><br><span class="line"><span class="keyword">integer</span> index;</span><br><span class="line"><span class="keyword">always</span> @(a <span class="keyword">or</span> b)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(index = <span class="number">0</span>;index &lt;= width;index = index+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(b[index])</span><br><span class="line">                    <span class="keyword">begin</span></span><br><span class="line">                        result = result + (a &lt;&lt; (index-<span class="number">1</span>));</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="仿真文件"><a href="#仿真文件" class="headerlink" title="仿真文件"></a>仿真文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfqsimu;</span><br><span class="line"><span class="keyword">parameter</span> width = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">reg</span> [width:<span class="number">1</span>] a,b;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">2</span>*width-<span class="number">1</span>:<span class="number">0</span>] result;</span><br><span class="line">cfq sl(<span class="variable">.a</span>(a),<span class="variable">.b</span>(b),<span class="variable">.result</span>(result));</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a=<span class="number">8&#x27;b00000010</span>;b=<span class="number">8&#x27;b00000000</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">2</span> <span class="keyword">assign</span> &#123;a,b&#125; = &#123;a,b&#125; + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/1.png"></p><p>说明：初始化时a为1，b为0，自增时需等到b增为ff，a才会继续增1，虽然仿真无误，但是在正确性的表现上并不十分直观。</p><p>而采用如下Testbench，则会在一开始定义三组数据，随后自行产生随机数验证，在波形图中也更加直观</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfqsimu;</span><br><span class="line"><span class="keyword">parameter</span> width=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">reg</span> [width-<span class="number">1</span>:<span class="number">0</span>] cs1;</span><br><span class="line"><span class="keyword">reg</span> [width-<span class="number">1</span>:<span class="number">0</span>] cs2;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">2</span>*width-<span class="number">1</span>:<span class="number">0</span>] result;</span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    clk=<span class="number">0</span>;</span><br><span class="line">    cs1=<span class="number">0</span>;</span><br><span class="line">    cs2=<span class="number">0</span>;</span><br><span class="line">    #<span class="number">10</span></span><br><span class="line">     cs1=<span class="number">2</span>;</span><br><span class="line">     cs2=<span class="number">5</span>;</span><br><span class="line">    #<span class="number">20</span></span><br><span class="line">     cs1=<span class="number">3</span>;</span><br><span class="line">     cs2=<span class="number">7</span>;</span><br><span class="line">    #<span class="number">20</span></span><br><span class="line">     cs1=<span class="number">5</span>;</span><br><span class="line">     cs2=<span class="number">10</span>; </span><br><span class="line">     <span class="keyword">repeat</span>(<span class="number">20</span>) @ (<span class="keyword">posedge</span> clk)</span><br><span class="line">     <span class="keyword">begin</span></span><br><span class="line">         cs1[width-<span class="number">1</span>:<span class="number">0</span>]&lt;=(<span class="built_in">$random</span>);</span><br><span class="line">         cs2[width-<span class="number">1</span>:<span class="number">0</span>]&lt;=(<span class="built_in">$random</span>);</span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">5</span> clk=~clk;</span><br><span class="line">cfq ul(<span class="variable">.a</span>(cs1),<span class="variable">.b</span>(cs2),<span class="variable">.result</span>(result));</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/2.png"></p><h1 id="右移位乘法器"><a href="#右移位乘法器" class="headerlink" title="右移位乘法器"></a>右移位乘法器</h1><p>由于左移位乘法器在计算时不断将乘得的数字进行左移做加法，这时会因为左移增大数字计算的内存，而通过部分积的方式，将最后一位不参与加法的数字右移单独存起，相较于左移位乘法器，大大的节省了运算空间。</p><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/8.png"></p><p>由图可以看出，最后一位的结果并不参与移位相加的运算，可直接右移转存，则部分积占用的空间显然比左移运算小多了。</p><p>具体理论思路如下：x=x1x2x3….xn，y=y1y2y3….yn，</p><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/6.png"></p><p>再另zi表示第i次的部分积，上式可整理成下式</p><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/7.png"></p><h2 id="设计文件-1"><a href="#设计文件-1" class="headerlink" title="设计文件"></a>设计文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右移乘法器</span></span><br><span class="line"><span class="keyword">module</span> cfq(z,x,y);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] x;</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] y;</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] z;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] A;        <span class="comment">//部分积</span></span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] z;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] temp_x;   <span class="comment">//乘法运算时，被乘数与乘数最后一位的积的最后一位不参与最后的加法运算，将其右移另存。</span></span><br><span class="line">    <span class="keyword">always</span> @ (*)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        A=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i=i+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span>(y[i]) A=A+&#123;<span class="number">1&#x27;b0</span>,x&#125;;      <span class="comment">//部分积移位前可能会比乘数多一位</span></span><br><span class="line">                <span class="keyword">else</span> A=A+<span class="number">5&#x27;b00000</span>;</span><br><span class="line">                temp_x[i]=A[<span class="number">0</span>];</span><br><span class="line">                A=A&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            z=&#123;A,temp_x&#125;;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="仿真文件-1"><a href="#仿真文件-1" class="headerlink" title="仿真文件"></a>仿真文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右移</span></span><br><span class="line"><span class="keyword">module</span> cfqsimu;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] x,y;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] z;</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        x=<span class="number">4&#x27;b1101</span>;y=<span class="number">4&#x27;b1011</span>;<span class="comment">//x=1101;y=1011;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    cfq sl(<span class="variable">.x</span>(x),<span class="variable">.y</span>(y),<span class="variable">.z</span>(z));</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/4.png"></p><p>为了防止运算结果的偶然性，将仿真文件稍作修改：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfqsimu;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] x;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] y;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] z;</span><br><span class="line">    <span class="keyword">reg</span> clk;</span><br><span class="line">    <span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        clk=<span class="number">0</span>;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        #<span class="number">10</span></span><br><span class="line">         x=<span class="number">3</span>;</span><br><span class="line">         y=<span class="number">5</span>;</span><br><span class="line">        #<span class="number">20</span></span><br><span class="line">         x=<span class="number">2</span>;</span><br><span class="line">         y=<span class="number">4</span>;</span><br><span class="line">        #<span class="number">20</span> </span><br><span class="line">         x=<span class="number">5</span>;</span><br><span class="line">         y=<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">repeat</span> (<span class="number">20</span>) @(<span class="keyword">posedge</span> clk)</span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            x=&#123;<span class="built_in">$random</span>&#125;;</span><br><span class="line">            y=&#123;<span class="built_in">$random</span>&#125;;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> #<span class="number">5</span> clk=~clk;</span><br><span class="line">    cfq ul(<span class="variable">.z</span>(z),<span class="variable">.x</span>(x),<span class="variable">.y</span>(y));</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>仿真波形如下，可见结果正确。</p><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/5.png"></p><h1 id="加法树乘法器"><a href="#加法树乘法器" class="headerlink" title="加法树乘法器"></a>加法树乘法器</h1><p>与单纯的左右移位乘法器不同，加法树乘法器是将每一位乘得的数后面补充0至最后一位，再直接利用加法来计算，参考下图：</p><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/10.png"></p><h2 id="设计文件-2"><a href="#设计文件-2" class="headerlink" title="设计文件"></a>设计文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfq(out,a,b,clk);</span><br><span class="line"><span class="keyword">output</span> [<span class="number">15</span>:<span class="number">0</span>] out;</span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] a,b;</span><br><span class="line"><span class="keyword">input</span> clk;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] out;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] out1，c1;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">13</span>:<span class="number">0</span>] out2;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">11</span>:<span class="number">0</span>] out3;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">12</span>:<span class="number">0</span>] c2;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">9</span>:<span class="number">0</span>] out4;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">14</span>:<span class="number">0</span>] temp0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">13</span>:<span class="number">0</span>] temp1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">12</span>:<span class="number">0</span>] temp2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">11</span>:<span class="number">0</span>] temp3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">10</span>:<span class="number">0</span>] temp4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">9</span>:<span class="number">0</span>] temp5 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">8</span>:<span class="number">0</span>] temp6 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] temp7 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> [<span class="number">7</span>:<span class="number">0</span>] mux8_1;<span class="comment">//被乘数与乘数的对应位相乘得到的积函数</span></span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] operand;</span><br><span class="line"><span class="keyword">input</span> sel;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    mux8_1=(sel)?(operand):<span class="number">8&#x27;b00000000</span>;</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="keyword">always</span> @(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    temp7&lt;=mux8_1(a,b[<span class="number">0</span>]);<span class="comment">//把每一次乘得的数移位填零赋值给temp_i</span></span><br><span class="line">    temp6&lt;=((mux8_1(a,b[<span class="number">1</span>]))&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    temp5&lt;=((mux8_1(a,b[<span class="number">2</span>]))&lt;&lt;<span class="number">2</span>);</span><br><span class="line">    temp4&lt;=((mux8_1(a,b[<span class="number">3</span>]))&lt;&lt;<span class="number">3</span>);</span><br><span class="line">    temp3&lt;=((mux8_1(a,b[<span class="number">4</span>]))&lt;&lt;<span class="number">4</span>);</span><br><span class="line">    temp2&lt;=((mux8_1(a,b[<span class="number">5</span>]))&lt;&lt;<span class="number">5</span>);</span><br><span class="line">    temp1&lt;=((mux8_1(a,b[<span class="number">6</span>]))&lt;&lt;<span class="number">6</span>);</span><br><span class="line">    temp0&lt;=((mux8_1(a,b[<span class="number">7</span>]))&lt;&lt;<span class="number">7</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">assign</span> out1 = temp0 + temp1;<span class="comment">//两个相近位数的结果相加，可据此判断out_i的位数</span></span><br><span class="line"><span class="keyword">assign</span> out2 = temp2 + temp3;</span><br><span class="line"><span class="keyword">assign</span> out3 = temp4 + temp5;</span><br><span class="line"><span class="keyword">assign</span> out4 = temp6 + temp7;</span><br><span class="line"><span class="keyword">assign</span> c1 = out1 + out2;</span><br><span class="line"><span class="keyword">assign</span> c2 = out3 + out4;</span><br><span class="line"><span class="keyword">assign</span> out = c1 + c2;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="仿真文件-2"><a href="#仿真文件-2" class="headerlink" title="仿真文件"></a>仿真文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfqsimu;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] a,b;</span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] out;</span><br><span class="line">cfq sl(<span class="variable">.a</span>(a),<span class="variable">.b</span>(b),<span class="variable">.out</span>(out),<span class="variable">.clk</span>(clk));</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    clk=<span class="number">0</span>;a=<span class="number">0</span>;b=<span class="number">0</span>;</span><br><span class="line">    #<span class="number">10</span></span><br><span class="line">    a=<span class="number">3</span>;b=<span class="number">2</span>;</span><br><span class="line">    #<span class="number">20</span></span><br><span class="line">    a=<span class="number">2</span>;b=<span class="number">4</span>;</span><br><span class="line">    #<span class="number">20</span></span><br><span class="line">    a=<span class="number">5</span>;b=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">repeat</span>(<span class="number">20</span>) @(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a=&#123;<span class="built_in">$random</span>&#125;;</span><br><span class="line">        b=&#123;<span class="built_in">$random</span>&#125;;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">5</span> clk=~clk;</span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/9.png"></p><p>说明：如果将上述设计代码中的wire类型所对应的变量全部改为reg类型，并对其延时赋值，就相当于加法器之间插入寄存器以实现流水线，从而再次提高时钟频率。</p><h1 id="查找表乘法器"><a href="#查找表乘法器" class="headerlink" title="查找表乘法器"></a>查找表乘法器</h1><p>查找表乘法器是将乘积直接存放在存储器中，将操作数作为地址访问存储器，得到的输出数据就是乘法器的结果，其速度只取决于存储器的存取速度。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先欲利用操作数地址访问存储器，应当想到将操作数拆分，因为如果不拆分的话，就直接合并只能得到一个地址，只能查找到一个结果，下面以<code>1101 x 1011</code>为例，首先想到的拆分应该是从中间位置拆分，<code>1101</code>拆分为<code>11</code>和<code>01</code>，<code>1011</code>拆分为<code>10</code>和<code>11</code>，再通过拆分得到的部分想办法与结果联系起来，即：<code>1101 x 1011 = （1100 + 0001）x（1000 + 0011）</code>，再因式分解一下，得到<code>1100 x 1000 + 1100 x 0011 + 0001 x 1000 + 0001 x 0011</code>，另<code>firsta=11，seconda=01，firstb=10，secondb=11</code>，上述结果又可表示为<code>((firsta x firstb)&lt;&lt;4) + ((firsta x secondb)&lt;&lt;2) + ((seconda x firstb)&lt;&lt;2) + (seconda x secondb)</code>,每部分移位的位数也就是应该放大的倍数，自行理解就好。</p><h2 id="设计文件-3"><a href="#设计文件-3" class="headerlink" title="设计文件"></a>设计文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfq(out,a,b,clk);</span><br><span class="line"><span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line"><span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] a,b;</span><br><span class="line"><span class="keyword">input</span> clk;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] firsta,firstb;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] seconda,secondb;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] outa,outb,outc,outd;<span class="comment">//将上面说的因式分解的各个部分分别储存</span></span><br><span class="line"><span class="keyword">always</span> @(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    firsta = a[<span class="number">3</span>:<span class="number">2</span>];    seconda = a[<span class="number">1</span>:<span class="number">0</span>];<span class="comment">//将a，b从中间分成两部分</span></span><br><span class="line">    firstb = b[<span class="number">3</span>:<span class="number">2</span>];    secondb = b[<span class="number">1</span>:<span class="number">0</span>];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">lookup  m1(outa,firsta,firstb,clk),<span class="comment">//引用lookup模块</span></span><br><span class="line">        m2(outb,firsta,secondb,clk),</span><br><span class="line">        m3(outc,seconda,firstb,clk),</span><br><span class="line">        m4(outd,seconda,secondb,clk);</span><br><span class="line"></span><br><span class="line"><span class="keyword">always</span> @(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    out = (outa&lt;&lt;<span class="number">4</span>) + (outb&lt;&lt;<span class="number">2</span>) + (outc&lt;&lt;<span class="number">2</span>) + (outd);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> lookup(out,a,b,clk);<span class="comment">//新建设计文件用于引用</span></span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line"><span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] a,b;</span><br><span class="line"><span class="keyword">input</span> clk;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] out;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] address;</span><br><span class="line"><span class="keyword">always</span> @(*)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    address = &#123;a,b&#125;;<span class="comment">//将拆分的a，b组成的地址作为索引，注意：与乘数因子含义不同</span></span><br><span class="line">    <span class="keyword">case</span>(address)</span><br><span class="line">        <span class="number">4&#x27;h0</span>: out =<span class="number">4&#x27;b0000</span>;</span><br><span class="line">        <span class="number">4&#x27;h1</span>: out =<span class="number">4&#x27;b0000</span>;</span><br><span class="line">        <span class="number">4&#x27;h2</span>: out =<span class="number">4&#x27;b0000</span>;</span><br><span class="line">        <span class="number">4&#x27;h3</span>: out =<span class="number">4&#x27;b0000</span>;</span><br><span class="line">        <span class="number">4&#x27;h4</span>: out =<span class="number">4&#x27;b0000</span>;</span><br><span class="line">        <span class="number">4&#x27;h5</span>: out =<span class="number">4&#x27;b0001</span>;</span><br><span class="line">        <span class="number">4&#x27;h6</span>: out =<span class="number">4&#x27;b0010</span>;</span><br><span class="line">        <span class="number">4&#x27;h7</span>: out =<span class="number">4&#x27;b0011</span>;</span><br><span class="line">        <span class="number">4&#x27;h8</span>: out =<span class="number">4&#x27;b0000</span>;</span><br><span class="line">        <span class="number">4&#x27;h9</span>: out =<span class="number">4&#x27;b0010</span>;</span><br><span class="line">        <span class="number">4&#x27;ha</span>: out =<span class="number">4&#x27;b0100</span>;</span><br><span class="line">        <span class="number">4&#x27;hb</span>: out =<span class="number">4&#x27;b0110</span>;</span><br><span class="line">        <span class="number">4&#x27;hc</span>: out =<span class="number">4&#x27;b0000</span>;</span><br><span class="line">        <span class="number">4&#x27;hd</span>: out =<span class="number">4&#x27;b0011</span>;</span><br><span class="line">        <span class="number">4&#x27;he</span>: out =<span class="number">4&#x27;b0110</span>;</span><br><span class="line">        <span class="number">4&#x27;hf</span>: out =<span class="number">4&#x27;b1001</span>;<span class="comment">//拆分之后前半部分和后半部分各四种可能，分别为00，01，10，11，相乘即有16种可能，分别分析做出case事件</span></span><br><span class="line">        <span class="keyword">default</span>: out = <span class="number">&#x27;bx</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="仿真文件-3"><a href="#仿真文件-3" class="headerlink" title="仿真文件"></a>仿真文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> cfqsimu;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] a,b;</span><br><span class="line"><span class="keyword">reg</span> clk;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] out;</span><br><span class="line">cfq sl(<span class="variable">.a</span>(a),<span class="variable">.b</span>(b),<span class="variable">.out</span>(out),<span class="variable">.clk</span>(clk));</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    clk=<span class="number">0</span>;a=<span class="number">0</span>;b=<span class="number">0</span>;</span><br><span class="line">    #<span class="number">10</span></span><br><span class="line">    a=<span class="number">3</span>;b=<span class="number">2</span>;</span><br><span class="line">    #<span class="number">20</span></span><br><span class="line">    a=<span class="number">2</span>;b=<span class="number">4</span>;</span><br><span class="line">    #<span class="number">20</span></span><br><span class="line">    a=<span class="number">5</span>;b=<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">repeat</span>(<span class="number">20</span>) @(<span class="keyword">posedge</span> clk)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a=&#123;<span class="built_in">$random</span>&#125;;</span><br><span class="line">        b=&#123;<span class="built_in">$random</span>&#125;;</span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">5</span> clk=~clk;</span><br><span class="line"><span class="keyword">endmodule</span> </span><br></pre></td></tr></table></figure><p><img src="/images/verilog%E8%AE%BE%E8%AE%A1%E4%B9%98%E6%B3%95%E5%99%A8/11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> 乘法器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超前进位加法器</title>
      <link href="/2019/%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/"/>
      <url>/2019/%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>之前学习了一位半加器与一/四位全加器的相关知识，接着学习超前进位加法器加深认识</p><span id="more"></span><h1 id="八位级联进位加法器"><a href="#八位级联进位加法器" class="headerlink" title="八位级联进位加法器"></a>八位级联进位加法器</h1><h2 id="设计文件"><a href="#设计文件" class="headerlink" title="设计文件"></a>设计文件</h2><p>采用硬件行为方式描述八位全加器</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> qjq(co,sum,a,b,ci);</span><br><span class="line">    <span class="keyword">input</span>[<span class="number">7</span>:<span class="number">0</span>] a,b;</span><br><span class="line">    <span class="keyword">input</span> ci;</span><br><span class="line">    <span class="keyword">output</span>[<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">output</span> co;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">reg</span> co;</span><br><span class="line">    <span class="keyword">reg</span>[<span class="number">7</span>:<span class="number">0</span>] G,P,C;         <span class="comment">//中间变量，分别是生产函数、传递函数、和进位函数</span></span><br><span class="line"><span class="keyword">always</span> @(a <span class="keyword">or</span> b <span class="keyword">or</span> ci)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">    G[<span class="number">0</span>] =a[<span class="number">0</span>] &amp; b[<span class="number">0</span>];      <span class="comment">//生产函数，加数相与,产生进位</span></span><br><span class="line">    P[<span class="number">0</span>] =a[<span class="number">0</span>] | b[<span class="number">0</span>];      <span class="comment">//传递函数，如果a或b有不为0，则将进位输入传递</span></span><br><span class="line">    C[<span class="number">0</span>] =ci;               <span class="comment">//最后位的进位输入，初始化位ci</span></span><br><span class="line">    sum[<span class="number">0</span>] =G[<span class="number">0</span>]^ P[<span class="number">0</span>] ^ C[<span class="number">0</span>];<span class="comment">//输出数据</span></span><br><span class="line">    G[<span class="number">1</span>] =a[<span class="number">1</span>] &amp; b[<span class="number">1</span>];</span><br><span class="line">    P[<span class="number">1</span>] =a[<span class="number">1</span>] | b[<span class="number">1</span>];</span><br><span class="line">    C[<span class="number">1</span>] =G[<span class="number">0</span>] |(P[<span class="number">0</span>] &amp; C[<span class="number">0</span>]);<span class="comment">//c=ab+(a+b)ci=G|(P&amp;ci)</span></span><br><span class="line">    sum[<span class="number">1</span>] =G[<span class="number">1</span>] ^ P[<span class="number">1</span>] ^ C[<span class="number">1</span>];</span><br><span class="line">    G[<span class="number">2</span>] =a[<span class="number">2</span>] &amp; b[<span class="number">2</span>];</span><br><span class="line">    P[<span class="number">2</span>] =a[<span class="number">2</span>] | b[<span class="number">2</span>];</span><br><span class="line">    C[<span class="number">2</span>] =G[<span class="number">1</span>] |(P[<span class="number">1</span>] &amp; C[<span class="number">1</span>]);</span><br><span class="line">    sum[<span class="number">2</span>] =G[<span class="number">2</span>] ^ P[<span class="number">2</span>] ^ C[<span class="number">2</span>];</span><br><span class="line">    G[<span class="number">3</span>] =a[<span class="number">3</span>]&amp; b[<span class="number">3</span>];</span><br><span class="line">    P[<span class="number">3</span>] =a[<span class="number">3</span>] | b[<span class="number">3</span>];</span><br><span class="line">    C[<span class="number">3</span>] =G[<span class="number">2</span>] |(P[<span class="number">2</span>] &amp; C[<span class="number">2</span>]);</span><br><span class="line">    sum[<span class="number">3</span>] =G[<span class="number">3</span>] ^ P[<span class="number">3</span>] ^ C[<span class="number">3</span>];</span><br><span class="line">    G[<span class="number">4</span>] =a[<span class="number">4</span>] &amp; b[<span class="number">4</span>];</span><br><span class="line">    P[<span class="number">4</span>] =a[<span class="number">4</span>] | b[<span class="number">4</span>];</span><br><span class="line">    C[<span class="number">4</span>] =G[<span class="number">3</span>] |(P[<span class="number">3</span>] &amp; C[<span class="number">3</span>]);</span><br><span class="line">    sum[<span class="number">4</span>] =G[<span class="number">4</span>] ^ P[<span class="number">4</span>] ^ C[<span class="number">4</span>];</span><br><span class="line">    G[<span class="number">5</span>] =a[<span class="number">5</span>] &amp; b[<span class="number">5</span>];</span><br><span class="line">    P[<span class="number">5</span>] =a[<span class="number">5</span>] | b[<span class="number">5</span>];</span><br><span class="line">    C[<span class="number">5</span>] =G[<span class="number">4</span>] |(P[<span class="number">4</span>] &amp; C[<span class="number">4</span>]);</span><br><span class="line">    sum[<span class="number">5</span>] =G[<span class="number">5</span>] ^ P[<span class="number">5</span>] ^ C[<span class="number">5</span>];</span><br><span class="line">    G[<span class="number">6</span>] =a[<span class="number">6</span>] &amp; b[<span class="number">6</span>];</span><br><span class="line">    P[<span class="number">6</span>] =a[<span class="number">6</span>] | b[<span class="number">6</span>];</span><br><span class="line">    C[<span class="number">6</span>] =G[<span class="number">5</span>] |(P[<span class="number">5</span>] &amp; C[<span class="number">5</span>]);</span><br><span class="line">    sum[<span class="number">6</span>] =G[<span class="number">6</span>] ^ P[<span class="number">6</span>] ^ C[<span class="number">6</span>];</span><br><span class="line">    G[<span class="number">7</span>] =a[<span class="number">7</span>] &amp; b[<span class="number">7</span>];</span><br><span class="line">    P[<span class="number">7</span>] =a[<span class="number">7</span>] | b[<span class="number">7</span>];</span><br><span class="line">    C[<span class="number">7</span>] =G[<span class="number">6</span>] |(P[<span class="number">6</span>] &amp; C[<span class="number">6</span>]);</span><br><span class="line">    sum[<span class="number">7</span>] =G[<span class="number">7</span>] ^ P[<span class="number">7</span>] ^ C[<span class="number">7</span>];</span><br><span class="line">    co=G[<span class="number">7</span>] |(P[<span class="number">7</span>] &amp; C[<span class="number">7</span>]);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结构图"><a href="#仿真结构图" class="headerlink" title="仿真结构图"></a>仿真结构图</h3><p><img src="/images/%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/2.png"></p><h2 id="仿真文件"><a href="#仿真文件" class="headerlink" title="仿真文件"></a>仿真文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> qjqsimu;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] a,b;</span><br><span class="line"><span class="keyword">reg</span> ci;</span><br><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line"><span class="keyword">wire</span> co;</span><br><span class="line">qjq sl(co,sum,a,b,ci);</span><br><span class="line"><span class="keyword">initial</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        a=<span class="number">8&#x27;b00000000</span>;b=<span class="number">8&#x27;b00000000</span>;ci=<span class="number">0</span>;   <span class="comment">//初始化，可将a初始大一些得到co为1的情况</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">2</span> <span class="keyword">assign</span> &#123;a,b&#125;=&#123;a,b&#125;+<span class="number">1</span>;             <span class="comment">//延迟2ps，增大观察范围</span></span><br><span class="line"><span class="keyword">always</span> #<span class="number">1</span> <span class="keyword">assign</span> ci=~ci;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真波形"><a href="#仿真波形" class="headerlink" title="仿真波形"></a>仿真波形</h3><p><img src="/images/%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/3.png"></p><p>说明：首先在设计文件中，由最开始的进位输入ci逐级传递给c，最后传递给co，每位数据都需要传递一次上级数据，代码运算次数多，延时高。</p><h1 id="四位超前进位加法器"><a href="#四位超前进位加法器" class="headerlink" title="四位超前进位加法器"></a>四位超前进位加法器</h1><h2 id="设计文件-1"><a href="#设计文件-1" class="headerlink" title="设计文件"></a>设计文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> qjq(sum,c_out,a,b,c_in);</span><br><span class="line">  <span class="keyword">input</span>[<span class="number">3</span>:<span class="number">0</span>] a,b;</span><br><span class="line">  <span class="keyword">input</span> c_in;</span><br><span class="line">  <span class="keyword">output</span>[<span class="number">3</span>:<span class="number">0</span>] sum;</span><br><span class="line">  <span class="keyword">output</span> c_out;</span><br><span class="line">  <span class="keyword">wire</span>[<span class="number">4</span>:<span class="number">0</span>] g,p,c;</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">0</span>]=c_in;</span><br><span class="line">    <span class="keyword">assign</span> p=a|b;</span><br><span class="line">    <span class="keyword">assign</span> g=a&amp;b;</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">1</span>]=g[<span class="number">0</span>]|(p[<span class="number">0</span>]&amp;c[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">2</span>]=g[<span class="number">1</span>]|(p[<span class="number">1</span>]&amp;(g[<span class="number">0</span>]|(p[<span class="number">0</span>]&amp;c[<span class="number">0</span>])));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">3</span>]=g[<span class="number">2</span>]|(p[<span class="number">2</span>]&amp;(g[<span class="number">1</span>]|(p[<span class="number">1</span>]&amp;(g[<span class="number">0</span>]|(p[<span class="number">0</span>]&amp;c[<span class="number">0</span>])))));</span><br><span class="line">    <span class="keyword">assign</span> c[<span class="number">4</span>]=g[<span class="number">3</span>]|(p[<span class="number">3</span>]&amp;(g[<span class="number">2</span>]|(p[<span class="number">2</span>]&amp;(g[<span class="number">1</span>]|(p[<span class="number">1</span>]&amp;(g[<span class="number">0</span>]|(p[<span class="number">0</span>]&amp;c[<span class="number">0</span>])))))));</span><br><span class="line">    <span class="keyword">assign</span> sum=p^c[<span class="number">3</span>:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> c_out=c[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真结构图-1"><a href="#仿真结构图-1" class="headerlink" title="仿真结构图"></a>仿真结构图</h3><p><img src="/images/%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/4.png"></p><h2 id="仿真文件-1"><a href="#仿真文件-1" class="headerlink" title="仿真文件"></a>仿真文件</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> qjqsimu;</span><br><span class="line">  <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] a,b;</span><br><span class="line">  <span class="keyword">reg</span> c_in;</span><br><span class="line">  <span class="keyword">wire</span> [<span class="number">3</span>:<span class="number">0</span>] sum;</span><br><span class="line">  <span class="keyword">wire</span> c_out;</span><br><span class="line">  qjq U3(<span class="variable">.a</span>(a),<span class="variable">.b</span>(b),<span class="variable">.c_in</span>(c_in),<span class="variable">.sum</span>(sum),<span class="variable">.c_out</span>(c_out));</span><br><span class="line">  <span class="keyword">initial</span> </span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      a=<span class="number">4&#x27;b0000</span>;b=<span class="number">4&#x27;b0000</span>;c_in=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">always</span> #<span class="number">10</span> <span class="keyword">assign</span> &#123;a,b&#125;=&#123;a,b&#125;+<span class="number">1</span>;             </span><br><span class="line">  <span class="keyword">always</span> #<span class="number">5</span> <span class="keyword">assign</span> c_in=~c_in;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h3 id="仿真波形-1"><a href="#仿真波形-1" class="headerlink" title="仿真波形"></a>仿真波形</h3><p><img src="/images/%E8%B6%85%E5%89%8D%E8%BF%9B%E4%BD%8D%E5%8A%A0%E6%B3%95%E5%99%A8/5.png"></p><p>说明：设计文件中对每一个进位的运算都进行了合并，总共计算8次，如果按照八位级联加法器的写法，每一位需进行4次运算，加上最后的进位，总共应需要17次计算。显然是提高了效率。</p><h1 id="八位超前进位"><a href="#八位超前进位" class="headerlink" title="八位超前进位"></a>八位超前进位</h1><p>刚入手八位超前进位加法器的话，写之前就在为进位链的表达式头疼，但是做了一下四位超前进位，可以总结出表达式的规律，进而再写一遍进行验证，与级联加法器的仿真结果完全相同，其设计文件源码如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> qjq(co,sum,a,b,ci);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] a,b;</span><br><span class="line">    <span class="keyword">input</span> ci;</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">output</span> co;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] G,P,C;         <span class="comment">//中间变量，分别是生产函数、传递函数、和进位函数</span></span><br><span class="line"><span class="keyword">assign</span>    G=a&amp;b;</span><br><span class="line"><span class="keyword">assign</span>    P=a|b;</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">0</span>]=ci;</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">1</span>]=G[<span class="number">1</span>]|(P[<span class="number">1</span>]&amp;G[<span class="number">0</span>])|(P[<span class="number">1</span>]&amp;P[<span class="number">0</span>]&amp;ci);</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">2</span>]=G[<span class="number">2</span>]|(P[<span class="number">2</span>]&amp;G[<span class="number">1</span>])|(P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;G[<span class="number">0</span>])|(P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">0</span>]&amp;ci);</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">3</span>]=G[<span class="number">3</span>]|(P[<span class="number">3</span>]&amp;G[<span class="number">2</span>])|(P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;G[<span class="number">1</span>])|(P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;G[<span class="number">0</span>])|(P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">0</span>]&amp;ci);</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">4</span>]=G[<span class="number">4</span>]|(P[<span class="number">4</span>]&amp;G[<span class="number">3</span>])|(P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;G[<span class="number">2</span>])|(P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;G[<span class="number">1</span>])|(P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;G[<span class="number">0</span>])|(P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">0</span>]&amp;ci);</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">5</span>]=G[<span class="number">5</span>]|(P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;G[<span class="number">3</span>])|(P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;G[<span class="number">2</span>])|(P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;G[<span class="number">1</span>])|(P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;G[<span class="number">0</span>])|(P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">0</span>]&amp;ci);</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">6</span>]=G[<span class="number">6</span>]|(P[<span class="number">6</span>]&amp;G[<span class="number">5</span>])|(P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;G[<span class="number">4</span>])|(P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;G[<span class="number">3</span>])|(P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;G[<span class="number">2</span>])|(P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;G[<span class="number">1</span>])|(P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;G[<span class="number">0</span>])|(P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">0</span>]&amp;ci);</span><br><span class="line"><span class="keyword">assign</span>    C[<span class="number">7</span>]=G[<span class="number">7</span>]|(P[<span class="number">7</span>]&amp;G[<span class="number">6</span>])|(P[<span class="number">7</span>]&amp;P[<span class="number">6</span>]&amp;G[<span class="number">5</span>])|(P[<span class="number">7</span>]&amp;P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;G[<span class="number">4</span>])|(P[<span class="number">7</span>]&amp;P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;G[<span class="number">3</span>])|(P[<span class="number">7</span>]&amp;P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;G[<span class="number">2</span>])|(P[<span class="number">7</span>]&amp;P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;G[<span class="number">1</span>])|(P[<span class="number">7</span>]&amp;P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;G[<span class="number">0</span>])|(P[<span class="number">7</span>]&amp;P[<span class="number">6</span>]&amp;P[<span class="number">5</span>]&amp;P[<span class="number">4</span>]&amp;P[<span class="number">3</span>]&amp;P[<span class="number">2</span>]&amp;P[<span class="number">1</span>]&amp;P[<span class="number">0</span>]&amp;ci);</span><br><span class="line"><span class="keyword">assign</span>   sum=P^C[<span class="number">7</span>:<span class="number">0</span>];</span><br><span class="line"><span class="keyword">assign</span>   co=C[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> 加法器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>verilog设计加法器</title>
      <link href="/2019/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/"/>
      <url>/2019/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文利用了硬件行为描述、数据流描述、结构描述三种方法分别写了几个加法器</p><span id="more"></span><h2 id="一位半加法器"><a href="#一位半加法器" class="headerlink" title="一位半加法器"></a>一位半加法器</h2><p>即两个一位的二进制数相加，得到其正常相加的结果的最后一位。</p><h4 id="仿真波形图"><a href="#仿真波形图" class="headerlink" title="仿真波形图"></a>仿真波形图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/6.png"></p><h3 id="硬件行为描述"><a href="#硬件行为描述" class="headerlink" title="硬件行为描述"></a>硬件行为描述</h3><h4 id="设计文件"><a href="#设计文件" class="headerlink" title="设计文件"></a>设计文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">module bjqxw(a,b,sum,cout);</span><br><span class="line">    input a,b;</span><br><span class="line">    output sum,cout;</span><br><span class="line">    reg sum,cout;</span><br><span class="line">    always @(a or b)</span><br><span class="line">        begin</span><br><span class="line">            case(&#123;a,b&#125;)</span><br><span class="line">                2&#x27;b00:begin</span><br><span class="line">                    sum=0;cout=0;</span><br><span class="line">                    end</span><br><span class="line">                2&#x27;b01:begin</span><br><span class="line">                    sum=1;cout=0;</span><br><span class="line">                    end</span><br><span class="line">                2&#x27;b10:begin</span><br><span class="line">                    sum=1;cout=0;</span><br><span class="line">                    end</span><br><span class="line">                2&#x27;b11:begin</span><br><span class="line">                    sum=0;cout=1;</span><br><span class="line">                    end </span><br><span class="line">            endcase</span><br><span class="line">        end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真结构图"><a href="#仿真结构图" class="headerlink" title="仿真结构图"></a>仿真结构图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/12.png"></p><h4 id="仿真文件"><a href="#仿真文件" class="headerlink" title="仿真文件"></a>仿真文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module bjqxwsimu;</span><br><span class="line">    reg a,b;</span><br><span class="line">    wire sum,cout;</span><br><span class="line">    bjqxw sl(a,b,sum,cout);</span><br><span class="line">    initial</span><br><span class="line">        begin</span><br><span class="line">            a=0;b=0;</span><br><span class="line">        end</span><br><span class="line">    always #10 &#123;a,b&#125;=&#123;a,b&#125;+1;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="结构描述"><a href="#结构描述" class="headerlink" title="结构描述"></a>结构描述</h3><h4 id="设计文件-1"><a href="#设计文件-1" class="headerlink" title="设计文件"></a>设计文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module add(a,b,sum,cout);</span><br><span class="line">    input a,b;</span><br><span class="line">    output sum,cout;</span><br><span class="line">    xor(sum,a,b);</span><br><span class="line">    and(cout,a,b);</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真结构图-1"><a href="#仿真结构图-1" class="headerlink" title="仿真结构图"></a>仿真结构图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/5.png"></p><h4 id="仿真文件-1"><a href="#仿真文件-1" class="headerlink" title="仿真文件"></a>仿真文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module add1;</span><br><span class="line">    reg a,b;</span><br><span class="line">    wire sum,cout;</span><br><span class="line">    add ul(a,b,sum,cout);</span><br><span class="line">    initial</span><br><span class="line">    begin</span><br><span class="line">        a=0;b=0;</span><br><span class="line">    end</span><br><span class="line">    always #10 &#123;a,b&#125;=&#123;a,b&#125;+1;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="数据流描述"><a href="#数据流描述" class="headerlink" title="数据流描述"></a>数据流描述</h3><h4 id="设计文件-2"><a href="#设计文件-2" class="headerlink" title="设计文件"></a>设计文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">endmodulemodule add3(a,b,sum,cout);</span><br><span class="line">    input a,b;</span><br><span class="line">    output sum,cout;</span><br><span class="line">    wire sum,cout;</span><br><span class="line">    assign sum=a^b;</span><br><span class="line">    assign cout=a&amp;b;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真结构图-2"><a href="#仿真结构图-2" class="headerlink" title="仿真结构图"></a>仿真结构图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/5.png"></p><h4 id="仿真文件-2"><a href="#仿真文件-2" class="headerlink" title="仿真文件"></a>仿真文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module add1;</span><br><span class="line">    reg ain,bin;</span><br><span class="line">    reg clk;</span><br><span class="line">    wire sum1,cout1;</span><br><span class="line">    initial</span><br><span class="line">    begin</span><br><span class="line">        ain=0;bin=0;clk=0;</span><br><span class="line">    end</span><br><span class="line">    always #50 clk=~clk;</span><br><span class="line">    always @(posedge clk)</span><br><span class="line">    begin</span><br><span class="line">        ain=&#123;$random&#125;%2;</span><br><span class="line">        #3 bin=&#123;$random&#125;%2;</span><br><span class="line">    end</span><br><span class="line">    add3 ul(.a(ain),.b(bin),.sum(sum1),.cout(cout1));</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="一位全加器"><a href="#一位全加器" class="headerlink" title="一位全加器"></a>一位全加器</h2><h4 id="仿真波图"><a href="#仿真波图" class="headerlink" title="仿真波图"></a>仿真波图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/7.png"></p><h3 id="硬件行为描述-1"><a href="#硬件行为描述-1" class="headerlink" title="硬件行为描述"></a>硬件行为描述</h3><h4 id="设计文件-3"><a href="#设计文件-3" class="headerlink" title="设计文件"></a>设计文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module qjq(a,b,cin,sum,cout);</span><br><span class="line">    input a,b,cin;</span><br><span class="line">    output sum,cout;</span><br><span class="line">    reg sum,cout;</span><br><span class="line">    always @(a or b or cin)</span><br><span class="line">    begin</span><br><span class="line">    case (&#123;cin,a,b&#125;)</span><br><span class="line">        3&#x27;b000:begin</span><br><span class="line">            sum=0;cout=0;</span><br><span class="line">        end</span><br><span class="line">        3&#x27;b001:begin</span><br><span class="line">            sum=1;cout=0;</span><br><span class="line">        end</span><br><span class="line">        3&#x27;b010:begin</span><br><span class="line">            sum=1;cout=0;</span><br><span class="line">        end</span><br><span class="line">       3&#x27;b011:begin</span><br><span class="line">            sum=0;cout=1;</span><br><span class="line">        end</span><br><span class="line">        3&#x27;b100:begin</span><br><span class="line">            sum=1;cout=0;</span><br><span class="line">        end</span><br><span class="line">        3&#x27;b101:begin</span><br><span class="line">            sum=0;cout=1;</span><br><span class="line">        end</span><br><span class="line">        3&#x27;b110:begin</span><br><span class="line">            sum=0;cout=1;</span><br><span class="line">        end</span><br><span class="line">        3&#x27;b111:begin</span><br><span class="line">            sum=1;cout=1;</span><br><span class="line">        end</span><br><span class="line">      endcase </span><br><span class="line">     end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真结构图-3"><a href="#仿真结构图-3" class="headerlink" title="仿真结构图"></a>仿真结构图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/6.5.png"></p><h4 id="仿真文件-3"><a href="#仿真文件-3" class="headerlink" title="仿真文件"></a>仿真文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module qjq1;</span><br><span class="line">    reg a,b,cin;</span><br><span class="line">    wire sum,cout;</span><br><span class="line">    qjq ul(a,b,cin,sum,cout);</span><br><span class="line">    initial</span><br><span class="line">    begin</span><br><span class="line">        a=0;b=0;cin=0;</span><br><span class="line">    end</span><br><span class="line">    always #10 &#123;a,b,cin&#125;=&#123;a,b,cin&#125;+1;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="结构描述-1"><a href="#结构描述-1" class="headerlink" title="结构描述"></a>结构描述</h3><h4 id="设计文件-4"><a href="#设计文件-4" class="headerlink" title="设计文件"></a>设计文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module qiq(a,b,cin,sum,cout);</span><br><span class="line">    input a,b,cin;</span><br><span class="line">    output sum,cout;</span><br><span class="line">    wire q1,q2,q3;</span><br><span class="line">    xor(sum,a,b,cin);</span><br><span class="line">    or(q1,a,b);</span><br><span class="line">    or(q2,b,cin);</span><br><span class="line">    or(q3,a,cin);</span><br><span class="line">    and(cout,q1,q2,q3);</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真结构图-4"><a href="#仿真结构图-4" class="headerlink" title="仿真结构图"></a>仿真结构图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/10.png"></p><h4 id="仿真文件-4"><a href="#仿真文件-4" class="headerlink" title="仿真文件"></a>仿真文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module qjq1;</span><br><span class="line">    reg a,b,cin;</span><br><span class="line">    wire sum,cout;</span><br><span class="line">    qiq ul(a,b,cin,sum,cout);</span><br><span class="line">    initial</span><br><span class="line">    begin</span><br><span class="line">        a=0;b=0;cin=0;</span><br><span class="line">    end</span><br><span class="line">    always #10 &#123;a,b,cin&#125;=&#123;a,b,cin&#125;+1;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h3 id="数据流描述-1"><a href="#数据流描述-1" class="headerlink" title="数据流描述"></a>数据流描述</h3><h4 id="设计文件-5"><a href="#设计文件-5" class="headerlink" title="设计文件"></a>设计文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module qjq(a,b,cin,sum,cout);</span><br><span class="line">    input a,b,cin;</span><br><span class="line">    output sum,cout;</span><br><span class="line">    assign &#123;sum,cout&#125;=a+b+cin;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真结构图-5"><a href="#仿真结构图-5" class="headerlink" title="仿真结构图"></a>仿真结构图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/11.png"></p><h4 id="仿真文件-5"><a href="#仿真文件-5" class="headerlink" title="仿真文件"></a>仿真文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module qjqsimu;</span><br><span class="line">    reg a,b,cin;</span><br><span class="line">    wire sum,cout;</span><br><span class="line">    qjq sl(a,b,cin,sum,cout);</span><br><span class="line">    initial</span><br><span class="line">        begin</span><br><span class="line">            a=0;b=0;cin=a&amp;b;</span><br><span class="line">        end</span><br><span class="line">    always #20 &#123;a,b&#125;=&#123;a,b&#125;+1;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h2 id="四位全加器"><a href="#四位全加器" class="headerlink" title="四位全加器"></a>四位全加器</h2><h3 id="数据流描述-2"><a href="#数据流描述-2" class="headerlink" title="数据流描述"></a>数据流描述</h3><h4 id="设计文件-6"><a href="#设计文件-6" class="headerlink" title="设计文件"></a>设计文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module qjq(a,b,cin,sum,cout);</span><br><span class="line">    input [3:0] a,b;</span><br><span class="line">    input cin;</span><br><span class="line">    output [3:0] sum;</span><br><span class="line">    output cout;</span><br><span class="line">    assign &#123;sum,cout&#125;=a+b+cin;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真结构图-6"><a href="#仿真结构图-6" class="headerlink" title="仿真结构图"></a>仿真结构图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/8.png"></p><h4 id="仿真文件-6"><a href="#仿真文件-6" class="headerlink" title="仿真文件"></a>仿真文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module qjqsimu;</span><br><span class="line">    reg [3:0] a,b;</span><br><span class="line">    reg cin;</span><br><span class="line">    wire [3:0] sum;</span><br><span class="line">    wire cout;</span><br><span class="line">    qjq sl(a,b,cin,sum,cout);</span><br><span class="line">    initial</span><br><span class="line">        begin</span><br><span class="line">            a=4&#x27;b0000;b=4&#x27;b0000;cin=0;</span><br><span class="line">        end</span><br><span class="line">    always #20 &#123;a,b&#125;=&#123;a,b&#125;+4&#x27;b0001;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><h4 id="仿真波图-1"><a href="#仿真波图-1" class="headerlink" title="仿真波图"></a>仿真波图</h4><p><img src="/images/verilog%E8%AE%BE%E8%AE%BE%E8%AE%A1%E5%8A%A0%E6%B3%95%E5%99%A8/9.png"></p><p>ps：将上述输入输出的字段长度对应修改，可得到相应数位的全加器数据流描述</p>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> 加法器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vivado三人表决仿真</title>
      <link href="/2019/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/"/>
      <url>/2019/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>下面以三人表决电路的verilog仿真来了解一下vivado软件的使用。</p><span id="more"></span><h2 id="编写设计文件"><a href="#编写设计文件" class="headerlink" title="编写设计文件"></a>编写设计文件</h2><p>首先可以在开始的界面通过create new project来新建工程，也可以通过<code>file--&gt;project--&gt;new...</code>来新建工程</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/1.png"></p><p>点击next</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/2.png"></p><p>然后给文件起个名字，见名知意最好</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/3.png"></p><p>一开始我们不需要通过程序来添加源文件，所以这个勾可以勾上</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/4.png"></p><p>相应器件默认选择就好</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/5.png"></p><p>点击完成项目就新建成功了</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/6.png"></p><p>在source面板中点击加号，如图右半部分可以新建三种文件，即约束文件、源（设计）文件、仿真文件，这里首先新建源文件即可。</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/8.png"></p><p>点击create file对文件的名字、路径和语言进行设置，这里只设置设计文件的名字即可。</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/9.png"></p><p>点击完成。</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/10.png"></p><p>这里要我们设置设置文件的输入输出端口，我们可以在这设置，也可以在代码中自行编写。</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/11.png"></p><p>在source面板中双击源文件即可查看其中代码，这里我已编写完成，按<code>ctrl S</code>保存，source文件中不出现错误文件，即表明代码编写无误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module srbj(</span><br><span class="line">    input a,</span><br><span class="line">    input b,</span><br><span class="line">    input c,</span><br><span class="line">    output d</span><br><span class="line">    );</span><br><span class="line">    assign d=a&amp;b|a&amp;c|b&amp;c;</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/12.png"></p><p>错误示例：</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/13.png"></p><p>点击左侧的<code>RTL ANALYSIS</code>可以生成相关的逻辑图，检查逻辑是否有问题</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/15.png"></p><h2 id="编写仿真文件"><a href="#编写仿真文件" class="headerlink" title="编写仿真文件"></a>编写仿真文件</h2><p>同理新建仿真文件，且无需设置输入输出端口</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/14.png"></p><p>编写代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module srbjsimu;</span><br><span class="line">reg a,b,c;//三个寄存器</span><br><span class="line">wire d;</span><br><span class="line">srbj sl(a,b,c,d);//实例化三人表决源文件对象</span><br><span class="line">initial</span><br><span class="line">begin</span><br><span class="line">a=0;b=0;c=0;//初始值为0</span><br><span class="line">end</span><br><span class="line">always #10 &#123;a,b,c&#125;=&#123;a,b,c&#125;+1;//每延迟10，对abc进行加1，即在0-7之间循环</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure><p>点击左侧<code>RUN　Simulation</code>查看仿真结果</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/16.png"></p><p>点击图示两个按钮可将视图调整至合适</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/17.png"></p><p>完整图如下，可通过拖动黄色的时间帧查看每个位置输入输出的情况。</p><p><img src="/images/vivado%E4%B8%89%E4%BA%BA%E8%A1%A8%E5%86%B3%E4%BB%BF%E7%9C%9F/18.png"></p>]]></content>
      
      
      <categories>
          
          <category> 硬件设计 </category>
          
          <category> Verilog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Verilog </tag>
            
            <tag> Vivado </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机二级Python</title>
      <link href="/2019/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/"/>
      <url>/2019/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>计算机二级在近两年新加了python的选择，趁机考了一下，顺便记录一下学习的一些所获</p><span id="more"></span><h2 id="第一章-程序设计语言概述"><a href="#第一章-程序设计语言概述" class="headerlink" title="第一章 程序设计语言概述"></a>第一章 程序设计语言概述</h2><h3 id="考纲考点："><a href="#考纲考点：" class="headerlink" title="考纲考点："></a>考纲考点：</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/1.png" alt="1"></p><p>这一部分主要是介绍计算机语言的公共常识，一些尝试我就按照自己的理解方式来记忆：</p><p>程序设计语言——计算机与人类之间的翻译官，所以称为交互体系，翻译官用的语言称为计算机程序，就像人类的语言有语法等等规则一样。</p><p>高级编程语言包括静态语言和脚本语言，python是解释语言，就是直接跟计算机对话的那种，也就是脚本语言；Java那种是需要编译才能执行的语言，就相当于需要二次翻译，是静态语言，因为静态（懒），还需要一个传话的才行。</p><p>官方用语的话，编译是将源代码转换成目标代码的过程，解释是将源代码逐条转换成目标代码的同时逐条运行目标代码的过程。二者区别可见下图来理解：</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/2.png" alt="2"></p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/3.png" alt="3"></p><p>编译是一次性翻译，再传话，经过传话人以后，就不需要翻译官再翻译一遍了，所以一旦程序被编译，就不需要再次编译，所以重复执行速度更快，当然这个目标代码也就不再需要编译器。</p><p>解释是每次都需要解释，因为翻译一遍的外语容易忘，告诉传话人以后，传话人就不容易忘自己母语记忆的内容，但是解释是翻译官兼职传话人，所以只要翻译官存在，程序就可以执行。无论是那种系统，而且一个人干，程序纠错和维护也非常方便。</p><h3 id="Python语言概述"><a href="#Python语言概述" class="headerlink" title="Python语言概述"></a>Python语言概述</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/4.png"></p><p>这是python的最小程序了。</p><p>至于python的开发环境配置这里就不介绍了，环境变量可以直接添加，比jdk方便多了</p><p>python的解释器有两个重要工具：IDLE——python集成开发环境（相当于人类、翻译官、计算机组成的整体），pip——python第三方库安装工具（邀请翻译官的功能）</p><p>Python程序的运行方式——交互式（命令行）、文件式（非命令行）</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/5.png"></p><h3 id="程序的基本编写方法"><a href="#程序的基本编写方法" class="headerlink" title="程序的基本编写方法"></a>程序的基本编写方法</h3><p>IPO程序编写方法——Input（输入，相当于人类编写代码这个过程），process（处理，相当于翻译），output（计算机得到翻译官给的信息做出响应）</p><h3 id="Python程序的特点"><a href="#Python程序的特点" class="headerlink" title="Python程序的特点"></a>Python程序的特点</h3><p> Python具有通用性，因为应用领域广，所以才要学习，当作工具用也好</p><p>Python语法简洁，只有33个保留字，看起来就像英语正常表达一样</p><p>Python生态高产，库特别多，也就是翻译官特别充足，很多荒诞无理的要求都可以被翻译官听懂</p><p>除了Python语法的三个重要特点外，Python程序还 有一些具体特点。 </p><p>•平台无关：前面说到过，只要有翻译官就可以，在任何系统都可以运行</p><p> •强制可读 ：也就是利用缩进来表明逻辑关系，相当于句子之间没有停顿，使用缩进来强制理解</p><p>•支持中文：看下图</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/7.png"></p><h2 id="第二章-Python语言基本语法元素"><a href="#第二章-Python语言基本语法元素" class="headerlink" title="第二章 Python语言基本语法元素"></a>第二章 Python语言基本语法元素</h2><h3 id="考纲考点：-1"><a href="#考纲考点：-1" class="headerlink" title="考纲考点："></a>考纲考点：</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/8.png"></p><h3 id="程序的格式框架"><a href="#程序的格式框架" class="headerlink" title="程序的格式框架"></a>程序的格式框架</h3><h4 id="缩进："><a href="#缩进：" class="headerlink" title="缩进："></a>缩进：</h4><p>Python语言采用严格的“缩进”来表明程序的 格式框架，用来表示代码之间的包含和层次关系。 1个缩进 = 4个空格 =1个退格。但是空格和退格不能混用。而且缩进是Python语言中表明程序框架的唯一手段。其重要性可见一斑。</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/9.png"></p><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><p>注释就是在输入的时候加入一些不想让翻译官翻译的东西，但是翻译官如何去区分哪些是要的，哪些是不要的呢？所以就有了注释，单行注释用井号。多行注释用三对引号，三队引号之间的内容就是被注释掉了。单引号双引号无所谓。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">这里面</span><br><span class="line">都是注释</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">#print(&quot;Hello!&quot;) 这是一条单行注释</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">这里面</span><br><span class="line">也都是注释</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><p>变量就是一个一个的小房子，用来存放东西的，经常用<strong>一个等号</strong>把东西放进变量（房子）里，也就是赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=3#把3放进了a中</span><br><span class="line">a==2#两个等号是用来比较二者是否相同</span><br></pre></td></tr></table></figure><h4 id="命名："><a href="#命名：" class="headerlink" title="命名："></a>命名：</h4><p> Python语言允许采用大写字母、小写字母、数 字、下划线(_)和汉字等字符及其组合给变量命 名，但名字的首字符不能是数字，中间不能出现空格，长度没有限制 n。<em>注意：标识符对大小写敏感，python和Python 是两个不同的名字</em> </p><h4 id="保留字："><a href="#保留字：" class="headerlink" title="保留字："></a>保留字：</h4><p>python中你盖的房子是变量，早就存在的名胜建筑就是叫做保留字了，自己的房子爱咋咋地，名胜古迹可不能乱动，而且还不能建一个和名胜建筑一样的房子，要不然就侵权了，要坐牢（出bug）的！</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/10.png"></p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Python语言支持多种数据类型，最简单的包括<strong>数字</strong>类型、<strong>字符串</strong>类型，略微复杂的包括元组类型、集合类型、列表类型、字典类型等。</p><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>表示数字或数值的数据类型称为数字类型，Python语言提供3种数字类型：整数、浮点数和复数，分别对应数学中的整数、实数和复数。</p><p>一个整数值又可以表示为十进制、十六进制、八进制和二进制等不同进制形式。一个浮点数可以表示为带有小数点的一般形式，也可以采用科学计数法表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">举个例子，看不懂也没关系</span><br><span class="line">#整数类型</span><br><span class="line">十进制： 1010 </span><br><span class="line">十六进制：0x3F2 </span><br><span class="line">八进制： 0o1762 </span><br><span class="line">二进制： 0b001111110010</span><br><span class="line">#浮点数类型</span><br><span class="line">一般形式： 123.456 </span><br><span class="line">科学计数法： 1.23456e2 </span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>至于字符串， Python语言中，字符串是用两个双引号“ ”或者单 引号‘ ’括起来的一个或多个字符。 </p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/11.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello world&quot;[1]</span><br><span class="line">输出：e</span><br><span class="line">&quot;hello world&quot;[6]</span><br><span class="line">输出：w</span><br><span class="line">&quot;hello world&quot;[-1]</span><br><span class="line">输出：d</span><br></pre></td></tr></table></figure><p>可以采用[N: M]（左闭右开区间）格式获取字符串的子串，这个操作被形象地称为切片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello world&quot;[1：4]</span><br><span class="line">输出：ell</span><br><span class="line">&quot;hello world&quot;[6：-2]</span><br><span class="line">输出：wor</span><br></pre></td></tr></table></figure><p>可以通过Python默认提供的len()函数获取字符串 的长度，一个中文字符和西文字符的长度都记为1。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">len(&quot;hello&quot;)</span><br><span class="line">输出：5</span><br><span class="line">len(&quot;hello world&quot;)</span><br><span class="line">输出：11</span><br></pre></td></tr></table></figure><h3 id="程序的语句元素"><a href="#程序的语句元素" class="headerlink" title="程序的语句元素"></a>程序的语句元素</h3><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p>产生或计算新数据值的代码片段称为表达式，简单说就是连接在一起的一个句子/短句</p><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>前面提到过了，<strong>一个等号</strong>是赋值，而且是从右往左赋值，如<code>a=3</code></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p> Python程序会经常使用当前程序之外已有的功能 代码，这个过程叫“引用”。Python语言使用 import保留字引用当前程序以外的功能库，使用方 式如下： <code>import &lt;功能库名称&gt;</code></p><p>其实说白了就是请翻译官</p><h4 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h4><p> 分支语句是控制程序运行的一种语句，它的作用是根据判断 条件选择程序执行路径。分支语句包括：单分支、二分支和 多分支。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=3#一开始告诉你a里面放的是3</span><br><span class="line">if a==3:#注意冒号，然后翻译一下，如果a等于3</span><br><span class="line">print(&quot;a=3没毛病&quot;)#注意缩进，表示上一句的&quot;断句&quot;,翻译为&quot;则输出a=3没毛病&quot;</span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>循环语句是控制程序运行的一类重要语句，与分支 语句控制程序执行类似，它的作用是根据判断条件 确定一段程序是否再次执行一次或者多次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#输出1到10中所有的自然数</span><br><span class="line">n=1</span><br><span class="line">while n&lt;10:#注意冒号，翻译——当n小于10的时候</span><br><span class="line">print(n)#注意缩进，翻译——则输出n</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本输入输出函数"><a href="#基本输入输出函数" class="headerlink" title="基本输入输出函数"></a>基本输入输出函数</h3><p>直接演示了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=input(&quot;默认会输入字符串噢&quot;)#输入函数input()，就算是输入数字也会当成字符串</span><br><span class="line">b=eval(&quot;1.3+a&quot;)   #输入函数eval(),里面就算是有字符串类型的数字，也会变成数字噢</span><br><span class="line">print(a)  #输出一串数字</span><br><span class="line">print(b)  #加入a输入了1，这里就输出2.3</span><br><span class="line">print(1.3+a)  #这里会报错噢，因为字符串类型的数字和数字不能相加</span><br></pre></td></tr></table></figure><p><code>print</code>函数还有个重要的地方：<code>print</code>函数输出讲道理是直接就换行了，因为<code>print()</code>里面自带换行，举个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(3,end=&quot;&quot;)#不换行</span><br><span class="line">print(3)#换行，其实是print(3,end=&quot;\n&quot;),后面的部分默认就不显示出来了</span><br><span class="line">print(3,end=&quot;k&quot;)#输出3k</span><br></pre></td></tr></table></figure><h2 id="第三章-基本数据类型"><a href="#第三章-基本数据类型" class="headerlink" title="第三章 基本数据类型"></a>第三章 基本数据类型</h2><h3 id="考纲考点"><a href="#考纲考点" class="headerlink" title="考纲考点"></a>考纲考点</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/12.png"></p><h3 id="数字类型-1"><a href="#数字类型-1" class="headerlink" title="数字类型"></a>数字类型</h3><p>前面提到过，python提供的数字类型有三种，整数、浮点、复数，翻译一下就算整数、实数、复数。</p><p>整数嘛，在前面加<code>0b</code>或者<code>0B</code>，就意味着你在写二进制数字，b代表<code>binary</code>，其他英文可自行查阅。</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/13.png"></p><p>浮点和整数的区别就算10.10是浮点，10.0也是浮点，都不是整数。浮点数还可以用科学计数法来写，如<code>1010.0</code>, <code>-1010.</code>, <code>1.01e3</code>, <code>-1.01E-3</code></p><p>至于复数，计算机可不像人变通那么多，<code>10+0j</code>是复数，<code>10</code>就不是复数，所以只要带<code>j</code>的数就算复数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1.23e4+5.67e4j).real  #.real是用来获取实部，点翻译成“的”，real翻译为实部</span><br><span class="line">12300.0 </span><br><span class="line">(1.23e4+5.67e4j).imag #同上</span><br><span class="line">56700.0 </span><br><span class="line">1.23e4+5.67e4j.imag   # 先获得5.67e4j的虚部，再与1.23e4进行求和计算 </span><br><span class="line">69000.0</span><br></pre></td></tr></table></figure><h4 id="数字类型的运算"><a href="#数字类型的运算" class="headerlink" title="数字类型的运算"></a>数字类型的运算</h4><table><thead><tr><th align="center">操作符</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">x+y</td><td align="center">求和</td></tr><tr><td align="center">x-y</td><td align="center">求差</td></tr><tr><td align="center">x*y</td><td align="center">求积</td></tr><tr><td align="center">x/y</td><td align="center">求商</td></tr><tr><td align="center">x//y</td><td align="center">x与y之整数商，即：不大于x与y之商的最大整数</td></tr><tr><td align="center">x**y</td><td align="center">x的y次幂，即：xy</td></tr><tr><td align="center">+x</td><td align="center">x</td></tr><tr><td align="center">-x</td><td align="center">-x</td></tr><tr><td align="center">x % y</td><td align="center">x与y之商的余数，也称为模运算</td></tr><tr><td align="center">x+=y</td><td align="center">x=x+y</td></tr><tr><td align="center">x*=y</td><td align="center">x=x*y</td></tr><tr><td align="center">依次类推</td><td align="center">……</td></tr><tr><td align="center"><strong>abs(x)</strong></td><td align="center"><strong>x的绝对值</strong></td></tr><tr><td align="center"><strong>divmod(x, y)</strong></td><td align="center"><strong>(x//y, x%y)，输出为二元组形式（也称为元组类型）</strong></td></tr><tr><td align="center"><strong>pow(x, y[, z])</strong></td><td align="center"><strong>(xy)%z，[..]表示该参数可以省略，即：pow(x,y)，它与xy相同</strong></td></tr><tr><td align="center"><strong>round(x[, ndigits])</strong></td><td align="center"><strong>对x四舍五入，保留ndigits位小数。round(x)返回四舍五入的整数值</strong></td></tr><tr><td align="center"><strong>max(x1, x2, …, xn)</strong></td><td align="center"><strong>x1, x2, …, xn的最大值，n没有限定</strong></td></tr><tr><td align="center"><strong>min(x1, x2, …, xn)</strong></td><td align="center"><strong>x1, x2, …, xn的最小值，n没有限定</strong></td></tr></tbody></table><p>浮点数与整数运算，产生结果是浮点数 ，另外<code>int(10.10)</code>得到整数10，<code>int(&quot;10&quot;)</code>也会得到10，但是int(“10.10”)就会报错，打个比方就是你把10.10放进<code>int</code>的房子里时，int首先接待第一个字符，也就是1，他知道这是数字，就收下了，但是只能收下整数，当第一个字符是<code>&quot;</code>时，他知道是字符串，就收下了，当然只要是整数就没问题，结果字符串给他一个浮点，他int就被撑炸了。</p><h3 id="字符串类型及格式化"><a href="#字符串类型及格式化" class="headerlink" title="字符串类型及格式化"></a>字符串类型及格式化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(&#x27;这是&quot;单行字符串&quot;&#x27;) </span><br><span class="line">这是&quot;单行字符串&quot; </span><br><span class="line">print(&quot;这是&#x27;单行字符串&#x27;&quot;) </span><br><span class="line">这是&#x27;单行字符串&#x27; </span><br><span class="line">print(&quot;&quot;&quot;这是&#x27;多行字符串&#x27;的第一行 这是&#x27;多行字符串&#x27;的第二行 &quot;&quot;&quot;) </span><br><span class="line">这是&#x27;多行字符串&#x27;的第一行 这是&#x27;多行字符串&#x27;的第二行 </span><br><span class="line">print(&#x27;&#x27;&#x27;这是&quot;多行字符串&quot;的第一行 这是&quot;多行字符串&quot;的第二行 &#x27;&#x27;&#x27;) </span><br><span class="line">这是&quot;多行字符串&quot;的第一行 这是&quot;多行字符串&quot;的第二行</span><br></pre></td></tr></table></figure><p><strong>重点</strong>，这个好像在考试经常会挖坑：Python语言转义符： \ ，例如：\n表示换行、\表示反斜杠、&#39;表示单引 号、&quot;表示双引号、\t表示制表符（TAB）等。</p><p>然后这个叫字符串的索引，切片，字面意思</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello world&quot;[1]</span><br><span class="line">输出：e</span><br><span class="line">&quot;hello world&quot;[6]</span><br><span class="line">输出：w</span><br><span class="line">&quot;hello world&quot;[-1]</span><br><span class="line">输出：d</span><br></pre></td></tr></table></figure><p><strong>重点</strong>，format()方法的基本使用，举几个例子，自己理解比书面用于可能会好理解一点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;&#125;曰：学而时习之，不亦说乎。&quot;.format(&quot;孔子&quot;) </span><br><span class="line">&#x27;孔子曰：学而时习之，不亦说乎。&#x27;</span><br><span class="line">&quot;&#123;&#125;曰：学而时习之，不亦&#123;&#125;。&quot;.format(&quot;孔子&quot;,&quot;说乎&quot;) </span><br><span class="line">&#x27;孔子曰：学而时习之，不亦说乎。&#x27;</span><br><span class="line">&quot;&#123;1&#125;曰：学而时习之，不亦&#123;0&#125;。&quot;.format(&quot;说乎&quot;,&quot;孔子&quot;) </span><br><span class="line">&#x27;孔子曰：学而时习之，不亦说乎。&#x27; </span><br><span class="line">&quot;&#123;1&#125;曰：&#123;&#123;学而时习之，不亦&#123;0&#125;&#125;&#125;。&quot;.format(&quot;说乎&quot;,&quot;孔子&quot;)</span><br><span class="line">&#x27;孔子曰：&#123;学而时习之，不亦说乎&#125;。&#x27;</span><br></pre></td></tr></table></figure><p>然后我总结一下：<strong>大括号就相当于座位，format里面就是即将入座的学生，大括号里没数字的就代表座位没写名字，谁排前面谁坐，有数字就按数字坐，当然最前的数字是第0，当然如果大括号里本来就有东西，那些代表刻在桌子上的其他字，照例输出就行</strong></p><p>除此之外，format还有控制格式的作用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;等级考试&quot;#在下面的25代表输出的字符数量</span><br><span class="line">&quot;&#123;:25&#125;&quot;.format(s)           #左对齐，默认 &#x27;等级考试   &#x27;</span><br><span class="line">&quot;&#123;:^25&#125;&quot;.format(s)          #居中对齐 &#x27;          等级考试           &#x27;</span><br><span class="line">&quot;&#123;:&gt;25&#125;&quot;.format(s)          #右对齐 &#x27;                     等级考试&#x27;</span><br><span class="line">&quot;&#123;:*^25&#125;&quot;.format(s)         #居中对齐且填充*号 &#x27;**********等级考试***********&#x27;</span><br><span class="line">&quot;&#123;:+^25&#125;&quot;.format(s)         #居中对齐且填充+号 &#x27;++++++++++等级考试+++++++++++&#x27;</span><br><span class="line">&quot;&#123;:十^25&#125;&quot;.format(s)        #居中对齐且填充汉字“十” &#x27;十十十十十十十十十十等级考试十十十十十十十十十十十&#x27; </span><br><span class="line">&quot;&#123;:^1&#125;&quot;.format(s)           #指定宽度为1，不足变量s的宽度 &#x27;等级考试&#x27;</span><br><span class="line">&quot;&#123;:.2f&#125;&quot;.format(12345.67890) #&#x27;12345.68&#x27; </span><br><span class="line">&quot;&#123;:&gt;25.3f&#125;&quot;.format(12345.67890)   # &#x27;                12345.679&#x27;</span><br><span class="line">&quot;&#123;:.5&#125;&quot;.format(&quot;全国计算机等级考试&quot;)#&#x27;全国计算机&#x27;</span><br><span class="line">&quot;&#123;0:b&#125;,&#123;0:c&#125;,&#123;0:d&#125;,&#123;0:o&#125;,&#123;0:x&#125;,&#123;0:X&#125;&quot;.format(425)# &#x27;110101001,Ʃ,425,651,1a9,1A9&#x27;b: 输出整数的二进制方式； c: 输出整数对应的Unicode字符； d: 输出整数的十进制方式； o: 输出整数的八进制方式； x: 输出整数的小写十六进制方式； X: 输出整数的大写十六进制方式； </span><br><span class="line">&quot;&#123;0:e&#125;,&#123;0:E&#125;,&#123;0:f&#125;,&#123;0:%&#125;&quot;.format(3.14) #&#x27;3.140000e+00,3.140000E+00,3.140000,314.000000%&#x27; </span><br><span class="line">&quot;&#123;0:.2e&#125;,&#123;0:.2E&#125;,&#123;0:.2f&#125;,&#123;0:.2%&#125;&quot;.format(3.14)  #对比输出 &#x27;3.14e+00,3.14E+00,3.14,314.00%&#x27;</span><br></pre></td></tr></table></figure><p>这个读者自行总结好了吧，适合自己的记忆才是有用的，官方解释以后遇到再说，反正能看懂</p><p>其实常用的就几个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;&#123;:.2f&#125;&quot;.format(3.1415926)   # 输出小数点后两位 &#x27;3.14&#x27; </span><br><span class="line">&quot;&#123;:x&#125;&quot;.format(1010)           # 输出整数的十六机制形式 &#x27;3f2&#x27; </span><br><span class="line">&quot;&#123;:.5&#125;&quot;.format(&quot;这是一个很长的字符串&quot;)  # 输出字符串的前5位 &#x27;这是一个很&#x27;</span><br><span class="line">&quot;&#123;:-^10&#125;&quot;.format(&quot;PYTHON&quot;)     # 居中并填充 &#x27;--PYTHON--&#x27;</span><br></pre></td></tr></table></figure><h4 id="字符串类型的操做"><a href="#字符串类型的操做" class="headerlink" title="字符串类型的操做"></a>字符串类型的操做</h4><table><thead><tr><th align="center">操作符</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">x + y</td><td align="center">连接两个字符串x与y</td></tr><tr><td align="center">x * n 或 n * x</td><td align="center">复制n次字符串x</td></tr><tr><td align="center">x in s</td><td align="center">如果x是s的子串，返回True，否则返回False，’Y’ in name →False</td></tr></tbody></table><p>字符串处理函数</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len(x)</td><td align="center">返回字符串x的长度，也可返回其他组合数据类型的元素个数</td></tr><tr><td align="center">str(x)</td><td align="center">返回任意类型x所对应的字符串形式</td></tr><tr><td align="center">chr(x)</td><td align="center">返回Unicode编码x对应的单字符</td></tr><tr><td align="center">ord(x)</td><td align="center">返回单字符x表示的Unicode编码</td></tr><tr><td align="center">hex(x)</td><td align="center">返回整数x对应十六进制数的小写形式字符串</td></tr><tr><td align="center">oct(x)</td><td align="center">oct(x)</td></tr></tbody></table><p>放张图自行参悟<img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/15.png"></p><p>在学习类型这一块，<code>type()</code>函数是个好东西，他能帮你得到你想要知道的东西的类型。比如<code>print(type(123))</code>就会打印出int，其他的也都可以用。</p><h2 id="第四章-程序的控制结构"><a href="#第四章-程序的控制结构" class="headerlink" title="第四章 程序的控制结构"></a>第四章 程序的控制结构</h2><h3 id="考纲考点-1"><a href="#考纲考点-1" class="headerlink" title="考纲考点"></a>考纲考点</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/16.png"></p><h3 id="程序的基本结构"><a href="#程序的基本结构" class="headerlink" title="程序的基本结构"></a>程序的基本结构</h3><p><strong>任何</strong>程序<strong>最多</strong>由<strong>三种</strong>基本结构组成：顺序结构、分支结 构和循环结构。 一条一条向下进行的翻译就是顺序结构，向下翻译时遇到需要跳过的部分就是分支(<code>if\swich</code>语句)，翻译到下面某处又返回到上面的就是循环(<code>while\for</code>语句)、</p><p>在这种逻辑语句中，缩进要特别注意，与程序逻辑相关很大，冒号也要重视，这是格式要求</p><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 判断用户输入数字的特点</span><br><span class="line">s = eval(input(&quot;请输出一个整数：&quot;)) #假如输入7</span><br><span class="line">if s % 3 == 0 and s % 5 == 0:  #这句话就要跳过，因为7不满足这个条件，所以就是分支</span><br><span class="line">print(&quot;这个数字既能被3整除，又能被5整除&quot;) </span><br><span class="line">else:#如果输入15，这句话就要跳过</span><br><span class="line">print(&quot;输入数字是:&quot;, s)</span><br></pre></td></tr></table></figure><p>有时候需要很多条岔路口，那就是else 后面再加一句 if，但是这种写法有规定，拼写成<code>elif</code>，然后有几个if就算几分支语句</p><table><thead><tr><th align="center">操作符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">==</td><td align="center">等于</td></tr><tr><td align="center">!=</td><td align="center">不等于</td></tr></tbody></table><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for c in &quot;Python&quot;:#这种也成为for的循环遍历</span><br><span class="line">print(c)</span><br><span class="line">#输出结果如下：</span><br><span class="line">P </span><br><span class="line">y </span><br><span class="line">t </span><br><span class="line">h </span><br><span class="line">o</span><br><span class="line">n</span><br><span class="line">#同样的效果还有：</span><br><span class="line">for i in range(6):#for循环经常搭配range函数使用</span><br><span class="line">print(&quot;Python&quot;[i])</span><br><span class="line">i = 0#while的用法</span><br><span class="line">while i &lt; 6:</span><br><span class="line">print(&quot;Python&quot;[i])</span><br></pre></td></tr></table></figure><h5 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h5><p>循环的时候如果遇到在一范围内不想继续运行的情况，就需要用到循环控制了——<code>break</code>和<code>continue</code>，<code>break</code>跳出整个循环，<code>continue</code>跳出当此循环</p><p>以for循环为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for i in range(6):</span><br><span class="line">if i == 1:</span><br><span class="line">continue</span><br><span class="line">elif i ==3:</span><br><span class="line">break</span><br><span class="line">print(&quot;Python&quot;[i])</span><br><span class="line">#输出结果如下：</span><br><span class="line">P #从第0号开始</span><br><span class="line">#y 第1号不输出</span><br><span class="line">t </span><br><span class="line">#以下都不输出，因为到了第三号</span><br><span class="line">h </span><br><span class="line">o</span><br><span class="line">n</span><br></pre></td></tr></table></figure><h3 id="程序的异常处理"><a href="#程序的异常处理" class="headerlink" title="程序的异常处理"></a>程序的异常处理</h3><p>Python语言使用保留字try和except进行异常处理，try后面如果遇到错误了，就执行except后面的，有点像if分支语句的感觉，举个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">for i in range(5):</span><br><span class="line">print(10/i, end=&quot; &quot;) </span><br><span class="line">except:     </span><br><span class="line">print(&quot;某种原因，出错了！&quot;) </span><br></pre></td></tr></table></figure><p>上面例子中，当<code>i</code>循环时，会从0开始，这样就出现除数为0的情况，这样讲道理是要报错的，但是遇到错误会执行except后面的代码，所以最后知识输出一句“某种原因，出错了！”酱紫。</p><h2 id="第五章-函数和代码复用"><a href="#第五章-函数和代码复用" class="headerlink" title="第五章 函数和代码复用"></a>第五章 函数和代码复用</h2><h3 id="考点考纲"><a href="#考点考纲" class="headerlink" title="考点考纲"></a>考点考纲</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/17.png"></p><h3 id="函数的基本使用"><a href="#函数的基本使用" class="headerlink" title="函数的基本使用"></a>函数的基本使用</h3><p>首先是定义函数，如下就定义完了，要注意的只有缩进和冒号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数(一些函数需要用到的参数):</span><br><span class="line">一些代码</span><br><span class="line">return 一些返回值，当然也可以没有</span><br></pre></td></tr></table></figure><p>定义了就要用，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def multiply(x, y):#定义函数</span><br><span class="line">print(x*y) </span><br><span class="line">multiply(99, 2) #调用函数，输出198</span><br><span class="line"></span><br><span class="line">def multiply(x=10, y):#定义函数</span><br><span class="line">print(x*y) </span><br><span class="line">multiply(2) #调用函数，输出20</span><br><span class="line"></span><br><span class="line">def multiply(x, y=10):#定义函数</span><br><span class="line">print(x*y) </span><br><span class="line">multiply(99) #调用函数，输出990</span><br><span class="line">multiply(y = 2, x = 99) #调用函数，输出198</span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>在谁的冒号下面的缩进下就是作用于谁的变量，除了那个冒号和缩进的范围就没用了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def hanshu():</span><br><span class="line">n=3</span><br><span class="line">print(n)#不报错</span><br><span class="line">print(n)#报错</span><br><span class="line"></span><br><span class="line">n=2</span><br><span class="line">def hanshu():</span><br><span class="line">print(n)#报错</span><br><span class="line">print(n)#不报错</span><br></pre></td></tr></table></figure><p>如果想要访问局部变量，科研在前面加上<code>global</code>用来强调是全局变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n=2</span><br><span class="line">def hanshu():</span><br><span class="line">    n=3</span><br><span class="line">    print(n)</span><br><span class="line">def han():</span><br><span class="line">    global n</span><br><span class="line">    n=3</span><br><span class="line">    print(n)</span><br><span class="line">print(n)</span><br><span class="line">hanshu()</span><br><span class="line">han()</span><br><span class="line">print(n)</span><br><span class="line">#输出：</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="组合数据类型"><a href="#组合数据类型" class="headerlink" title="组合数据类型"></a>组合数据类型</h2><h3 id="考纲考点-2"><a href="#考纲考点-2" class="headerlink" title="考纲考点"></a>考纲考点</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/18.png"></p><h3 id="组合数据类型的基本概念"><a href="#组合数据类型的基本概念" class="headerlink" title="组合数据类型的基本概念"></a>组合数据类型的基本概念</h3><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>集合是无序组合，用大括号（{}）表示，它没有 索引和位置的概念，集合中元素可以动态增加或删除。集合中元素不可重复，元素类型只能是固定数据类型，也就是说只能放你想赋值的东西，赋值过的房子是不能放进集合这种房子的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S = &#123;1010, &quot;1010&quot;, 78.9&#125;</span><br><span class="line">type(S) </span><br><span class="line">&lt;class &#x27;set&#x27;&gt; #输出</span><br><span class="line">len(S)</span><br><span class="line">3#输出</span><br><span class="line">print(S)</span><br><span class="line">&#123;78.9, 1010, &#x27;1010&#x27;&#125;#输出</span><br></pre></td></tr></table></figure><p>集合类型有4个操作符，交集（&amp;）、并集（|）、差集 （-）、补集（^），操作逻辑与数学定义相同。比如<code>S-T</code>得到一个新集合包括在集合S中但不在集合T中的元素 。</p><table><thead><tr><th align="center">函数或方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">S.add(x)</td><td align="center">如果数据项x不在集合S中，将x增加到s</td></tr><tr><td align="center">S.remove(x)</td><td align="center">如果x在集合S中，移除该元素；不在产生 KeyError异常</td></tr><tr><td align="center">S.clear()</td><td align="center">移除S中所有数据项</td></tr><tr><td align="center">len(S)</td><td align="center">返回集合S元素个数</td></tr><tr><td align="center">x in S</td><td align="center">如果x是S的元素，返回True，否则返回False</td></tr><tr><td align="center">x not in S</td><td align="center">如果x不是S的元素，返回True，否则返回False</td></tr></tbody></table><p>集合类型主要用于元素去重，适合于任何组合数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T = &#123;1010, &quot;1010&quot;, 12.3, 1010, 1010&#125;</span><br><span class="line">print(T) </span><br><span class="line">&#123;1010, &#x27;1010&#x27;, 12.3&#125;</span><br></pre></td></tr></table></figure><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p>理解以下字符串就行，字符串就是一种字符序列</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表也是一种序列，参考一下字符串，这里写一下不同的地方</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ls.append(x)</td><td align="center">在列表ls最后增加一个元素x</td></tr><tr><td align="center">ls.insert(i, x)</td><td align="center">在列表ls第i位置增加元素x</td></tr><tr><td align="center">ls.clear()</td><td align="center">删除ls中所有元素</td></tr><tr><td align="center">ls.pop(i)</td><td align="center">将列表ls中第i项元素取出并删除该元素</td></tr><tr><td align="center">ls.remove(x)</td><td align="center">将列表中出现的第一个元素x删除</td></tr><tr><td align="center">ls.reverse()</td><td align="center">列表ls中元素反转</td></tr><tr><td align="center">ls.copy()</td><td align="center">生成一个新列表，复制ls中所有元素</td></tr></tbody></table><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>其实字典也是序列，但是字符串和列表都是把索引默认按<code>[0,len(list)-1]</code>来确定顺序，而字典的区别就是自己把确定顺序的东西写出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&quot;201801&quot;:&quot;小明&quot;, &quot;201802&quot;:&quot;小红&quot;, &quot;201803&quot;:&quot;小白&quot;&#125;</span><br><span class="line">print(d[&quot;201802&quot;]) </span><br><span class="line">小红</span><br><span class="line"></span><br><span class="line">d = &#123;&quot;201801&quot;:&quot;小明&quot;, &quot;201802&quot;:&quot;小红&quot;, &quot;201803&quot;:&quot;小白&quot;&#125;</span><br><span class="line">len(d) </span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">#dict()函数用于生成一个空字典，作用和&#123;&#125;一致。 </span><br><span class="line">d = dict()</span><br><span class="line">print(d)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>稍微了解一点：排序的东西叫做keys，被排序的东西叫做values</p><table><thead><tr><th align="center">操作方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">d.keys()</td><td align="center">返回所有的键信息</td></tr><tr><td align="center">d.values()</td><td align="center">返回所有的值信息</td></tr><tr><td align="center">d.items()</td><td align="center">返回所有的键值对</td></tr><tr><td align="center">d.get(key, default)</td><td align="center">键存在则返回相应值，否则返回默认值</td></tr><tr><td align="center">d.pop(key, default)</td><td align="center">键存在则返回相应值，同时删除键值对，否则返回默认值</td></tr><tr><td align="center">d.popitem()</td><td align="center">随机从字典中取出一个键值对，以元组(key, value)形式返回</td></tr><tr><td align="center">d.clear()</td><td align="center">删除所有的键值对</td></tr></tbody></table><h2 id="第七章-文件和数据格式化"><a href="#第七章-文件和数据格式化" class="headerlink" title="第七章 文件和数据格式化"></a>第七章 文件和数据格式化</h2><h3 id="考纲考点-3"><a href="#考纲考点-3" class="headerlink" title="考纲考点"></a>考纲考点</h3><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/6.png"></p><h3 id="文件的使用"><a href="#文件的使用" class="headerlink" title="文件的使用"></a>文件的使用</h3><p>首先，读文件，分三个步骤，打开文件——读取文件——关闭文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file1 = open(&#x27;/Users/Ted/Desktop/test/abc.txt&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) </span><br><span class="line">#第一个参数是文件路径，这里知识举个例子，第二个参数是表示打开时文件的状态，第三个参数是编码方式</span><br></pre></td></tr></table></figure><p>路径有绝对路径和相对路径，相对当前文件夹的路径叫做相对路径，相对于我的电脑的路径是绝对路径。</p><p>文件打开时的状态是由“读read”“写write”“追加append”，以及与字节组合作用的效果，下图表示的是以二进制文件打开，把b换成t就算以文本文件方式打开，除了r、w、a还有x，表示如果文件不存在，则自行创建，如果存在就报错，而w是覆盖原文件的写，存在就覆盖，不存在就新建。</p><p><img src="/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BA%8C%E7%BA%A7Python/19.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(“a.txt”,“rb”) #b表示二进制文件方式 </span><br><span class="line">print(f.readline()) </span><br><span class="line">f.close()</span><br><span class="line">b&#x27;\xc8\xab\xb9\xfa\xbc\xc6\xcb\xe3\xbb\xfa\xb5\xc8\xbc\xb6 \xbf\xbc\xca\xd4&#x27;#输出内容</span><br><span class="line"></span><br><span class="line">f = open(&quot;D://b.txt&quot;, &quot;r&quot;)</span><br><span class="line">for line in f: </span><br><span class="line">print(line) #按行输出内容</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>用完文件一定要给关掉，要不然会造成内存泄漏、占用资源啥的。当然也可以用<code>with open(&#39;abc.txt&#39;,&#39;a&#39;) as file1:</code>这样的句子来打开文件，程序调用结束后文件会自动关闭。</p><table><thead><tr><th align="center">方法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">f.read(size=-1)</td><td align="center">从文件中读入整个文件内容。参数可选，如果给出，读入 前size长度的字符串或字节流</td></tr><tr><td align="center">f.readline(size = -1)</td><td align="center">从文件中读入一行内容。参数可选，如果给出，读入该行 前size长度的字符串或字节流</td></tr><tr><td align="center">f.readlines(hint=-1)</td><td align="center">从文件中读入所有行，以每行为元素形成一个<strong>列表</strong>。参数 可选，如果给出，读入hint行</td></tr><tr><td align="center">f.seek(offset)</td><td align="center">改变当前文件操作指针的位置，offset的值： 0：文件开头； 2: 文件结尾</td></tr><tr><td align="center">f.write(s)</td><td align="center">向文件写入一个字符串或字节流</td></tr><tr><td align="center">f.writelines(lines)</td><td align="center">将一个元素为字符串的<strong>列表</strong>写入文件</td></tr></tbody></table><h3 id="数据组织的维度"><a href="#数据组织的维度" class="headerlink" title="数据组织的维度"></a>数据组织的维度</h3><p>1、2、3、4这样叫一维数据</p><p>下表是二维数据：</p><table><thead><tr><th align="center">1</th><th align="center">2</th></tr></thead><tbody><tr><td align="center">小红</td><td align="center">小明</td></tr></tbody></table><p>高维数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;本书&quot; : [</span><br><span class="line">&quot;第1章&quot; : &quot;程序设计基本方法&quot;, </span><br><span class="line">&quot;第2章&quot; : &quot;Python语言基本语法元素&quot;, </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>那么这样的数据怎么存入文件呢？上面说的写入都是将列表中的元素原封不动的存入txt文件中，通过向元素中加入换行符等等对写入进行格式调整，其实我们也可以用其他方法。</p><p>其中用逗号分割的存储格式叫做<code>csv</code>格式（Comma-Separated Values，即逗号分隔值）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;天津&#x27;, &#x27;重庆&#x27;] </span><br><span class="line">f = open(&quot;city.csv&quot;, &quot;w&quot;) </span><br><span class="line">f.write(&quot;,&quot;.join(ls)+ &quot;\n&quot;) </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>写入效果为<code>北京,上海,天津,重庆</code>这样的好处是在读写数据时调整格式而不改变给出数据的样式。</p><p>对一维数据进行处理首先需要从CSV格式文件读 入一维数据，并将其表示为列表对象。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;city.csv&quot;, &quot;r&quot;)</span><br><span class="line">#strip(&quot;\n&quot;)函数用于移除开头和结尾的换行符，split(&quot;,&quot;)用“，”分割数据</span><br><span class="line">ls = f.read().strip(&#x27;\n&#x27;).split(&quot;,&quot;) </span><br><span class="line">f.close() </span><br><span class="line">print(ls)#[&#x27;北京&#x27;, &#x27;上海&#x27;, &#x27;天津&#x27;, &#x27;重庆&#x27;] </span><br></pre></td></tr></table></figure><p>二维数据也挺好理解的，就是若干条一维数据存在一起，如下示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls = [ </span><br><span class="line">[&#x27;指标&#x27;, &#x27;2014年&#x27;, &#x27;2015年&#x27;, &#x27;2016年&#x27;],</span><br><span class="line">[&#x27;居民消费价格指数&#x27;, &#x27;102&#x27;, &#x27;101.4&#x27;, &#x27;102&#x27;], </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>二维列表对象写入为CSV格式文件方法如下，采 用遍历循环和字符串的join()方法相结合。 因为<code>join()</code>函数对一维列表用的，直接上二维的话他无法识别到里面的内容，写出来的话可能不尽人意。读取是同样道理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ls代表二维列表，此处省略 </span><br><span class="line">f = open(&quot;cpi.csv&quot;, &quot;w&quot;) </span><br><span class="line">for row in ls:     </span><br><span class="line">f.write(&quot;,&quot;.join(row)+ &quot;\n&quot;) </span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h2 id="第八章-Python计算生态"><a href="#第八章-Python计算生态" class="headerlink" title="第八章  Python计算生态"></a>第八章  Python计算生态</h2><h3 id="考纲考点-4"><a href="#考纲考点-4" class="headerlink" title="考纲考点"></a>考纲考点</h3><p> 1、基本的Python内置函数        2、了解Python计算生态</p><p>计算思维的本质是抽象（Abstraction）和自动化（Automation）</p><p> 一个解决复杂问题行之有效的方法被称作自顶而下的设计方法，其基本思想是以一个总问题开始，试图把它表达为很多小问题组成的解决方案。再用同样的技术依次攻破每个小问题，最终问题变得非常小，以至于可以很容易解决。然后只需把所有的碎片组合起来，就可以得到一个程序。</p><p>整个过程可以概括为四个步骤： 步骤1：将算法表达为一系列小问题； 步骤2：为每个小问题设计接口；步骤3：通过将算法表达为接口关联的多个小问 题来细化算法；步骤4：为每个小问题重复上述过程。</p><p>执行中等规模程序的最好方法是从结构图最底层开始，而不是从顶部开始，然后逐步上升。自顶向下和自底向上贯穿程序设计和执行的整个过程。</p><h2 id="第九章-Python标准库概览"><a href="#第九章-Python标准库概览" class="headerlink" title="第九章  Python标准库概览"></a>第九章  Python标准库概览</h2><h3 id="考纲考点-5"><a href="#考纲考点-5" class="headerlink" title="考纲考点"></a>考纲考点</h3><p>标准库: turtle库(必选)     random库(必选)        time库(可选）</p><h3 id="turtle库"><a href="#turtle库" class="headerlink" title="turtle库"></a>turtle库</h3><p>turtle库就是一只笔，画画用的。导入库有三种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import turtle </span><br><span class="line">turtle.circle(200）#画圆</span><br><span class="line">from turtle import * </span><br><span class="line">circle(200)#画圆</span><br><span class="line">import turtle as t </span><br><span class="line">t.circle(200)#画圆</span><br></pre></td></tr></table></figure><p> turtle库包含100多个功能函数，主要包括窗体函 数、画笔状态函数、画笔运动函数等三类。</p><h4 id="窗体函数"><a href="#窗体函数" class="headerlink" title="窗体函数"></a>窗体函数</h4><p><code>turtle.setup(width, height, startx, starty)</code> </p><p>作用：设置主窗体的大小和位置</p><p>参数：</p><p> width ：窗口宽度，如果值是整数，表示的像素值；如果值 是小数，表示窗口宽度与屏幕的比例； </p><p>height: 窗口高度，如果值是整数，表示的像素值；如果 值是小数，表示窗口高度与屏幕的比例；</p><p>startx：窗口左侧与屏幕左侧的像素距离，如果值是None ，窗口位于屏幕水平中央；</p><p>starty：窗口顶部与屏幕顶部的像素距离，如果值是None ，窗口位于屏幕垂直中央；</p><h4 id="画笔状态函数"><a href="#画笔状态函数" class="headerlink" title="画笔状态函数"></a>画笔状态函数</h4><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">pendown()</td><td align="center">放下画笔</td></tr><tr><td align="center">penup()</td><td align="center">提起画笔，与pendown()配对使用</td></tr><tr><td align="center">pensize(width)</td><td align="center">设置画笔线条的粗细为指定大小</td></tr><tr><td align="center">pencolor()</td><td align="center">设置画笔的颜色</td></tr><tr><td align="center">begin_fill()</td><td align="center">填充图形前，调用该方法</td></tr><tr><td align="center">end_fill()</td><td align="center">填充图形结束</td></tr><tr><td align="center">filling()</td><td align="center">返回填充的状态，True为填充，False为未填充</td></tr><tr><td align="center">clear()</td><td align="center">清空当前窗口，但不改变当前画笔的位置</td></tr><tr><td align="center">reset()</td><td align="center">清空当前窗口，并重置位置等状态为默认值</td></tr><tr><td align="center">screensize()</td><td align="center">设置画布的长和宽</td></tr><tr><td align="center">hideturtle()</td><td align="center">隐藏画笔的turtle形状</td></tr><tr><td align="center">showturtle()</td><td align="center">显示画笔的turtle形状</td></tr><tr><td align="center">isvisible()</td><td align="center">如果turtle可见，则返回True</td></tr></tbody></table><h4 id="画笔运动函数"><a href="#画笔运动函数" class="headerlink" title="画笔运动函数"></a>画笔运动函数</h4><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">forward()   /    fd()</td><td align="center">沿着当前方向前进指定距离</td></tr><tr><td align="center">backward()</td><td align="center">沿着当前相反方向后退指定距离</td></tr><tr><td align="center">right(angle)</td><td align="center">向右旋转angle角度</td></tr><tr><td align="center">left(angle)</td><td align="center">向左旋转angle角度</td></tr><tr><td align="center">goto(x,y)</td><td align="center">移动到绝对坐标（x,y）处</td></tr><tr><td align="center">setx( )</td><td align="center">将当前x轴移动到指定位置</td></tr><tr><td align="center">sety( )</td><td align="center">将当前y轴移动到指定位置</td></tr><tr><td align="center">setheading(angle)  /  seth()</td><td align="center">设置当前朝向为angle角度，整数角度</td></tr><tr><td align="center">home()</td><td align="center">设置当前画笔位置为原点，朝向东</td></tr><tr><td align="center">circle(radius,e)</td><td align="center">绘制一个指定半径r和角度e的圆或弧形</td></tr><tr><td align="center">dot(r,color)</td><td align="center">绘制一个指定半径r和颜色color的圆点</td></tr><tr><td align="center">undo()</td><td align="center">撤销画笔最后一步动作</td></tr><tr><td align="center">speed()</td><td align="center">设置画笔的绘制速度，参数为0-10之间</td></tr></tbody></table><h3 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h3><p>使用random库主要目的是生成随机数 ，其中 最基本的函数是random.random()，它生成 一个[0.0, 1.0)之间的随机小数，其他随 机函数都是基于这个函数扩展而来。</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">seed(a=None)</td><td align="center">初始化随机数种子，默认值为当前系统时间</td></tr><tr><td align="center">random()</td><td align="center">生成一个[0.0, 1.0)之间的随机小数</td></tr><tr><td align="center">randint(a, b)</td><td align="center">生成一个[a,b]之间的整数</td></tr><tr><td align="center">getrandbits(k)</td><td align="center">生成一个k比特长度的随机整数</td></tr><tr><td align="center">randrange(start, stop[, step])</td><td align="center">生成一个[start, stop)之间以step为步数的随机整数</td></tr><tr><td align="center">uniform(a, b)</td><td align="center">生成一个[a, b]之间的随机小数</td></tr><tr><td align="center">choice(seq)</td><td align="center">从序列类型(例如：列表)中随机返回一个元素，从列表随机选一个</td></tr><tr><td align="center">shuffle(seq)</td><td align="center">将序列类型中元素随机排列，返回打乱后的序列</td></tr><tr><td align="center">sample(pop, k)</td><td align="center">从pop类型中随机选取k个元素，以列表类型返回</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from random import *</span><br><span class="line">seed(10) </span><br><span class="line">random() </span><br><span class="line">0.5714025946899135 </span><br><span class="line">random() </span><br><span class="line">0.4288890546751146 </span><br><span class="line">seed(10)   #再次设置相同的种子，则后续产生的随机数相同，所以说计算机得到的随机数都不是真正意义上的随机</span><br><span class="line">random() </span><br><span class="line">0.5714025946899135</span><br><span class="line">random() </span><br><span class="line">0.4288890546751146</span><br></pre></td></tr></table></figure><h3 id="time库"><a href="#time库" class="headerlink" title="time库"></a>time库</h3><p>time库的功能主要分为3个方面：时间处理、 时间格式化和计时</p><p> 时间处理主要包括4个函数：<code>time.time()</code>、 <code>time.gmtime()</code>、<code>time.localtime()</code> 、<code>time.ctime()</code></p><p>时间格式化主要包括3个函数：<code>time.mktime()</code>、 <code>time.strftime()</code>、<code>time.strptime()</code></p><p>计时主要包括3个函数：<code>time.sleep()</code> 、 <code>time.monotonic()</code>、<code>time.perf_counter()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from time import *</span><br><span class="line">now=time()#获取当前时间戳</span><br><span class="line">print(now)</span><br><span class="line">print(gmtime(now))#获取当前时间戳对应 的struct_time对象</span><br><span class="line">print(localtime(now))#获取当前时间戳对 应的本地时间的struct_time对象</span><br><span class="line">print(ctime(now))#获取当前时间戳对应的 易读字符串表示</span><br><span class="line">print(mktime(localtime(now)))#将struct_time对象t转换为时间戳</span><br><span class="line">print(strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,localtime(now)))#利用一个 格式字符串，对时间格式进行表达。</span><br><span class="line">timeString=&#x27;2019-01-26 12:55:20&#x27;</span><br><span class="line">print(strptime(timeString,&quot;%Y-%m-%d %H:%M:%S&quot;))#提取字符串中时间来生成strut_time对象</span><br><span class="line"></span><br><span class="line">#输出结果：</span><br><span class="line">1563460629.0969484</span><br><span class="line">time.struct_time(tm_year=2019, tm_mon=7, tm_mday=18, tm_hour=14, tm_min=37, tm_sec=9, tm_wday=3, tm_yday=199, tm_isdst=0)</span><br><span class="line">time.struct_time(tm_year=2019, tm_mon=7, tm_mday=18, tm_hour=22, tm_min=37, tm_sec=9, tm_wday=3, tm_yday=199, tm_isdst=0)</span><br><span class="line">Thu Jul 18 22:37:09 2019</span><br><span class="line">1563460629.0</span><br><span class="line"></span><br><span class="line">time.struct_time(tm_year=2019, tm_mon=1, tm_mday=26, tm_hour=12, tm_min=55, tm_sec=20, tm_wday=5, tm_yday=26, tm_isdst=-1)</span><br></pre></td></tr></table></figure><p>time库与程序计时非常重要噢，这里可以自行写一个较多次数的循环，比如一个10000次的循环，然后每100次输出以下当前时间来了解。</p><h2 id="第十章-第三方库概览"><a href="#第十章-第三方库概览" class="headerlink" title="第十章 第三方库概览"></a>第十章 第三方库概览</h2><h3 id="考纲考点-6"><a href="#考纲考点-6" class="headerlink" title="考纲考点"></a>考纲考点</h3><p>第三方库的获取和安装、脚本程序转变为可执行程序的第三方库:PyInstaller库(必选)、jieba库(必选)、wordcloud库（可选）</p><h3 id="Python第三方库的获取和安装"><a href="#Python第三方库的获取和安装" class="headerlink" title="Python第三方库的获取和安装"></a>Python第三方库的获取和安装</h3><p>三个方法：pip工具安装、自定义安装、文件安装</p><h4 id="pip工具安装"><a href="#pip工具安装" class="headerlink" title="pip工具安装"></a>pip工具安装</h4><p>最常用且最高效的Python第三方库安装方式是 采用pip工具安装。pip是Python官方提供并维 护的在线第三方库安装工具。 可以安装超 过90%以上的第三方库。在Mac OS X和Linux等操 作系统中，pip工具几乎可以安装任何Python第三方库， 在Windows操作系统中，有一些第三方库仍然需要用其他方式尝试安装。</p><p>安装方式，打开cmd命令行就可以，然后<code>pip install &lt;拟安装库名&gt;</code></p><p>另外输入命令<code>pip -h</code>回车还可以查看pip常用的子命令， pip支持安装（install）、下载（download）、 卸载（uninstall）、列表（list）、查看（list）、 查找（search）等一系列安装和维护子命令。</p><h4 id="自定义安装"><a href="#自定义安装" class="headerlink" title="自定义安装"></a>自定义安装</h4><p>自定义安装指按照第三方库提供的步骤和方式安装。以科学计算 用的numpy为例，开发者维护的官方主页是： <a href="http://www.numpy.org/">http://www.numpy.org/</a> 浏览该网页找到下载链接，如下： <a href="http://www.scipy.org/scipylib/download.html">http://www.scipy.org/scipylib/download.html</a> 进而根据指示步骤安装。</p><h4 id="文件安装"><a href="#文件安装" class="headerlink" title="文件安装"></a>文件安装</h4><p>为了解决这类第三方库安装问题，美国加州大学尔湾分 校提供了一个页面，帮助Python用户获得Windows可直 接安装的第三方库文件，链接地址如下： <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>这里以scipy为例说明，首先在上述页面中找到scipy库 对应的内容。选择其中的.whl文件下载，这里选择适用 于Python 3.5版本解释器和32位系统的对应文件：scipy0.17.1-cp35-cp35m-win32.whl，下载该文件到 D:\pycodes目录。 然后，采用<code>pip install D:\pycodes\scipy-0.17.1-cp35-cp35m-win32.whl</code> 命令安装该文件。</p><p>优先使用pip安装，没网的时候提前下载<code>.whl</code>文件，然后使用文件安装，就ok</p><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><h4 id="PyInstaller库"><a href="#PyInstaller库" class="headerlink" title="PyInstaller库"></a>PyInstaller库</h4><p> PyInstaller是一个十分有用的Python第三方库，它能够 在Windows、Linux、Mac OS X等操作系统下将Python 源文件打包，变成直接可运行的可执行文件。 通过对源文件打包，Python程序可以在没有安装Python 的环境中运行，也可以作为一个独立文件方便传递和管理。可以试试用pip安装命令自己安装试试啊。</p><p>然后使用<code>PyInstaller &lt;Python源程序文件名&gt;</code>进行打包，执行完毕后，源文件所在目录将生成dist和build 两个文件夹。最终的打包程序在dist内部与源文 件同名的目录中。<code>PyInstaller -F &lt;Python源程序文件名&gt;</code>将Python文件生成一个独立可执行的文件。执行后在dist目录中出现了SnowView.exe文件， 没有任何依赖库，即可执行。</p><table><thead><tr><th align="center">参数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">-h, –help</td><td align="center">查看帮助</td></tr><tr><td align="center">–clean</td><td align="center">清理打包过程中的临时文件</td></tr><tr><td align="center">-D, –onedir</td><td align="center">默认值，生成dist目录</td></tr><tr><td align="center">-F, –onefile</td><td align="center">在dist文件夹中只生成独立的打包文件</td></tr><tr><td align="center">-i &lt; 图 标 文 件 名 .ico &gt;</td><td align="center">指定打包程序使用的图标（icon）文件</td></tr></tbody></table><h4 id="jieba库"><a href="#jieba库" class="headerlink" title="jieba库"></a>jieba库</h4><p>由于中文文本中的单词不是通过空格或者标点符号分割，中文及类似语言存在一个重要的“分词”问题。  jieba（“结巴”）是Python中一个重要的第三 方中文分词函数库。<code>pip install jieba</code></p><p> jieba库支持三种分词模式：<strong>精确模式</strong>，将句子最 精确地切开，适合文本分析；<strong>全模式</strong>，把句子中所有可以成词的词语都扫描出来，速度非常快，但是不能解决歧义；<strong>搜索引擎模式</strong>，在精确模式基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</p><p>对中文分词来说，jieba库只需要一行代码即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import jieba </span><br><span class="line">ls=jieba.lcut(&quot;全国计算机等级考试&quot;) </span><br><span class="line">print(ls)</span><br><span class="line">#然后就：</span><br><span class="line">[&#x27;全国&#x27;, &#x27;计算机&#x27;, &#x27;等级&#x27;, &#x27;考试&#x27;]</span><br></pre></td></tr></table></figure><p> jieba.lcut(s)是最常用的中文分词函数，用于精准 模式，即将字符串分割成等量的中文词组，返回结果是列表类型。</p><p> jieba.lcut(s, cut_all = True)用于全模式，即将字 符串的所有分词可能均列出来，返回结果是列表类型，冗余性最大。</p><p> jieba.lcut_for_search(s)返回搜索引擎模式，该 模式首先执行精确模式，然后再对其中长词进一步切分获得最终结果。</p><p> jieba.add_word()函数，顾名思义，用来向jieba 词库增加新的单词。这样再将中文分词的时候就会按照新添加的词库来分。</p><h4 id="wordcloud库"><a href="#wordcloud库" class="headerlink" title="wordcloud库"></a>wordcloud库</h4><p> wordcloud库是专门用于根据文本生成词云的 Python第三方库，十分常用且有趣。pip按照噢。</p><p> wordcloud库的使用十分简单，以一个字符串为 例。其中，产生词云只需要一行语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">form wordcloud import WordClout</span><br><span class="line">txt=&quot;Github is funny,I like github&quot;</span><br><span class="line">wordcloud=WordCloud().generate(txt)</span><br><span class="line">words = jieba.lcut(txt)        # 精确分词 </span><br><span class="line">newtxt = &#x27; &#x27;.join(words)       # 空格拼接 </span><br><span class="line">wordcloud123=WordCloud(font_path=&quot;msyh.ttc&quot;).generate(newtxt) </span><br><span class="line">wordcloud.to_file(&#x27;testcloud.png&#x27;) #也可以存为图片</span><br></pre></td></tr></table></figure><p>在生成词云时，wordcloud默认会以空格或标点 为分隔符对目标文本进行分词处理。对于中文文本，分词处理需要由用户来完成。一般步骤是先将文本分词处理，然后以空格拼接，再调用 wordcloud库函数。</p><p>还有wordcloud库与可视化词云的使用，网不行了，没法实战演示</p><h2 id="第十一章-Python第三方库纵览"><a href="#第十一章-Python第三方库纵览" class="headerlink" title="第十一章 Python第三方库纵览"></a>第十一章 Python第三方库纵览</h2><h3 id="考点考纲-1"><a href="#考点考纲-1" class="headerlink" title="考点考纲"></a>考点考纲</h3><p>更广泛的Python计算生态，只要求了解第三方库的名称，不限于以下领域: 网络爬虫、数据分析、文本处理、数据可视化、用户图形界面、机器学习、Web开发、游戏开发等</p><p><strong>以下内容了解一下就行了</strong></p><h3 id="网络爬虫方向"><a href="#网络爬虫方向" class="headerlink" title="网络爬虫方向"></a>网络爬虫方向</h3><p>网络爬虫是自动进行HTTP访问并捕获HTML页 面的程序。Python语言提供了多个具备网络爬 虫功能的第三方库。这里，仅介绍2个常用的 Python网络爬虫库：requests和scrapy。</p><p> requests库是一个简洁且简单的处理HTTP请求的第三方 库，它的最大优点是程序编写过程更接近正常URL访问 过程。这个库建立在Python语言的urllib3库基础上。 request库支持非常丰富的链接访问功能。 </p><p>scrapy是Python开发的一个快速的、高层次的Web获取 框架。不同于简单的网络爬虫功能，scrapy框架本身包 含了成熟网络爬虫系统所应该具有的部分共用功能，用途广泛，可以应用于专业爬虫系统的构建、数 据挖掘、网络监控和自动化测试等领域。 </p><h3 id="数据分析方向"><a href="#数据分析方向" class="headerlink" title="数据分析方向"></a>数据分析方向</h3><p>数据分析是Python的一个优势方向，具有大批高质量的 第三方库。这里仅介绍3个最常用的生态库：numpy、 scipy和pandas</p><p>numpy是Python的一种开源数值计算扩展第三方库，用 于处理数据类型相同的多维数组（ndarray），简称“数 组”。 这个库可用来存储和处理大型矩阵，比Python语言提供 的列表结构要高效的多。numpy提供了许多高级的数值 编程工具，如：矩阵运算、矢量处理、N维数据变换等。numpy内部是C语言编写，对外采用Python语言进行封 装，因此，在进行数据运算时，基于numpy的Python程 序可以达到接近C语言的处理速度。numpy也成为 Python数据分析方向各其他库的基础依赖库，已经成为 了科学计算事实上的“标准库”。 </p><p> scipy是一款方便、易于使用、专为科学和工程设计的 Python工具包。在numpy库的基础上增加了众多的数学、 科学以及工程计算中常用的库函数。它包括统计、优化、整合、线性代数、傅里叶变换、信号分析、图像处理、常微分方程求解等众多模块。</p><p>pandas是基于numpy扩展的一个重要第三方库，它是为 了解决数据分析任务而创建的。Pandas提供了一批标准 的数据模型和大量快速便捷处理数据的函数和方法，提供了高效地操作大型数据集所需的工具。 pandas提供两种最基本的数据类型：Series和DataFrame，分别代表一维数组和二维数组类型。 </p><h3 id="文本处理方向"><a href="#文本处理方向" class="headerlink" title="文本处理方向"></a>文本处理方向</h3><p>Python语言非常适合处理文本，因此，在这个 方向也形成了大量有价值的第三方库。这里介绍 4个最常用的生态库：pdfminer、openpyxl、 python-docx、beautifulsoup4。</p><p>pdfminer是一个可以从PDF文档中提取各类信 息的第三方库。与其他PDF相关的工具不同，它能够完全获取并分析 PDF 的文本数据，Pdfminer能够获取PDF中文本的准确位置、字体、行数等信息，能够将PDF文件转换为HTML及文本格式。pdfminer包含两个重要工具：pdf2txt.py和dumppdf.py。pdf2txt.py能够从PDF文件中提取所有文本内容。 dumppdf.py能够把PDF文件内容变成XML格式，并进一步提取其中的图片。 </p><p>openpyxl是一个处理Microsoft Excel文档的Python第三方库，它支持读写Excel的xls、xlsx、xlsm、xltx、xltm 等格式文件，并进一步能处理Excel文件中excel工作表、 表单和数据单元。 </p><p>python-docx是一个处理Microsoft Word文档的Python第三方库，它支持读取、查询以及修改doc、docx等格 式文件，并能够对Word常见样式进行编程设置，包括： 字符样式、段落样式、表格样式等，进一步可以使用这<br>个库实现添加和修改文本、图像、样式和文档等功能。 </p><p>beautifulsoup4库，也称为BeautifulSoup库或 bs4库，用于解析和处理HTML和XML。需要注意，它不是BeautifulSoup库。它的最大优点是能根据HTML和XML语法建立解析树，进而高效解析其中的内容，并且可以将数据从HTML和XML文件中解析出来，它能够提供一种符合习惯的方法去遍历搜索和修改 解析树，将专业的Web页面格式解析部分封装成函数，提供了若干有用且便捷的处理函数。 </p><h3 id="数据可视化方向"><a href="#数据可视化方向" class="headerlink" title="数据可视化方向"></a>数据可视化方向</h3><p>数据可视化指根据数据特点将其展示为易于理解 图形的过程。Python语言在数据可视化方面具 有较强的优势。这里介绍3个最常用的生态库： matplotlib、TVTK、mayavi。</p><p> matplotlib是提供数据绘图功能的第三方库，主 要进行二维图表数据展示，广泛用于科学计算的 数据可视化。使用这个库可以利用Python程序 绘制超过100种数据可视化效果。 </p><p>TVTK库在标准的VTK库之上用Traits库进行封装的 Python第三方库。视觉工具函数库（VTK）是一个开源、 跨平台、支持平行处理的图形应用函数库，它是专业可 编程的三维可视化工具。TVTK在Python生态系统中被 等同于VTK。 </p><p>mayavi基于VTK开发，完全用Python编写，提供了一个 更为方便实用的可视化软件，可以简洁地嵌入到用户编 写的Python程序中，或者直接使用其面向脚本的API快 速绘制三维可视化图形。值得注意的是，mayavi也被称 为mayavi2。 mayavi库在Windows平台上暂时不能方便的使用pip命 令安装，建议使用文件安装，请下载mayavi对应版本文 件，然后在本地安装。</p><h3 id="用户图形界面方向"><a href="#用户图形界面方向" class="headerlink" title="用户图形界面方向"></a>用户图形界面方向</h3><p>Python标准库内置了一个GUI库——tkinter，这 个库基于Tck/Tk开发，然而，这个库十分陈旧， 提供的开发控件也很有限，编写出来的GUI风格 与现代程序GUI风格相差甚远，从用户体验角度 说，tkinter库并不成熟。 这里介绍3个高质量的用户图形界面Python生态 库：pyqt5、wxpython、pygtk。</p><p>pyqt5是Qt5应用框架的Python第三方库，它有超过620个类和近6000个函数和方法。它是 Python中最为成熟的商业级GUI第三方库。这个库是Python语言当前最好的GUI第三方库，它可以在Windows、Linux和Mac OS X等操作系统上跨平台使用。pyqt5采用“信号-槽”机制将事件和对应的处理 程序进行绑定。pyqt5窗体有很多内置信号，也可以自定义信号。 </p><p>wxPython是Python语言的一套优秀的GUI图形库，它 是跨平台GUI库wxWidgets的Python封装，可以使 Python程序员能够轻松地创建健壮可靠、功能强大的图 形用户界面的程序。 </p><p>pygtk是基于GTK+的Python语言封装，它提供了各式的 可视元素和功能，能够轻松创建具有图形用户界面的程 序。pygtk具有跨平台性,利用它编写的代码能够不加修 改地稳定运行在各操作系统中，如Windows、MacOS、 Linux等。 </p><h3 id="机器学习方向"><a href="#机器学习方向" class="headerlink" title="机器学习方向"></a>机器学习方向</h3><p>机器学习是人工智能领域的一个重要分支， Python语言也是机器学习和人工智能的重要基 础语言。这里介绍3个高质量的机器学习框架： Scikit-learn、TensorFlow、Theano。</p><p> Scikit-learn是一个简单且高效的数据挖掘和数据分析工 具，它基于NumPy、SciPy和matplotlib构建。Scikitlearn的基本功能主要包括6个部分：分类，回归，聚类， 数据降维，模型选择和数据预处理。Scikit-learn也被称 为sklearn。 </p><p>TensorFlow是谷歌公司基于DistBelief进行研发的第二代 人工智能学习系统，也是用来支撑著名的AlphaGo系统 的后台框架。Tensor（张量）指N维数组，Flow（流） 指基于数据流图的计算，TensorFlow描述张量从流图的 一端流动到另一端的计算过程。 </p><p> Theano为执行深度学习中大规模神经网络算法的运算而 设计，擅长处理多维数组。Theano开发始于2007，可以 理解它是一个运算数学表达式的编译器，并可以高效运 行在GPU或CPU上。Theano是一个偏向底层开发的库， 更像一个研究平台而非单纯的深度学习库。 </p><h3 id="Web开发方向"><a href="#Web开发方向" class="headerlink" title="Web开发方向"></a>Web开发方向</h3><p>Web开发是Python语言流行的一个重要方向， 主要用于服务器后端开发。根据Python Web开 发框架的复杂程度，这里依次介绍3个Python第 三方生态库：Django、Pyramid、Flask。</p><p> Django是Python生态中最流行的开源Web应用框架。 Django采用模型、模板和视图的编写模式，称为MTV模 式。Django中提供了开发网站经常用到的模块，Django 的开发理念是DRY(Don’t Repeat Yourself)，用于鼓励快 速开发，进而减少程序员可以建立一个高性能Web应用 所花费的时间和精力，形成一种一站式解决方案。 </p><p>Pyramid是一个通用、开源的Python Web应用程序开发 框架。它主要的目的是让Python开发者更简单的创建 Web应用，相比Django，Pyramid是一个相对小巧、快 速、灵活的开源Python Web框架。Pyramid仍然面向较 大规模的Web应用，但它更关注灵活性，开发者可以灵 活选择所使用的数据库、模板风格、URL结构等内容。 </p><p>Flask是轻量级Web应用框架，相比Django和Pyramid， 它也被称为微框架。使用Flask开发Web应用十分方便， 甚至几行代码即可建立一个小型网站。Flask核心十分简 单，并不直接包含诸如数据库访问等的抽象访问层，而是通过扩展模块形式来支持。 </p><h3 id="游戏开发方向"><a href="#游戏开发方向" class="headerlink" title="游戏开发方向"></a>游戏开发方向</h3><p>游戏开发是一个有趣的方向，在游戏逻辑和功能 实现层面，Python已经成为重要的支撑性语言。 这里介绍3个Python第三方生态库：Pygame、 Panda3D、cocos2d。 </p><p> Pygame是在SDL库基础上进行封装的、面向游 戏开发入门的Python第三方库，除了制作游戏 外，还用于制作多媒体应用程序。其中，SDL （Simple DirectMedia Layer）是开源、跨平台 的多媒体开发库，通过OpenGL和Direct3D底层 函数提供对音频、键盘、鼠标和图形硬件的简洁<br>访问。Pygame是一个游戏开发框架，提供了大量与游 戏相关的底层逻辑和功能支持，非常适合作为入门库理解并实践游戏开发。 </p><p>Panda3D是一个开源、跨平台的3D渲染和游戏开发库, 简答说，它是一个3D游戏引擎，由迪士尼和卡耐基梅隆 大学娱乐技术中心共同进行开发。Panda3D支持Python 和C++两种语言，但对Python支持更全面。 Panda3D支持很多当代先进游戏引擎所支持的特性：法 线贴图、光泽贴图、HDR、卡通渲染和线框渲染等。 </p><p>cocos2d是一个构建2D游戏和图形界面交互式应用的框 架，它包括C++、JavaScript、Swift、Python等多个版 本。cocos2d基于OpenGL进行图形渲染，能够利用GPU 进行加速。cocos2d引擎采用树形结构来管理游戏对象， 一个游戏划分为不同场景，一个场景又分为不同层，每个层处理并响应用户事件。 </p>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 计算机二极 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA可视化闹钟源码</title>
      <link href="/2019/JAVA%E5%8F%AF%E8%A7%86%E5%8C%96%E9%97%B9%E9%92%9F%E6%BA%90%E7%A0%81/"/>
      <url>/2019/JAVA%E5%8F%AF%E8%A7%86%E5%8C%96%E9%97%B9%E9%92%9F%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>一些同学的Java课设有这样一个问题，比较感兴趣就做了一下</p><span id="more"></span><h2 id="功能介绍："><a href="#功能介绍：" class="headerlink" title="功能介绍："></a>功能介绍：</h2><p>1、可增加闹钟</p><p>2、可删除闹钟</p><p>3、时间到了响铃</p><p>4、关闭闹钟不会丢失闹钟（因为闹钟存储在txt文件中，不会因程序关闭就终止）</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1、没有使用多线程，闹钟响起时只能等待1分钟或者关闭程序</p><p>2、界面设计不够美观，后期有时间会进行修改，重新设计</p><p>3、没有闹钟修改的功能，虽然可以通过增删来达到修改的目的，但功能仍然属于空缺范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br></pre></td><td class="code"><pre><span class="line">package Clock;</span><br><span class="line"></span><br><span class="line">import sun.audio.AudioPlayer;</span><br><span class="line">import sun.audio.AudioStream;</span><br><span class="line"></span><br><span class="line">import javax.swing.*;               //awt和swing是做界面用的类</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.event.ActionEvent;</span><br><span class="line">import java.awt.event.ActionListener;</span><br><span class="line">import java.awt.event.WindowAdapter;</span><br><span class="line">import java.awt.event.WindowEvent;</span><br><span class="line">import java.io.*;                   //io流用于读写文件，包括增删闹钟、打开铃声等等</span><br><span class="line">import java.util.Calendar;          //用于获取当前时间的类</span><br><span class="line">import java.util.GregorianCalendar;//标准阳历</span><br><span class="line">import java.util.StringTokenizer;  //读取文件转换成计算机语言用的类</span><br><span class="line">/*</span><br><span class="line">1 计时器</span><br><span class="line">要求1：一个带有可视化界面的钟表。</span><br><span class="line">要求2：可以添加若干个闹钟。</span><br><span class="line">要求3：具备持久化功能，关闭程序不能丢失闹钟。</span><br><span class="line">要求4：闹钟是可编辑，可删除的。</span><br><span class="line"></span><br><span class="line">实现：先创建一个面板显示闹钟，面板内创建按钮增加闹钟，按钮查看闹钟，按钮删除闹钟</span><br><span class="line">     线程间隔1s读取时间和闹钟比较</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">public class ClockTry extends JFrame implements Runnable &#123;</span><br><span class="line">    /* 成员变量 */</span><br><span class="line">    private JPanel xx;      //总的面板</span><br><span class="line">    private JComboBox ho;   //hour选择时间的下拉框</span><br><span class="line">    private JComboBox mi;  //min选择分钟的下拉框</span><br><span class="line">    private JButton tjnz;   //添加闹钟的按钮</span><br><span class="line">    private JButton schour;    //删除闹钟的按钮</span><br><span class="line">    private String filename = &quot;D://homework//java//Gui//src//Clock//0.wav&quot;;     //所有的路径改这两个地方就可以了</span><br><span class="line">    private String pathname = &quot;D://homework//java//Gui//src//Clock//nz.txt&quot;; // 绝对路径或相对路径都可以，写入文件时演示相对路径,读取以上路径的input.txt文件</span><br><span class="line"></span><br><span class="line">    private int HOUR;       //定义HOUR用于接收按钮按下从下拉框中获取的数据</span><br><span class="line">    private int MIN;        //同上</span><br><span class="line"></span><br><span class="line">    int x = 100, y = 100, r = 100; // （x,y）为(0,0)点，表示原点</span><br><span class="line">    int h, m, s; // 时,分,秒</span><br><span class="line">    double rad = Math.PI / 180; //  1°</span><br><span class="line"></span><br><span class="line">    private String[][] str= new String[100][2];     //定义二维数组，用于存储以及对小时和分针的操作，暂定为100个闹钟于是定义为【100】【2】</span><br><span class="line">    /**</span><br><span class="line">    *读取文件，每次的增删都需要对数据进行读取，将数据写在面板上也需要读取数据</span><br><span class="line">     */</span><br><span class="line">    public void readFile() &#123;</span><br><span class="line">        try (FileReader reader = new FileReader(pathname);      //创建一个FilReader对象，将文件读出来，相当于请教一个当地人，当地人了解本地文化，但是语言不通听不懂</span><br><span class="line">             BufferedReader br = new BufferedReader(reader) // 建立一个对象，它把文件内容转成计算机能读懂的语言，相当于请一个翻译，把当地人读取的东西转换成计算机能懂的东西</span><br><span class="line">        ) &#123;</span><br><span class="line">            String line;</span><br><span class="line"></span><br><span class="line">            int i =0;</span><br><span class="line">            while ((line = br.readLine()) != null) &#123;        //翻译理解的东西存到line里面</span><br><span class="line">                int j =0;</span><br><span class="line">                StringTokenizer st = new StringTokenizer(line, &quot;:&quot;);        //重点：由于存储数据时都是时间，道理来说都是数字，无法区分小时部分和分钟部分</span><br><span class="line">                while (st.hasMoreTokens())&#123;               //每读取一次读到的内容     //所以这里用分割符“：”来分割，相应的，后面的写入文件也应该已“：”分割进行写入</span><br><span class="line">                    str[i][j]=st.nextToken();               //把读到的内容存储在数组里面便于后面的操做——增删</span><br><span class="line">                    j++;                                    //包括上面的j=0，是将for循环拆分放进while循环中，要不然循环写起来也很麻烦</span><br><span class="line">                &#125;</span><br><span class="line">                //System.out.print(str[i][0]+&quot;:&quot;+str[i][1]);       写的时候用来在控制台打印查看效果</span><br><span class="line">                //System.out.println();</span><br><span class="line">                i++;</span><br><span class="line">                j = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();                    //try……catch抛出异常</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 写入TXT文件</span><br><span class="line">     */</span><br><span class="line">    public void writeFile() &#123;</span><br><span class="line">        HOUR = Integer.valueOf(ho.getSelectedIndex());                          //获取下拉框中的值，存储到HOUR中</span><br><span class="line">        MIN = Integer.valueOf(mi.getSelectedIndex());</span><br><span class="line">        String x = HOUR + &quot;:&quot; + MIN;</span><br><span class="line">        try (FileWriter writer = new FileWriter(pathname,true);         //同上面的读取，本地人写入，注意：后面的append：true是表示不是重新写，而是在后面追加</span><br><span class="line">             BufferedWriter out = new BufferedWriter(writer)                    //翻译一下再写入</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            out.write(HOUR + &quot;:&quot; + MIN + &quot;\r\n&quot;);                           //这里写入的时候把:写进去了！</span><br><span class="line">            out.flush();                                                        // 把缓存区内容压入文件，计算机的存储过程，存在缓存区再写入文件</span><br><span class="line">            JOptionPane.showMessageDialog(null,&quot;闹钟添加成功！&quot;,&quot;添加闹钟提醒&quot;,JOptionPane.INFORMATION_MESSAGE); //提示框：添加闹钟成功</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除闹钟，实际上是先将要删除的数据找到移除数组，再将数组重新写入，所以要先读取文件，再重新写入</span><br><span class="line">     */</span><br><span class="line">    public void shanchuFile() &#123;</span><br><span class="line">        HOUR = Integer.valueOf(ho.getSelectedIndex());</span><br><span class="line">        MIN = Integer.valueOf(mi.getSelectedIndex());</span><br><span class="line">        try (FileWriter writer = new FileWriter(pathname);              //没有append：true，表示重新写！</span><br><span class="line">             BufferedWriter out = new BufferedWriter(writer)</span><br><span class="line">        ) &#123;</span><br><span class="line">            readFile();</span><br><span class="line">            for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">                if (Integer.valueOf(str[i][0])==HOUR &amp;&amp; Integer.valueOf(str[i][1])==MIN)&#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    out.write(str[i][0]+&quot;:&quot;+str[i][1]+&quot;\r\n&quot;); // \r\n即为换行</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //out.write(&quot;1&quot;+&quot;1&quot;+&quot;\r\n&quot;); // \r\n即为换行</span><br><span class="line">            out.flush(); // 把缓存区内容压入文件</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;catch (NumberFormatException e)&#123;</span><br><span class="line">            System.out.println(&quot;this isn&#x27;t exist!&quot;);</span><br><span class="line">            JOptionPane.showMessageDialog(null,&quot;该闹钟已删除！&quot;,&quot;删除闹钟提醒&quot;,JOptionPane.INFORMATION_MESSAGE); //弹窗提示</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 初始化函数 */</span><br><span class="line">    public void init() &#123;</span><br><span class="line"></span><br><span class="line">        Calendar now = new GregorianCalendar();     //获取当前时间</span><br><span class="line">        /*</span><br><span class="line">         * GregorianCalendar（标准阳历）</span><br><span class="line">         * 是Calendar（日历）【国际环境下都能运行的程序】</span><br><span class="line">         * 的子类</span><br><span class="line">         */</span><br><span class="line">        s = now.get(Calendar.SECOND) * 6; // 秒针转换成角度：1秒，秒针动一次，转动6°</span><br><span class="line">        m = now.get(Calendar.MINUTE) * 6; // 分针转换为角度：1分，分针动一次，转动6°</span><br><span class="line">        h = now.get(Calendar.HOUR) * 30 + now.get(Calendar.MINUTE) / 12 * 6; // 先把分化为小时，再乘以6°，因为分针转12°，时针才会转1°，一小时中间有5格，数学问题</span><br><span class="line">        /*</span><br><span class="line">         * Calendar.HOUR 显示范围：1-12（无论AM还是PM） Calendar.HOUR_OF_DAY 显示范围：1-24（包括PM</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        Thread t = new Thread(this);        //添加线程，线程目标是整个程序，this</span><br><span class="line">        t.start();                                  //线程就绪</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void paint(Graphics g) &#123;                 //awt中的方法，因为要时时显示闹钟，所以不得不使用绘画的方式，不断重绘</span><br><span class="line">        super.paint(g);</span><br><span class="line">        /*</span><br><span class="line">         * paint(g)函数会重绘图像，要加上super.paint(g)，表示在原来图像的基础上，再画图。</span><br><span class="line">         * 如果不加super.paint(g)，重绘时，会将原有的绘制清空，再根据paing(g)函数绘制。</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line">        g.setColor(Color.BLACK);                    //设置画笔颜色——黑色</span><br><span class="line">        g.drawOval(x, y, r * 2, r * 2);// 画表</span><br><span class="line">        /* drawOval(x,y,width,height)以矩形恰好框住椭圆，矩形左上角的顶点坐标为(x,y) */</span><br><span class="line"></span><br><span class="line">        // 秒针</span><br><span class="line">        int x1 = (int) (90 * Math.sin(rad * s));</span><br><span class="line">        int y1 = (int) (90 * Math.cos(rad * s));</span><br><span class="line">        g.drawLine(r+x, r+y, r+x + x1, r +y- y1);</span><br><span class="line">        /* drawLine(a,b,c,d) (a,b)为起始坐标 (c,d)为终点坐标 */</span><br><span class="line"></span><br><span class="line">        // 分针</span><br><span class="line">        x1 = (int) (80 * Math.sin(rad * m));</span><br><span class="line">        y1 = (int) (80 * Math.cos(rad * m));</span><br><span class="line">        g.drawLine(r+x, r+y, r +x+ x1, r+y - y1);</span><br><span class="line"></span><br><span class="line">        // 时针</span><br><span class="line">        x1 = (int) (60 * Math.sin(rad * h));</span><br><span class="line">        y1 = (int) (60 * Math.cos(rad * h));</span><br><span class="line">        g.drawLine(r+x, r+y, r+x + x1, r +y- y1);</span><br><span class="line"></span><br><span class="line">        // 画数字</span><br><span class="line">        int d = 30;</span><br><span class="line">        for (int i = 1; i &lt;= 12; i++) &#123;</span><br><span class="line">            x1 = (int) ((r - 10) * Math.sin(rad * d));</span><br><span class="line">            y1 = (int) ((r - 10) * Math.cos(rad * d));</span><br><span class="line">            g.drawString(String.valueOf(i), r+x + x1, r+y - y1);    //字符型的数据才能画</span><br><span class="line">            d += 30;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 画刻度</span><br><span class="line">        d = 0;</span><br><span class="line">        for (int i = 1; i &lt;= 60; i++) &#123;</span><br><span class="line">            x1 = (int) ((r - 2) * Math.sin(rad * d));</span><br><span class="line">            y1 = (int) ((r - 2) * Math.cos(rad * d));</span><br><span class="line">            g.drawString(&quot;.&quot;, r+x + x1, r +y- y1);      //画的是点，表示刻度</span><br><span class="line">            d += 6;</span><br><span class="line">        &#125;</span><br><span class="line">        // 显示时间</span><br><span class="line">        Calendar now1 = new GregorianCalendar();</span><br><span class="line">        int a, b, c;</span><br><span class="line">        a = now1.get(Calendar.HOUR_OF_DAY);     //获取当前的小时</span><br><span class="line">        b = now1.get(Calendar.MINUTE);          //获取当前的分钟</span><br><span class="line">        c = now1.get(Calendar.SECOND);           //获取当前的秒钟</span><br><span class="line">        g.drawString(a + &quot;:&quot; + b + &quot;:&quot; + c, 175, 330);      //将时间也画到面板上</span><br><span class="line">        g.drawString(&quot;全部闹钟：&quot;,100,350);                  //全部闹钟</span><br><span class="line"></span><br><span class="line">        try (FileReader reader = new FileReader(pathname);</span><br><span class="line">             BufferedReader br = new BufferedReader(reader) // 建立一个对象，它把文件内容转成计算机能读懂的语言</span><br><span class="line">        ) &#123;</span><br><span class="line">            String line;</span><br><span class="line"></span><br><span class="line">            int i =0;</span><br><span class="line">            while ((line = br.readLine()) != null) &#123;</span><br><span class="line">                int j =0;</span><br><span class="line">                StringTokenizer st = new StringTokenizer(line, &quot;:&quot;);</span><br><span class="line">                while (st.hasMoreTokens())&#123;</span><br><span class="line">                    str[i][j]=st.nextToken();</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                g.drawString(str[i][0]+&quot;:&quot;+str[i][1]+&quot;\n&quot;,180+(i/10)*70,350+15*(i-(i/10)*10));  //貌似重新写了一下readfile的方法，其实是有区别的，这里是读取以后画出来</span><br><span class="line">                //qbnz.setText(str[i][0]+&quot;:&quot;+str[i][1]+&quot;\n&quot;);</span><br><span class="line">                //System.out.print(str[i][0]+&quot;:&quot;+str[i][1]);</span><br><span class="line">                //System.out.println();</span><br><span class="line">                i++;</span><br><span class="line">                j = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException z) &#123;</span><br><span class="line">            z.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 实现Runnable，实现implement Runnable就务必实现run方法，使线程运行</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);// 间隔一秒</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            s += 6;// 秒针每次走6°</span><br><span class="line">            if (s &gt;= 360) &#123;</span><br><span class="line">                s = 0;            // 秒针归零</span><br><span class="line">                m += 6;</span><br><span class="line">            if (m == 72 || m == 144 || m == 288) &#123;</span><br><span class="line">                h += 6;                // 分针走72°，时针走6° 分针的12倍，时针走一次</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            if (m &gt;= 360) &#123;</span><br><span class="line">                m = 0;                // 分针归零</span><br><span class="line">                h += 6;</span><br><span class="line">            &#125;</span><br><span class="line">            if (h &gt;= 360) &#123;</span><br><span class="line">                h = 0;                // 时针归零</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            this.repaint();     // 重新绘制</span><br><span class="line">            //this.readFile();</span><br><span class="line">            this.alert();       //将闹钟加入到线程当中</span><br><span class="line">        &#125;&#125;</span><br><span class="line"></span><br><span class="line">    public void alert()&#123;</span><br><span class="line">        Calendar now1 = new GregorianCalendar();</span><br><span class="line">        int a, b;</span><br><span class="line">        a = now1.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">        b = now1.get(Calendar.MINUTE);      //这里没有获取秒针是因为闹钟不看秒针。。。。。</span><br><span class="line">        try (FileReader reader = new FileReader(pathname);</span><br><span class="line">             BufferedReader br = new BufferedReader(reader) // 建立一个对象，它把文件内容转成计算机能读懂的语言</span><br><span class="line">        ) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            String[][] str= new String[100][2];</span><br><span class="line">            int i =0;</span><br><span class="line">            while ((line = br.readLine()) != null) &#123;</span><br><span class="line">                int j =0;</span><br><span class="line">                StringTokenizer st = new StringTokenizer(line, &quot;:&quot;);</span><br><span class="line">                while (st.hasMoreTokens())&#123;</span><br><span class="line">                    str[i][j]=st.nextToken();</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                if (a==Integer.valueOf(str[i][0]) &amp;&amp; b==Integer.valueOf(str[i][1]))&#123;        //读取后与获得的时间比较，如果闹钟存在，就响</span><br><span class="line">                    try&#123;</span><br><span class="line">                        InputStream in = new FileInputStream(&quot;D://homework//java//Gui//src//Clock//0.wav&quot;);//FIlename 是你加载的声音文件如(“game.wav”)</span><br><span class="line">                        AudioStream as = new AudioStream(in);           //和读取文件类似的原理，经翻译之后才播放出来</span><br><span class="line">                        AudioPlayer.player.start(as);       //用静态成员player.start播放音乐</span><br><span class="line">                        &#125; catch(FileNotFoundException e)&#123;</span><br><span class="line">                        System.out.print(&quot;FileNotFoundException &quot;);</span><br><span class="line">                    &#125; catch(IOException e)&#123;</span><br><span class="line">                        System.out.print(&quot;有错误!&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                j = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException z) &#123;</span><br><span class="line">            z.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //初始化界面</span><br><span class="line">    public  void  launchFrame()&#123;</span><br><span class="line">        xx = new JPanel();      //插入一个面板</span><br><span class="line">        String[] hours = new String[24];        //长度为24的数组用于存储小时</span><br><span class="line">        for (int i = 0; i &lt; hours.length; i++) &#123;</span><br><span class="line">            hours[i]=i+&quot;&quot;;              //循环对hour进行赋值</span><br><span class="line">        &#125;</span><br><span class="line">        ho = new JComboBox(hours);      //将hour加入到下拉框中</span><br><span class="line">        ho.setSize(50,40);  //设置大小好像没用</span><br><span class="line">        String[] mins = new String[60];     //同理，这是分钟的地方</span><br><span class="line">        for (int i = 0; i &lt; mins.length; i++) &#123;</span><br><span class="line">            mins[i]=i+&quot;&quot;;                   //分钟赋值</span><br><span class="line">        &#125;</span><br><span class="line">        mi = new JComboBox(mins);           //分钟下拉框</span><br><span class="line">        mi.setSize(50,40);</span><br><span class="line">        tjnz = new JButton();               //添加闹钟的按钮，拼音首字母</span><br><span class="line">        tjnz.setText(&quot;添加到闹钟&quot;);             //按钮上显示的文字</span><br><span class="line">        tjnz.setSize(100,40);</span><br><span class="line">        schour = new JButton();                 //删除闹钟的按钮</span><br><span class="line">        schour.setText(&quot;从闹钟中删除&quot;);           //按钮上显示的文字</span><br><span class="line">        schour.setSize(100,40);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 将按钮下拉框啥的加入到面板中</span><br><span class="line">         */</span><br><span class="line">        xx.add(ho);</span><br><span class="line">        xx.add(mi);</span><br><span class="line">        xx.add(tjnz);</span><br><span class="line">        xx.add(schour);</span><br><span class="line">        this.add(xx);       //将面板加入到this对象中，要不然面板就不显示</span><br><span class="line">        tjnz.addActionListener(new ActionListener() &#123;       //添加按钮的功能</span><br><span class="line">                @Override                                   //重写的标识，务必要会</span><br><span class="line">                public void actionPerformed(ActionEvent e) &#123;</span><br><span class="line">                    // TODO Auto-generated method stub</span><br><span class="line">                    HOUR = Integer.valueOf(ho.getSelectedIndex());</span><br><span class="line">                    MIN = Integer.valueOf(mi.getSelectedIndex());      //获取到时分后</span><br><span class="line">                    writeFile();                                       //写入txt文件保存为闹钟</span><br><span class="line">                    readFile();                                        //再读取，这样才能时时更新面板上的全部闹钟</span><br><span class="line">        &#125;&#125;);</span><br><span class="line"></span><br><span class="line">        schour.addActionListener(new ActionListener() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void actionPerformed(ActionEvent e) &#123;</span><br><span class="line">                    // TODO Auto-generated method stub</span><br><span class="line">                    HOUR = Integer.valueOf(ho.getSelectedIndex());</span><br><span class="line">                    MIN = Integer.valueOf(mi.getSelectedIndex());</span><br><span class="line">                    shanchuFile();                                      //这里是删除闹钟的按钮功能</span><br><span class="line">                    readFile();</span><br><span class="line">                &#125;&#125;);</span><br><span class="line"></span><br><span class="line">        this.setTitle(&quot;小闹钟&quot;);                                     //设置窗口标题</span><br><span class="line">        this.setVisible(true);                                      //设置窗口不隐身</span><br><span class="line">        this.setSize(700,500);                        //设置窗口大小</span><br><span class="line">        this.setLocation(500, 250);                           //设置窗口位置，相对于桌面左上角</span><br><span class="line">        this.init();                                                //调用初始化函数进行初始化</span><br><span class="line">        this.alert();</span><br><span class="line">        //this.run();       //重复调用run（）方法结果是秒针一次走12°</span><br><span class="line">        this.addWindowListener(new WindowAdapter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void windowClosing(WindowEvent e) &#123;</span><br><span class="line">                System.exit(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);     //设置窗口叉号的功能，点击就关闭程序</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ClockTry c = new ClockTry();        //main方法，必有的成分，创建主类对象，</span><br><span class="line">        c.launchFrame();                    //调用初始化面板的方法，简化了本该在main方法中写的代码</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="./imgs/JAVA%E5%8F%AF%E8%A7%86%E5%8C%96%E9%97%B9%E9%92%9F%E6%BA%90%E7%A0%81/1.png" alt="1"></p><p><img src="./imgs/JAVA%E5%8F%AF%E8%A7%86%E5%8C%96%E9%97%B9%E9%92%9F%E6%BA%90%E7%A0%81/2.png" alt="2"></p><p><img src="./imgs/JAVA%E5%8F%AF%E8%A7%86%E5%8C%96%E9%97%B9%E9%92%9F%E6%BA%90%E7%A0%81/3.png" alt="3"></p><p>此版本为第一次尝试，后续有时间会继续更新版本</p>]]></content>
      
      
      <categories>
          
          <category> 软件编程 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Swing </tag>
            
            <tag> 图形化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java环境变量配置超详细教程</title>
      <link href="/2019/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2019/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Java的环境配置并不是特别难，但是对刚上手的新手来说确实是一个大问题</p><span id="more"></span><p>首先下载jdk安装包<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">网址</a>进去选择自己需要的版本下载就行了，这里演示的是jdk-8u131-windows-x64_8.0.1310.11，版本稍老，道理一样</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载后直接双击运行，这时会让你选择安装路径<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image1.png"><br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image2.png"><br>默认是C盘，这里改成自己想要存放的地方，我放在了我D盘的ROUTE文件夹下的java目录下的jdk1.8.0_131<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/22.png"><br>然后点击确定，下一步，开始跑进度条，但是不一会就会弹窗出来jre的安装路径<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image3.png"><br>我们点击更改，然后选择一个别的文件夹,我这里放在了java文件夹下的jre1.8文件夹，因为老放C盘等C盘满了就很麻烦，所以做好分类条理清晰点用着也舒服。<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image4.png"><br>然后点击下一步<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image5.png"><br>接着等待跑进度条，分分钟完事<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image6.png"><br>然后就安装结束了，点击完成即可<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image7.png"></p><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><p>接下来就是环境变量的配置</p><p>首先右键此电脑，选择属性<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/23.png"><br>点击左侧的高级系统设置<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/24.png"><br>点击环境变量<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/25.png"><br>在下方的系统变量中点击新建<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image8.png"><br>新建变量名为JAVA_HOME<br>变量值我们点击浏览目录，选择jdk的安装路径jdk1.8.0_131文件夹<br>然后点击确定<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image9.png"><br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image10.png"><br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image11.png"><br>到这里还没有完成，别着急<br>然后我们还要继续新建一个环境变量<br>变量名为CLASSPATH<br>变量值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure><p>%之间的相当于一个路径的绝对引用，好处是如果你想给别人演示一遍这个教程，只需要重新安装一边jdk，环境变量重新说说就行了<br>当然你也可以自己选择浏览文件，这里不做过多演示<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image12.png"><br>到这里还是没有完成<br>接下来配置系统变量path，这里有点东西要注意，一不小心就出错</p><h3 id="path系统变量的配置"><a href="#path系统变量的配置" class="headerlink" title="path系统变量的配置"></a>path系统变量的配置</h3><h4 id="先按做一遍错误示范"><a href="#先按做一遍错误示范" class="headerlink" title="先按做一遍错误示范"></a>先按做一遍错误示范</h4><p>我们点击path环境变量进行编辑<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image13.png"><br>然后点击右侧的编辑<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image14.png"><br>在编辑框的后面输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure><p>注意：符号都是英文符号<br>然后点击确定，确定，确定，直到退出环境变量的设置的地方，这就算是配置完成了<br>这时候如果打开cmd小黑框进行验证环境变量是否配置成功的话，分别输入java、javac、java -version再分别回车，但是javac的回车后面会报错，这里暂时先不放图片了</p><h4 id="接下来做正确示范"><a href="#接下来做正确示范" class="headerlink" title="接下来做正确示范"></a>接下来做正确示范</h4><p>在按照上述错误做法进行的时候我们退出来可以发现path系统变量的值多了一个双引号<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image16.png"><br>所以我们只需要再次点击编辑，然后点击编辑文本<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image17.png"><br>接下里窗口会变成下图这样，我们移动光标找到两个双引号并删除就ok了<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image18.png"><br>当然，如果没有按照错误的做法来做的话，直接点击编辑文本，然后把;%JAVA_HOME%/bin;%JAVA_HOME%/jre\bin;输入进去当然就直接ok了</p><h5 id="ps：貌似win7系统可以直接点编辑就有编辑文本的效果"><a href="#ps：貌似win7系统可以直接点编辑就有编辑文本的效果" class="headerlink" title="ps：貌似win7系统可以直接点编辑就有编辑文本的效果"></a>ps：貌似win7系统可以直接点编辑就有编辑文本的效果</h5><h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><p>打开cmd，下面三种命令同时成功才算是真正的成功，否则还是无法使用。<br>输入java回车出现类似下图即为成功<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image19.png"><br>输入javac回车出现类似下图即为成功<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image20.png"><br>输入java -version回车出现类似下图即为成功<br><img src="/images/Java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image21.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 教程 </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装及配置最详细教程</title>
      <link href="/2019/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2019/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>MySQL作为最常用的数据库，手动安装的方法还是稍微有些弯弯</p><span id="more"></span><p>首先下载安装包 （<a href="https://dev.mysql.com/downloads/file/?id=476233">官网</a>） 进入页面后可以不登录。后点击底部”No thanks, just start my download.”即可开始下载。</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>直接把压缩包解压到你想安装的路径即可，相当于不用安装，可以看到我的解压路径在D盘的ROUTE文件夹下的mysql8文件夹中，下图画红线的Date文件夹和my.ini文件是解压时本没有的，这里先不说，后面会讲<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image1.png"><br>我安装的时候，先在解压到的文件夹下创建了my.ini文件，其中代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#设置3306端口</span><br><span class="line">port=3306</span><br><span class="line">#设置mysql的安装目录</span><br><span class="line">basedir=D:\\ROUTE\\mysql8   # 此处可以用单斜杠也可以用双斜杠，有的人用单斜杠会错，自己试试就知道了</span><br><span class="line">#设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\\ROUTE\\mysql8\\Data   # 此处同上</span><br><span class="line">#允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line">#允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line">#服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line">#创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">#默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line">#设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line">#设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[WinMySQLAdmin]</span><br><span class="line">Server=D:\ROUTE\mysql8\bin\mysqld.exe</span><br><span class="line">#设置将mysql的服务添加到注册表中，反正我当时没加这句话初始化有问题，目录照猫画虎，单双杠自己选</span><br></pre></td></tr></table></figure><p>关于3360端口没什么好说的，MySQL默认端口可能会被占用，修改端口即可。<br>然后上面写的路径是我电脑上的相关路径，第二处（D:\ROUTE\mysql8\Data）Date就是指在接下来初始化时会自行创建的文件夹，你就别改了，跟我先做一遍再说。然后保存即可。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>然后我们来配置环境变量<br>右键此电脑选择属性<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image2.png"><br>然后点击“高级系统设置”<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image3.png"><br>点击环境变量<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image4.png"><br>在系统变量下找到path，点一下path然后再点击“编辑”<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image5.png"><br>然后点新建，再点浏览<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image6.png"><br>选择bin文件的目录点确定就ok，然后退出时依此确定保存即可，环境变量配置成功。<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image7.png"></p><h2 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h2><p>接下来进行数据库初始化</p><p>找到cmd，这里要以管理员身份运行，怎么操作呢？<br>我们打开运行(win 和 R一起按），输入cmd回车<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image8.png"><br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image9.png"><br>可以看到上面写着C:\Windows\System32\cmd.exe<br>然后我们找到这个路径，右键以管理员身份运行就ok<br>(当然也可以直接在搜索框中搜索cmd然后右键以管理员身份运行就行了，这里就不演示了。)<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image10.png"><br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image11.png"><br>然后打开到bin目录下：<br>如果不在C盘，比如我的在D盘，就要先输入D:<br>因为从C盘到其他盘必须先转到其他盘以后才能使用cd命令<br>然后输入cd ROUTE\mysql8\bin<br>如果在C盘就直接用cd按照上述形式打开即可<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image12.png"><br>然后输入mysqld –initialize –console<br>注意是mysqld不是mysql，是两个横不是一个横，单词后面有一个空格！<br>然后回车<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image13.png"><br>这个显示过程大概30秒吧<br>效果图如上，三个方框里显示的内容是固定的，顺序也固定，多显示或许没问题，少显示一定有问题，warning只是警告，千万别有error<br>然后这里一定记住！！！！！！！<br>@localhost：后面的几个奇怪字符是初始化密码，千万记住，要不然忘记密码的改密码很麻烦！！！！看不懂字的看图！！！！</p><p>然后继续输入mysqld –install<br>注意：mysqld不是mysql，中间有空格，两横不是一横！！！<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image14.png"><br>我这演示了一边移除，然后进行的安装，如上图显示就基本大功告成了</p><p>然后我们关闭cmd黑窗口（别忘了密码!!!密码!!!密码!!!），再按照之前的步骤从新以管理员身份打开一个新的cmd窗口<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image15.png"><br>输入net start mysql命令来开启mysql服务<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image16.png"><br>然后输入mysql -u root –p<br>来进入数据库，这是会让你输入密码！！！！！<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image17.png"></p><h2 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h2><p>然后改一个好记的密码<br>继续输入alter user ‘root‘@’localhost’identified with mysql_native_password by ‘新密码’;<br>注意！！！！！上面的句子是不区分大小写的，但是密码好像区分！不过符号还是都用英文符号来写吧，因为我用中文失败过。。。。还有！！！！句末有英文分号看清楚，不能少！！！<br><img src="/images/MySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/image18.png"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这个时候就算是完成了。</p><p>注意：如果有问题都会报错，自己动手搜索才能完全解决自己的问题</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 环境变量 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
